/* eslint-disable no-underscore-dangle */

import debug from '@fs/zion-debug'
import { isValidDBName, generateDBName, getActiveRole } from './utils'

const logWarn = debug('cache:setupConfig:warn')

export const hour = 1000 * 60 * 60
export const day = hour * 24
export const week = day * 7
export const twoWeeks = week * 2
export const month = twoWeeks * 2

const hasWindow = typeof window !== 'undefined'

const lifetimes = {
  hour,
  day,
  week,
  twoWeeks,
  month,
}

export function setLifetime(lifetime) {
  if (!lifetime) return lifetimes.twoWeeks

  // parse lifetime from 'hour', 'day', 'week', 'twoWeeks'
  if (typeof lifetime === 'string' && lifetimes[lifetime]) {
    return lifetimes[lifetime]
  }

  // parse lifetime from number in milliseconds
  if (!Number.isNaN(Number(lifetime))) {
    return Number(lifetime)
  }

  return lifetimes.twoWeeks
}

export async function calculateDbName({ dbName, ignoreHelper } = {}) {
  if (dbName) return dbName

  const { getUser, getEffectiveUser } = await import('@fs/zion-user')

  try {
    let { cisId } = ignoreHelper ? await getUser() : await getEffectiveUser()

    const assignment = await getActiveRole()

    if (assignment) {
      // Admin roles have spaces, replace with -
      cisId += assignment.replace(/ /g, '-')
    }

    if (!isValidDBName(cisId)) {
      cisId = generateDBName(cisId, 1)
    }

    return cisId
  } catch (err) {
    logWarn(
      'User Required for Cache unless you specify a dbName. Defaulting dbName to "fs". https://beta.familysearch.org/frontier/zion/?path=/story/utilities-cache--readme'
    )
    return 'fs'
  }
}

export function setStoreName({ storeName = 'fs', storeVersion } = { storeName: 'fs' }) {
  // Only allow letters, numbers and underscore in storeName (safari bug)
  if (!/^[a-z0-9_]+$/i.test(storeName)) {
    throw new Error('Only letters, numbers or _ in storeName')
  }

  if (storeVersion) {
    storeName += `__${storeVersion}`
  }
  return storeName
}

export function setDriver(type, localforage, memoryStorageDriver, sessionStorageWrapper) {
  if (!hasWindow) {
    return memoryStorageDriver._driver
  }
  switch (type) {
    case 'local':
      return localforage.LOCALSTORAGE
    case 'session':
      return sessionStorageWrapper._driver
    case 'memory':
      return memoryStorageDriver._driver
    default:
      return [localforage.INDEXEDDB, localforage.WEBSQL, localforage.LOCALSTORAGE, memoryStorageDriver._driver]
  }
}
