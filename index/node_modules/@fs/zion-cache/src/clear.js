import localforage from 'localforage/dist/localforage.nopromises'
import debug from '@fs/zion-debug'

const logWarn = debug('cache:clear:warn')
const logInfo = debug('cache:clear:info')

/**
 * Runs through all caches created by Zion Cache and clears them.
 * @returns {Promise}
 */
export async function clearAll() {
  const databases = await localforage.getItem('DBs')

  if (!databases || !databases.length) {
    logInfo('No Databases.')
    return []
  }

  const promises = []
  const storeNames = []
  databases.forEach((db) => {
    const store = localforage.createInstance(db)
    storeNames.push(db)

    promises.push(store.clear())
  })

  await Promise.all(promises)

  logInfo('ALL CLEAR')

  return databases
}

/**
 * A function that gets called everytime this file loads that checks
 * the last time cleared and if it's been over two weeks, clear out all data
 * @returns {Promise}
 */
export async function periodicClear() {
  const now = new Date().getTime()
  const dbs = await localforage.getItem('DBs')
  const lastTimesCleared = (await localforage.getItem('lastTimesCleared')) || {}

  if (!dbs || !dbs.length) return Promise.resolve()

  const promises = dbs.map((db) => {
    const lastTimeCleared = lastTimesCleared[db.id]

    if (!lastTimeCleared) {
      lastTimesCleared[db.id] = now
    }

    if (now - lastTimeCleared > db.lifetime) {
      const dbInstance = localforage.createInstance(db)
      lastTimesCleared[db.id] = now
      return dbInstance.clear()
    }
    return Promise.resolve()
  })

  promises.push(localforage.setItem('lastTimesCleared', lastTimesCleared))

  return Promise.all(promises)
}

/**
 * Runs through all caches created by Zion Cache and deletes them.
 * (runs indexedDB.deleteDatabase for each)
 * @returns {Promise}
 */
export async function deleteAll() {
  const dbs = await clearAll()

  if (!dbs || !dbs.length) {
    throw new Error('No databases exist')
  }

  // filter out non indexedDB instances
  const databases = dbs.filter((db) => db.driver.indexOf(localforage.INDEXEDDB) !== -1)

  if (databases.length) {
    databases.forEach((db) => {
      try {
        indexedDB.deleteDatabase(db.name)
        // console.info(`${db.name} was deleted`)
      } catch (e) {
        logWarn(`${db.name} was not deleted properly`)
      }
    })
  }

  await localforage.clear()

  logInfo('ALL DELETED')
  return 'ALL DELETED'
}

periodicClear()
