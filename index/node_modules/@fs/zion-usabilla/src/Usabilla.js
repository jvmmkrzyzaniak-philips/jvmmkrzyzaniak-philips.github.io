import React, { lazy, Suspense, useEffect, useRef } from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { i18n } from '@fs/zion-locale'
import { useTranslation } from 'react-i18next'
import { colors, useContainerWidth, useOverlay } from '@fs/zion-ui'
import Elevation from '@fs/zion-ui/elevation'
import { useMutationObserver } from '@fs/zion-frontend-friends'
import treeImg from './assets/fs-logo.png'

const FallbackOverlay = lazy(() => import('./components/FallbackOverlay'))

export const defaultLocaleMapping = {
  en: '',
  de: 'German',
  es: 'Spanish',
  fr: 'French',
  it: 'Italian',
  ja: 'Japan',
  ko: 'Korean',
  pt: 'Portuguese',
  ru: 'Russian',
  zh: 'Chinese',
  'zh-hans': 'Chinese',
}

// Docs on lightningjs: https://github.com/olark/lightningjs

// Usabilla needs to to be singly added on the page, so lets use a singleton
/* eslint-disable */
const hasWindow = typeof window !== 'undefined'
export const UsabillaWrapper = hasWindow ? (window.UsabillaWrapper = window.UsabillaWrapper || (() => {
  let instance = null;
  return class UsabillaWrapper {
    constructor () {
      if (instance) return instance;
      instance = this;

      try {
        window.lightningjs||(function(c){function g(b,d){d&&(d+=(/\?/.test(d)?"&":"?")+"lv=1");c[b]||function(){var i=window,h=document,j=b,g=h.location.protocol,l="load",k=0;(function(){function b(){a.P(l);a.w=1;c[j]("_load")}c[j]=function(){function m(){m.id=e;return c[j].apply(m,arguments)}var b,e=++k;b=this&&this!=i?this.id||0:0;(a.s=a.s||[]).push([e,b,arguments]);m.then=function(b,c,h){var d=a.fh[e]=a.fh[e]||[],j=a.eh[e]=a.eh[e]||[],f=a.ph[e]=a.ph[e]||[];b&&d.push(b);c&&j.push(c);h&&f.push(h);return m};return m};var a=c[j]._={};a.fh={};a.eh={};a.ph={};a.l=d?d.replace(/^\/\//,(g=="https:"?g:"http:")+"//"):d;a.p={0:+new Date};a.P=function(b){a.p[b]=new Date-a.p[0]};a.w&&b();i.addEventListener?i.addEventListener(l,b,!1):i.attachEvent("on"+l,b);var q=function(){function b(){return["<head></head><",c,' onload="var d=',n,";d.getElementsByTagName('head')[0].",d,"(d.",g,"('script')).",i,"='",a.l,"'\"></",c,">"].join("")}var c="body",e=h[c];if(!e)return setTimeout(q,100);a.P(1);var d="appendChild",g="createElement",i="src",k=h[g]("div"),l=k[d](h[g]("div")),f=h[g]("iframe"),n="document",p;k.style.display="none";e.insertBefore(k,e.firstChild).id=o+"-"+j;f.frameBorder="0";f.id=o+"-frame-"+j;/MSIE[ ]+6/.test(navigator.userAgent)&&(f[i]="javascript:false");f.allowTransparency="true";l[d](f);try{f.contentWindow[n].open()}catch(s){a.domain=h.domain,p="javascript:var d="+n+".open();d.domain='"+h.domain+"';",f[i]=p+"void(0);"}try{var r=f.contentWindow[n];r.write(b());r.close()}catch(t){f[i]=p+'d.write("'+b().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}a.P(2)};a.l&&setTimeout(q,0)})()}();c[b].lv="1";return c[b]}var o="lightningjs",k=window[o]=g(o);k.require=g;k.modules=c})({});

        //Hide the default feedback tab - usabilla_live('hide') is insufficient here because when calling setUrl rapidly, tabs can be missed.
        let css = '.usabilla_live_button_container { display: none; }'
        let style = document.createElement('style');

        document.head.appendChild(style);
        style.type = 'text/css';
        style.appendChild(document.createTextNode(css));
      } catch (err) {
        this._couldNotLoadLightningJS = true
      }
    }
    setUrl (url) {
      if (this.url === url) return

      if (window.lightningjs?.modules) {
        delete window.lightningjs.modules.usabilla_live
      }
      delete window.usabilla_live // needed to support the failedToConnect check
      if (url && window.lightningjs) {
        this.url = url
        window.usabilla_live = window.lightningjs.require("usabilla_live", url);
      }
    }
    exec (...args) {
      if (window.usabilla_live) {
        window.usabilla_live(...args)
      }
    }
    openForm (localeMap = defaultLocaleMapping ){
      this.exec('setForm', localeMap[i18n.language] || '')
      this.exec('click')
    }
    failedToConnect () {
      if (this._couldNotLoadLightningJS || !window.lightningjs || !window.usabilla_live) return true

      // I'm relying on some internal value of lightningjs to determine if the form has been loaded
      // This is not ideal, but I don't see a better way to do it because there is no callback
      // for when the form has been loaded or failed to load.
      return !(window.lightningjs?.provided)
    }
  };
})()) : class NoWindowUsabillaWrapper { exec () {} }
/* eslint-enable */

const buttonCss = css`
  display: flex;
  align-items: center;
  color: ${colors.transparent.gray70};
  border: none;
  padding: 0px 16px 0px 8px;
  cursor: pointer;
  font-size: 12px;
  line-height: 12px;
  font-weight: bold;
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
  background: ${colors.gray00} no-repeat;
  background-size: contain;
  &[side='bottom'] {
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 0px;
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
  }
`

const imageCss = css`
  margin-right: 4px;
  width: 32px;
  height: 32px;
`

const wrapperCss = css`
  position: fixed;
  z-index: 2;
  &[side='left'] {
    transform: rotate(-90deg);
    transform-origin: left top;
    bottom: 30%;
    left: 0;
    position: fixed;
    height: 36px;
  }
  &[side='right'] {
    transform: rotate(90deg);
    transform-origin: right top;
    bottom: 30%;
    right: 0;
    position: fixed;
    height: 36px;
  }
  &[side='bottom'] {
    bottom: 0;
    left: 50%;
    transform: translate(-50%);
    position: fixed;
  }
  &[side='top'] {
    top: 0;
    left: 50%;
    transform: translate(-50%);
    position: fixed;
    height: 36px;
  }
`

const roundedCorners = {
  borderRadius: 4,
}

const usabillaInstance = new UsabillaWrapper()

export function useUsabilla({ url, localeMap = defaultLocaleMapping, onClose }) {
  // we need to be reactive to when the URL changes
  useEffect(() => {
    url && usabillaInstance.setUrl(url)
  }, [url])

  // If a user has ad- or tracking-blocking enabled, it is entirely likely that the call to the Usabilla API will be blocked.
  const open = async () => {
    if (usabillaInstance.failedToConnect()) {
      return false
    }

    usabillaInstance.openForm(localeMap)

    // wait before checking again if the usabillaInstance was open
    await new Promise((r) => {
      setTimeout(r, 1000)
    })

    if (usabillaInstance.failedToConnect()) {
      return false
    }

    return true
  }

  const mutationListener = (record) => {
    const { removedNodes } = record
    if (removedNodes[0]?.classList?.[0]?.includes?.('usabilla')) {
      onClose?.()
    }
  }
  const bodyRef = useRef(document.body)
  useMutationObserver(bodyRef, mutationListener, onClose !== undefined)

  return { open }
}

export default function Usabilla({
  url,
  communityLink = 'https://community.familysearch.org/',
  hideOnMobile = false,
  mobileBreakpoint = 'lg',
  localeMap = defaultLocaleMapping,
  logo = treeImg,
  side = 'left',
  onClose,
  style = {},
}) {
  const [t] = useTranslation()
  const atWidth = useContainerWidth()
  const shouldHide = hideOnMobile && atWidth({ default: true, [mobileBreakpoint]: false })
  const fallbackOverlay = useOverlay()

  const { open } = useUsabilla({ url, localeMap, onClose })

  const onClick = async () => {
    // If we detect that the modal could not open, we will send to user to the community if the button is clicked, instead of showing a useless "try again later" message.
    if (!(await open())) {
      fallbackOverlay.open()
    }
  }

  return (
    !shouldHide && (
      <Suspense fallback={null}>
        {(fallbackOverlay.isOpen || fallbackOverlay.transitioning) && (
          <FallbackOverlay communityLink={communityLink} {...fallbackOverlay} />
        )}

        <div side={side} className={wrapperCss} style={style}>
          <Elevation z={2} style={roundedCorners}>
            <button side={side} className={buttonCss} type="button" onClick={onClick} data-testid="usabilla-btn">
              <img src={logo} aria-hidden alt="" className={imageCss} />
              {t('common-ui:feedback.label', 'Feedback')}
            </button>
          </Elevation>
        </div>
      </Suspense>
    )
  )
}

Usabilla.propTypes = {
  /** Get this from the Analytics team */
  url: PropTypes.string.isRequired,

  /** A specific fallback community link to offer, in case the user has tracking blocked */
  communityLink: PropTypes.string,

  /** Option to hide the button on mobile devices */
  hideOnMobile: PropTypes.bool,

  /** Breakpoint to hide the button on mobile devices (if hideOnMobile is true) */
  mobileBreakpoint: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', 'xxl']),

  /** Change the locale map if the languages for your button are different than those in the default locale map */
  localeMap: PropTypes.object,

  /** The url to the logo for the button. Defaults to FamilyTree */
  logo: PropTypes.string,

  /** Which side of the screen the component should be placed on */
  side: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),

  /** Accepts a callback that is fired when the form closes */
  onClose: PropTypes.func,

  /** Css to pass to style, to customize the exact position of the button. */
  style: PropTypes.object,
}
