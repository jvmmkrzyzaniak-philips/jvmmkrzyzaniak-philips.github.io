import { SocialChat } from '@fs/zion-icon'
import { Button, IconButton, ListItem, colors } from '@fs/zion-ui'
import { css } from '@linaria/core'
import PropTypes from 'prop-types'
import React from 'react'
import { useTranslation } from 'react-i18next'
import useChatOverlay from '../hooks/useChatOverlay'
import useHasUnreadChats from '../hooks/useHasUnreadChats'

// Inspired by the avatar presence CSS
const dotCss = css`
  --dot-pos: calc((var(--button-size) * 0.17) - (var(--dot-size) + 4px) / 2);
  height: var(--dot-size);
  width: var(--dot-size);
  background: ${colors.red70};
  position: absolute;
  border-radius: 500px;
  border: 2px solid ${colors.gray00};
  top: var(--dot-pos);
  inset-inline-end: var(--end-adjustment, var(--dot-pos));
  pointer-events: none;
`

const wrapperCss = css`
  position: relative;
  width: var(--button-size);
  height: var(--button-size);
  flex-shrink: 0;
`

const sizes = {
  xs: { buttonSize: 24, dotSize: 8 },
  sm: { buttonSize: 28, dotSize: 10 },
  md: { buttonSize: 40, dotSize: 12 },
  lg: { buttonSize: 64, dotSize: 16 },
  xl: { buttonSize: 88, dotSize: 22 },
}

const lowEmphasisEndAdjustment = {
  xs: 4,
  sm: 4,
  md: 12,
  lg: 16,
  xl: 20,
}

export default function ChatOverlayButton({
  chatRoute,
  buttonText,
  hideIcon = false,
  useIconButton = true,
  useListItem = false,
  hideDot = false,
  emphasis = 'low',
  size = 'md',
  forceBypassStartupDialogs = false,
  ...props
}) {
  const [t] = useTranslation()
  const chatOverlay = useChatOverlay(chatRoute, {}, forceBypassStartupDialogs)
  const { hasUnreadChats } = useHasUnreadChats(chatOverlay?.isOpen)
  const title = hasUnreadChats ? t('chat.button-unread.label', 'New chats available') : t('chat.action', 'Chat')
  const commonProps = {
    'data-selector': 'chatOverlayButton',
    title,
    onClick: chatOverlay.handleClick,
    emphasis,
    ...props,
  }

  if (useListItem)
    return (
      <ListItem
        startElement={hideIcon ? null : <ListItem.Icon Icon={SocialChat} />}
        primaryText={t('chat.action', 'Chat')}
        {...props}
        onClick={chatOverlay.handleClick}
      />
    )

  if (useIconButton)
    return (
      <div
        className={wrapperCss}
        style={{
          '--button-size': `${sizes[size].buttonSize}px`,
          '--dot-size': `${sizes[size].dotSize}px`,
          '--end-adjustment': emphasis === 'low' ? `${lowEmphasisEndAdjustment[size]}px` : undefined,
        }}
      >
        <IconButton Icon={SocialChat} size={size} {...commonProps} />
        {!hideDot && hasUnreadChats && <div className={dotCss} aria-hidden />}
      </div>
    )

  return (
    <Button Icon={hideIcon ? null : SocialChat} {...commonProps}>
      {buttonText || t('chat.action', 'Chat')}
    </Button>
  )
}

ChatOverlayButton.propTypes = {
  /** Initial route to load when opening the chat overlay. If not provided, the last-visited route will be restored. */
  chatRoute: PropTypes.string,

  /** Whether to use the icon button or the regular button style */
  useIconButton: PropTypes.bool,

  /** Whether to use the ListItem  */
  useLitItem: PropTypes.bool,

  /** If useIconButton is false, the buttonText will be shown in its place. Set to 'Chat' by default. */
  buttonText: PropTypes.string,

  /** If useIconButton is false, whether to show the icon next to the text */
  hideIcon: PropTypes.bool,

  /** If useIconButton is true, which size to use */
  size: PropTypes.string,

  /** If useIconButton is true, whether to hide the dot indicating unread chats */
  hideDot: PropTypes.bool,

  /** The (Icon)Button emphasis level */
  emphasis: PropTypes.string,

  /** If this is true, the help tutorial and global directory opt-in prompt will be skipped the first time the user loads Chat. Set to false be default. */
  forceBypassStartupDialogs: PropTypes.bool,
}
