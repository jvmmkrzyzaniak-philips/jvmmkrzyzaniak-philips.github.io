/**
 * Creates or gets a chat for e.g. a vendor, session, or ask-us-anything, then opens the chat window.
 */

import React, { useEffect, useState } from 'react'
import { SocialChat } from '@fs/zion-icon'
import { IconButton, Button } from '@fs/zion-ui'
import PropTypes from 'prop-types'
import { useTranslation } from 'react-i18next'
import useChatOverlay from '../hooks/useChatOverlay'
import { CHAT_ROUTE_KEY, buildChatRoute } from '../chat-memory-router/ChatMemoryRouter'
import { getUsersCanChat } from '../services/fsChat/fsChatService'

export default function ChatCreateButton({
  chatRoute,
  supportChatInformation,
  buttonText,
  hideIcon = false,
  useIconButton = true,
  emphasis = 'medium',
  forceBypassStartupDialogs = false,
  disableForRestrictedUsers = true,
  ...props
}) {
  const [t] = useTranslation()
  const title = props['aria-label'] || t('chat.action', 'Chat')
  const { handleClick } = useChatOverlay(chatRoute, supportChatInformation, forceBypassStartupDialogs)
  const [usersCanChat, setUsersCanChat] = useState(false)

  useEffect(() => {
    const fetchUsersCanChat = async () => {
      if (disableForRestrictedUsers) {
        const result = await getUsersCanChat({ chatRoute, supportChatInformation })
        setUsersCanChat(result)
      } else {
        setUsersCanChat(true)
      }
    }
    fetchUsersCanChat()
  }, [disableForRestrictedUsers, chatRoute, supportChatInformation])

  return useIconButton ? (
    <IconButton
      Icon={SocialChat}
      onClick={handleClick}
      title={title}
      data-testid="chat-create-button"
      emphasis={emphasis}
      disabled={!usersCanChat}
      disabledDescription={t('chat.create-button-disabled.label', 'Unable to Message This User')}
      {...props}
    />
  ) : (
    <Button
      Icon={hideIcon ? null : SocialChat}
      onClick={handleClick}
      title={title}
      data-testid="chat-create-button"
      emphasis={emphasis}
      {...props}
      disabled={!usersCanChat}
      disabledDescription={t('chat.create-button-disabled.label', 'Unable to Message This User')}
    >
      {buttonText || t('chat.action', 'Chat')}
    </Button>
  )
}

ChatCreateButton.propTypes = {
  /** Route specifying the channel type of the FamilySearch chat to create
   * https://icseng.atlassian.net/wiki/spaces/Product/pages/133628012/FS-Chat+Channel+Types */
  chatRoute: PropTypes.oneOf([
    buildChatRoute(CHAT_ROUTE_KEY.CREATE_VENDOR_CHAT),
    buildChatRoute(CHAT_ROUTE_KEY.CREATE_SUPPORT_CHAT),
    buildChatRoute(CHAT_ROUTE_KEY.CREATE_SESSION_CHAT),
    buildChatRoute(CHAT_ROUTE_KEY.CREATE_DIRECT_CHAT),
  ]).isRequired,

  /** The support information is used to create a new chat and varies according to the channel type specified.
   *  Below is a description of the supportChatInformation schema for each channel type.
   *
   *  - FS_DIRECT:<br>
   *    {<br>
   *      <strong>to</strong>: ['The list of chat participant cisIds excluding the user's own cisId'],<br>
   *      <strong>about</strong>: { text: 'About link title', link: 'About link URL' }<br>
   *      <strong>messageText</strong>: 'The pre-loaded text of the message in the chat input field'<br>
   *    }
   *
   *  - FS_VENDOR:<br>
   *    {<br>
   *      <strong>name</strong>: 'The vendorâ€™s display name to be included as part of the channel name',<br>
   *      <strong>description</strong>: 'optional chat description displayed in the chat details',<br>
   *      <strong>imageUrl</strong>: 'The vendor's image',<br>
   *      <strong>externalId</strong>: 'A unique identifier to associate a channel to an external entity. Only 1 chat channel may be associated with each id.',<br>
   *      <strong>eventLabel</strong>: 'A label to identify the event associated with the chat. For example, rootstech_2025',<br>
   *    }
   *
   *  - FS_SUPPORT: (No required fields)
   *
   *  - FS_SESSION:<br>
   *    {<br>
   *      <strong>name</strong>: 'The RootsTech session display name to be included as part of the chat display name',<br>
   *      <strong>description</strong>: 'optional chat description displayed in the chat details'<br>
   *      <strong>externalId</strong>: 'A unique identifier to associate a channel to an external entity. Only 1 chat channel may be associated with each id.',<br>
   *      <strong>eventLabel</strong>: 'A label to identify the event associated with the chat. For example, rootstech_2025',<br>
   *    }
   *    */

  supportChatInformation: PropTypes.shape({
    to: PropTypes.arrayOf(PropTypes.string),
    name: PropTypes.string /* name of the channel (not required for direct channels) */,
    description: PropTypes.string,
    imageUrl: PropTypes.string,
    about: PropTypes.shape({ text: PropTypes.string, link: PropTypes.string }),
    externalId: PropTypes.string,
    eventLabel: PropTypes.string,
  }),

  /** Whether to use the icon button or the regular button style */
  useIconButton: PropTypes.bool,

  /** If useIconButton is false, the buttonText will be shown in its place. Set to 'Chat' by default. */
  buttonText: PropTypes.string,

  /** If useIconButton is false, whether to show the icon next to the text */
  hideIcon: PropTypes.bool,

  /** The (Icon)Button emphasis level */
  emphasis: PropTypes.string,

  /** If this is true, the help tutorial and global directory opt-in prompt will be skipped the first time the user loads Chat. Set to false be default. */
  forceBypassStartupDialogs: PropTypes.bool,

  /** The ChatCreateButton will be disabled for direct chats with users under 18, Russian users, and a few other cases. 
   Don't turn this off unless you are planning to implement the logic to disable this button in a more optimized way directly in your app
   (for example, if you are using the ChatCreateButton in a list and don't want a separate network request every time it is rendered). */
  disableForRestrictedUsers: PropTypes.bool,
}
