import zionDebug from '@fs/zion-debug'
import { splunk } from '@fs/zion-splunk-logger'
import { chatVersion } from './chatConfig'

/**
 * Turn on debugging in your browser console with: localStorage.debug = 'fs:zion:chat:log'
 * Also make sure that verbose logging is enabled in your browser debugger console.
 */
const debug = zionDebug('zion:chat:log')

export const LOG_LEVEL = {
  LOG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
}

export default function chatLog(
  {
    msg,
    component = '',
    logLevels = { log: false, info: false, warn: true, error: true, logMyUser: false },
    user = { id: 'unknown' },
    level = LOG_LEVEL.INFO,
  } = {},
  extraParams = {}
) {
  debug(`${component} ${msg}`)
  const splunkParams = { component: `[CHAT]${component}`, version: chatVersion, msg, user, ...extraParams }
  const { log, info, warn, error, logMyUser } = logLevels
  const shouldLogToSplunk =
    logMyUser ||
    (level === LOG_LEVEL.ERROR && error) ||
    (level === LOG_LEVEL.LOG && log) ||
    (level === LOG_LEVEL.INFO && info) ||
    (level === LOG_LEVEL.WARN && warn)

  if (shouldLogToSplunk) {
    switch (level) {
      case LOG_LEVEL.LOG:
      case LOG_LEVEL.INFO: {
        splunk.log(splunkParams)
        break
      }
      case LOG_LEVEL.WARN: {
        splunk.warn(splunkParams)
        break
      }
      case LOG_LEVEL.ERROR: {
        const obj = {}
        // captureStackTrace is a non-standard V8 function in Chromium-based browsers
        Error?.captureStackTrace?.(obj, chatLog)
        splunkParams.stack = obj.stack
        splunk.error(splunkParams)
        break
      }
      default: {
        splunk.log(`[CHAT] ${msg}`)
        break
      }
    }
  }
}
