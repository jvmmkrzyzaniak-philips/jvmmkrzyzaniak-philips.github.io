import axios from '@fs/zion-axios'
import { getPreference } from '@fs/zion-preferences'
import chatLog, { LOG_LEVEL } from '../global/chatLog'

export const profileInterrupterPrefKey = 'user.profile.interrupter'

// Determine whether to skip showing the profile opt-in interrupter to the current user
export async function getShouldBypassInterrupter() {
  try {
    const searchableStatus = await getSearchableStatus()
    const isListed = isListedInTheDirectory(searchableStatus)
    // No need to fetch preference if already opted in
    if (isListed) return true
    const chatProfileInterrupterPreference = await getPreference(profileInterrupterPrefKey)
    const hasAlreadySetPreference = hasUpdatedOptInPreference(chatProfileInterrupterPreference)
    const hasDeferred = hasDeferredOptingIntoSearch(chatProfileInterrupterPreference)
    const deferralTimeHasNotYetExpired = !hasDeferred24Hours(chatProfileInterrupterPreference)

    return hasAlreadySetPreference || (hasDeferred && deferralTimeHasNotYetExpired)
  } catch {
    chatLog({ msg: 'Unable to determine whether or not to show the chatProfileInterrupter.', level: LOG_LEVEL.ERROR })
    return true
  }
}

export async function fetchCurrentUsersProfile() {
  const axiosConfig = { headers: { Accept: 'application/familysearch-user-profile+v1.1+json' } }
  const { data } = await axios.get(`/service/user/profile/users/CURRENT`, axiosConfig)
  return data
}

async function getSearchableStatus() {
  return fetchCurrentUsersProfile().then((userProfile) => userProfile?.searchable?.status)
}

function isListedInTheDirectory(searchableStatus) {
  return searchableStatus === 'LISTED'
}

function hasUpdatedOptInPreference(chatProfileInterrupterPreference) {
  return chatProfileInterrupterPreference?.interaction === 'UPDATED'
}

function hasDeferredOptingIntoSearch(chatProfileInterrupterPreference) {
  return chatProfileInterrupterPreference?.interaction === 'LATER'
}

function hasDeferred24Hours(chatProfileInterrupterPreference) {
  const hasDeferredOptingIn = hasDeferredOptingIntoSearch(chatProfileInterrupterPreference)
  const timeSinceLastInteraction = chatProfileInterrupterPreference?.time
  return hasDeferredOptingIn && hasBeen24Hours(timeSinceLastInteraction)
}

function hasBeen24Hours(time) {
  const time24HoursInMilliseconds = 24 /* hours */ * 60 /* minutes */ * 60 /* seconds */ * 1000 /* milliseconds */
  const timePassed = Date.now() - time
  return timePassed > time24HoursInMilliseconds
}
