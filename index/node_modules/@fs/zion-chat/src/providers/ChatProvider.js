import React, { Suspense, lazy, useEffect, useRef, useState } from 'react'
import { useOverlay } from '@fs/zion-ui'
import { trackEvent } from '@fs/zion-analytics'
import { ChatContext } from './useChatProviderContext'

const ChatOverlay = lazy(() => import('../chat-overlay/ChatOverlay'))
const ChatProfileInterrupter = lazy(() => import('../profile-interrupter/ChatProfileInterrupter'))

export function useChatProviderData(mockChatProviderData) {
  const overlay = useOverlay()
  const [chatRoute, setChatRoute] = useState()
  const [supportInformation, setSupportInformation] = useState()
  const [forceBypassStartupDialogs, setForceBypassStartupDialogs] = useState(false)
  const chatProfileInterrupterOverlay = useOverlay()
  const clientConsumerCountRef = useRef(0)

  if (mockChatProviderData) {
    return mockChatProviderData
  }

  return {
    overlay,
    chatRoute,
    setChatRoute,
    supportInformation,
    setSupportInformation,
    chatProfileInterrupterOverlay,
    clientConsumerCountRef,
    forceBypassStartupDialogs,
    setForceBypassStartupDialogs,
  }
}

export default function ChatProvider({ children, mockChatProviderData }) {
  const chatProviderData = useChatProviderData(mockChatProviderData)
  const { overlay, supportInformation, chatProfileInterrupterOverlay, setChatRoute } = chatProviderData

  // Open chat when interrupter starts to close (interrupter is conditionally rendered, so its onClose wonâ€™t fire)
  const wasOpenedRef = useRef(false)
  const interrupterOpen = chatProfileInterrupterOverlay.isOpen
  const openChat = overlay.open
  useEffect(() => {
    if (interrupterOpen) {
      wasOpenedRef.current = true
    } else if (wasOpenedRef.current) {
      openChat()
    }
  }, [interrupterOpen, openChat])

  useEffect(() => {
    const handleUrlParams = () => {
      if (typeof window === 'undefined') return
      const searchParams = new URLSearchParams(window.location.search)
      if (!searchParams.has('chatRoute')) return
      const chatRouteParam = searchParams.get('chatRoute')
      setChatRoute(chatRouteParam)
      trackEvent({
        event_name: 'chat_route_from_url',
        link_name: 'Chat:Open from URL',
        chatRoute: chatRouteParam,
        url: window.location.href,
      })
      openChat()
    }
    handleUrlParams()
  }, [openChat, setChatRoute])

  return (
    <ChatContext.Provider value={chatProviderData}>
      {children}
      <Suspense fallback={null}>
        {(chatProfileInterrupterOverlay.isOpen || chatProfileInterrupterOverlay.transitioning) && (
          <ChatProfileInterrupter overlay={chatProfileInterrupterOverlay} />
        )}
        {(overlay.isOpen || overlay.transitioning) && (
          <ChatOverlay supportInformation={supportInformation} overlay={overlay} />
        )}
      </Suspense>
    </ChatContext.Provider>
  )
}
