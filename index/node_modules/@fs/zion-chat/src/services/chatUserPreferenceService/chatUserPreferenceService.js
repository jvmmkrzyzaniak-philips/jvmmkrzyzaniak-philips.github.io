import { getPreference, setPreference } from '@fs/zion-preferences'

export const CHAT_PREF = {
  EXPANDABLE: 'chat.expandable',
  SHOW_EVENT_CHATS: 'chat.show-event.chats',
  DARK_MODE: 'chat.dark-mode',
  SOUND_ENABLED: 'chat.sound-enabled',
  ENTER_SENDS_MESSAGE: 'chat.enter-sends-message',
}

/**
 * Gets the value for a given CHAT_PREF
 * @param {string} chatPrefKey must be from CHAT_PREF enum
 * @param {*} defaultValue value returned if the preference didnâ€™t exist or failed to load
 * @returns parsed JSON value of preference
 */
export async function getChatPreference(chatPrefKey, defaultValue) {
  assertValidChatPrefKey(chatPrefKey)
  try {
    const response = await getPreference(chatPrefKey)
    return JSON.parse(response)
  } catch (error) {
    return defaultValue
  }
}

/**
 * Sets a new value for a given CHAT_PREF
 * @param {string} chatPrefKey must be from CHAT_PREF enum
 * @param {*} value JSON value to be stored
 * @returns value passed in
 */
export async function setChatPreference(chatPrefKey, value) {
  assertValidChatPrefKey(chatPrefKey)
  return setPreference(chatPrefKey, JSON.stringify(value))
}

function assertValidChatPrefKey(chatPrefKey) {
  if (!Object.values(CHAT_PREF).includes(chatPrefKey)) {
    throw new Error(`Invalid chat preference key ${chatPrefKey}`)
  }
}
