import CacheService from '@fs/zion-cache-service'
import { i18n } from '@fs/zion-locale'
import { ListItem } from '@fs/zion-ui'
import { getSessionId } from '@fs/zion-session'
import React from 'react'
import debounce from 'lodash.debounce'
import { upperCaseCisId } from '../../helpers/stream/streamChatHelper'
import { sgEnvUrl } from '../../global/chatConfig'

const TEN_MINUTES = 10 * 60 * 1000
const cacheService = new CacheService({
  cache: { storeName: 'ChatUserProfiles', encrypted: true, lifetime: TEN_MINUTES },
})
const preCacheHook = (data) => {
  data.version = data.version || 0
  return data
}
const axiosConfig = {
  headers: {
    Accept: 'application/familysearch-user-profile+v1.1+json',
  },
}

export const getUserProfile = (cisId = 'CURRENT') => {
  return cacheService.get(`/service/user/profile/directory/users/${upperCaseCisId(cisId)}`, cisId, {
    preCacheHook,
    axiosConfig,
  })
}

const getUserProfileWithPresense = ({ cisId, isOnline }) => {
  return getUserProfile(cisId).then((res) => {
    res.isOnline = isOnline
    return res
  })
}

const formatUserProfileSuggestion = (person) => {
  let primaryText = person.name?.value
  if (person.contactId?.value !== person.name?.value) {
    primaryText += ` (@${person.contactId?.value})`
  }

  return {
    primaryText,
    displayName: primaryText,
    secondaryText: i18n.t('chat.recent-chats.label', 'Recent Chats'),
    group: i18n.t('chat.recent-chats.label', 'Recent Chats'),
    startElement: (
      <ListItem.Avatar
        monogram={`${person.name.value ? person.name.value[0] : person.contactId.value[0]}`}
        src={`${sgEnvUrl}/service/msg-artifact/user-portrait/${person.cisId}/thumb64?sessionId=${getSessionId()}`}
        presence={person.isOnline ? 'online' : null}
      />
    ),
    key: person.cisId,
    cisId: person.cisId,
    contactId: person.contactId?.value,
  }
}

export function getUserProfileSuggestions({ profilePeople }) {
  const promises = profilePeople.map((profilePerson) => getUserProfileWithPresense(profilePerson))
  return Promise.allSettled(promises).then((res) => {
    return res
      .filter((profile) => profile.status === 'fulfilled')
      .map((profile) => {
        return formatUserProfileSuggestion(profile.value)
      })
  })
}

const MAX_WAIT_TIME = 500
const config = { leading: true, maxWait: MAX_WAIT_TIME, trailing: true }
export const debouncedGetUserProfileSuggestions = debounce(getUserProfileSuggestions, MAX_WAIT_TIME, config)
/**
 * Get the publicly visible profile name for the person.
 * Will use the contactId as a backup and "Unknown Name" as a last resort.
 * @param {userProfile} userProfile the profile from useUserProfile()
 * @returns the name to show
 */
export function getNameFromUserProfile(userProfile) {
  return (
    userProfile?.name?.value || userProfile?.contactId?.value || i18n.t('chat.unknown-name.label', 'Unknown Name') || ''
  )
}

export const maxRecentContactsInProfileSearch = 50

export function removeIllegalProfileNameCharacters(str = '') {
  return str.replace(/[,<>;*%(){}=:!?~#$|^`/&"[\]]/gi, '').trim()
}
