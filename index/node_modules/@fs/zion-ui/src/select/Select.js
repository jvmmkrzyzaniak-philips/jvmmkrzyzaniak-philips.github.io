import React, { forwardRef, useState } from 'react'
import { css, cx } from '@linaria/core'
import PropTypes from 'prop-types'
import { ArrowCaret } from '@fs/zion-icon'
import { useRandomId, boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'
import InputBase from '../input-base'
import { colors, fonts } from '../theme'
import { textBcss } from '../typography/typographyStyles'
import { useInputGroupContext } from '../input-group/InputGroupProvider'

const selectCss = css`
  appearance: none;
  background: ${colors.gray00};
  color: ${colors.gray100};
  border-radius: 4px;
  border: 0;
  font-family: ${fonts.body};
  padding-top: 0;
  padding-inline-end: 32px;
  padding-bottom: 1px;
  padding-inline-start: 8px;
  height: 36px;
  letter-spacing: 0.005em;
  width: 100%;
  cursor: pointer;

  &:focus {
    color: ${colors.gray100};
    outline: none;
  }

  &[unchosen] {
    color: ${colors.transparent.gray70};
  }

  &[disabled] {
    background: ${colors.gray05};
    cursor: not-allowed;
  }
`

const arrowCss = css`
  pointer-events: none;
  position: absolute;
  inset-inline-end: 8px;
  display: flex;
  align-items: center;
`

const RenderOptions = ({ options }) => {
  return !options
    ? null
    : options.map(({ label, options: optGroupChildren, value, ...props }) => {
        if (!label) return null

        if (optGroupChildren) {
          return (
            <optgroup label={label} {...props} key={`optgroup_${label}`}>
              <RenderOptions options={optGroupChildren} />
            </optgroup>
          )
        }

        if (value) {
          return (
            <option {...props} key={`opt_${value}_${label}`} value={value}>
              {label}
            </option>
          )
        }

        return null
      })
}

const Select = forwardRef(function Select(
  {
    id,
    placeholder,
    hidePlaceholder = false,
    helpMessage,
    validMessage,
    errorMessage,
    warningValidate,
    disabled = false,
    autoWidth = false,
    label,
    largerLabel = false,
    allowLabelWrapping = false,
    options,
    value,
    validateAtGroupLevel,
    onChange,
    name,

    /** ARIA */
    'aria-label': providedAriaLabel,
    'aria-describedby': ariaDescribedBy,
    'aria-labelledby': ariaLabelledBy,

    /** BLACKLIST PROPS */
    style: customStyle,
    css: customCss,

    /** [HIDDEN]: For internal Zion-UI use only */
    isInForm, // used by @fs/zion-form

    selectProps,
    ...props
  },
  ref
) {
  const inputId = useRandomId(id)
  const [defaultAriaDescribedBy, setDefaultAriaDescribedBy] = useState()

  const inputBaseProps = {
    ...sanitizeProps(props),
    id: inputId,
    label,
    largerLabel,
    allowLabelWrapping,
    validateAtGroupLevel,
    helpMessage,
    validMessage,
    errorMessage,
    warningValidate,
    disabled,
    value,
    autoWidth,
    setDefaultAriaDescribedBy,
  }

  const isInInputGroup = useInputGroupContext()
  // for convenience, we allow the placeholder to become the field label IFF it is inside an InputGroup
  const ariaLabel = providedAriaLabel ?? (isInInputGroup ? placeholder : undefined)

  return (
    <InputBase {...inputBaseProps}>
      <select
        {...sanitizeProps(selectProps)}
        className={cx(selectCss, textBcss)}
        id={inputId}
        name={name}
        unchosen={boolAttr(placeholder && !value)}
        value={isInForm ? undefined : value || ''}
        onChange={onChange || (() => {})} // no-op to prevent errors from having a value, but no onChange (React throws an error)
        disabled={disabled}
        aria-describedby={ariaDescribedBy || defaultAriaDescribedBy}
        aria-label={ariaLabel}
        aria-labelledby={ariaLabelledBy}
        ref={ref}
      >
        {!hidePlaceholder && <option value="">{placeholder}</option>}
        <RenderOptions options={options} />
      </select>
      <span className={arrowCss} aria-hidden>
        <ArrowCaret size="xs" direction="down" color={disabled ? colors.transparent.gray40 : undefined} />
      </span>
    </InputBase>
  )
})

export const meta = {
  name: 'Select',
  isZionFormComponent: true,
}

Select.meta = meta

export default Select

Select.propTypes = {
  /** Sets the width to fit content instead of 100% */
  autoWidth: PropTypes.bool,

  /** Disables the input. */
  disabled: PropTypes.bool,

  /** Identifier for the input. */
  name: PropTypes.string,

  /** Increases label size when set to true */
  largerLabel: PropTypes.bool,

  /** Allows label to wrap when set to true */
  allowLabelWrapping: PropTypes.bool,

  /**  [REQUIRED OUTSIDE OF ZIONFORM] - Handler run every time the value of the input changes. */
  onChange: PropTypes.func,

  /** An array of options or optgroups for the input */
  options: PropTypes.arrayOf(
    PropTypes.shape({
      value: PropTypes.string,
      label: PropTypes.string,
      disabled: PropTypes.bool,
      options: PropTypes.arrayOf(
        PropTypes.shape({
          label: PropTypes.string,
          value: PropTypes.string,
          disabled: PropTypes.bool,
        })
      ),
    })
  ),

  /** Placeholder text to display to the user. Represents the fact that the user has not chosen an option. */
  placeholder: PropTypes.string,

  /** Sometimes you want the option of letting the user not be allowed to leave the option blank. Setting this prop will completely remove the placeholder option.
   **NOTE:** Not providing a placeholder prop is not the same thing.  Not providing the placeholder prop renders a blank placeholder. */
  hidePlaceholder: PropTypes.bool,

  /**  [REQUIRED OUTSIDE OF ZIONFORM] - The input value */
  value: PropTypes.string,

  /** The props to be passed down to the HTML `select` element */
  selectProps: PropTypes.objectOf(PropTypes.string),

  /** The props to be passed down to the InputBase */
  '{...props}': PropTypes.object,
}
