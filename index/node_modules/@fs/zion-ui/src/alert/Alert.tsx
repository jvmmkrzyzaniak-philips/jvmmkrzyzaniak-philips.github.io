import React, { useState } from 'react'
import type { ReactNode } from 'react'
import { css, cx } from '@linaria/core'
import { ContentCheck, NoticeImportant, NoticeWarning, HelpTip, MenuClose } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'
import PropTypes from 'prop-types'
import type { InferProps } from 'prop-types'
import { boolAttr } from '@fs/zion-frontend-friends'
import { colors, Paragraph, Row, IconButton, MarginBox } from '..'
import { elevationBaseCss, e1 } from '../elevation'
import colorThemes from '../theme/themeSubsets'
import FeedbackText from '../feedback-text/FeedbackText'

const containerCss = css`
  --icon-inline-text: 0;
  position: relative;
  border-radius: 8px;
  padding-inline-start: 8px;
  overflow: hidden;
  flex-shrink: 0; // Necessary to prevent Alerts from being squished in some layouts
  background: ${colors.gray00};

  &[data-dense] {
    border-radius: 4px;
    padding-inline-start: 6px;
  }

  &[data-outlined] {
    border: 1px solid ${colors.transparent.gray10};

    [high-contrast] & {
      border-color: ${colors.gray60};
    }
  }

  &::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    inset-inline-start: 0;
    width: 8px;
    background: ${colors.color50};

    [data-dense]& {
      width: 6px;
    }
  }
`

const colorThemeMap = {
  success: colorThemes.green,
  error: colorThemes.danger,
  warning: colorThemes.yellow,
  help: colorThemes.blue,
}

const iconMap = {
  success: ContentCheck,
  error: NoticeImportant,
  warning: NoticeWarning,
  help: HelpTip,
}

type AlertProps = InferProps<Omit<typeof propTypes, 'children'>> & { children: ReactNode }

export default function Alert({
  type = 'help',
  children,
  dismissable = false,
  outlined,
  onDismiss,
  dense = false,
}: AlertProps): JSX.Element | null {
  const [t] = useTranslation()
  const [dismissed, setDismissed] = useState(false)
  const Icon = iconMap[type]

  function handleDismiss(): void {
    setDismissed(true)
    onDismiss?.()
  }

  let className = cx(containerCss, colorThemeMap[type])

  if (!outlined) {
    className = cx(className, elevationBaseCss, e1)
  }

  return dismissed ? null : (
    <div role="status" className={className} data-outlined={boolAttr(outlined)} data-dense={boolAttr(dense)}>
      <Row as={MarginBox} marginY={dense ? 'xxs' : 'xs'} marginX={dense ? 'xxs' : 'xs'} gutters={dense ? 'xxs' : 'xs'}>
        <Icon role="presentation" noShrinkX color={colors.color50} size={dense ? 'xs' : 'sm'} />

        <FeedbackText growX type={type}>
          <Paragraph data-full-width as="div" size={dense ? 'xs' : 'sm'}>
            {children}
          </Paragraph>
        </FeedbackText>

        {dismissable && (
          <IconButton
            noShrinkX
            dense
            Icon={MenuClose}
            size={dense ? 'sm' : 'md'}
            onClick={handleDismiss}
            title={t('common-ui:close.action')}
          />
        )}
      </Row>
    </div>
  )
}

const propTypes = {
  children: PropTypes.node.isRequired,

  /** The type of alert. */
  type: PropTypes.oneOf(['success', 'error', 'warning', 'help'] as const),

  /** If true, and "X" icon button will be displayed on the right side. Clicking it will dismiss the alert. */
  dismissable: PropTypes.bool,

  /** Callback that runs when the alert is dismissed. */
  onDismiss: PropTypes.func,

  /** If true, the Alert will be outlined instead of elevated. */
  outlined: PropTypes.bool,

  /** if you want something a little tighter, use this. */
  dense: PropTypes.bool,
}
