import React, { useEffect, forwardRef, useCallback, useState } from 'react'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { boolAttr, ObserverRootContext, useResizeObserver, useForwardRef } from '@fs/zion-frontend-friends'

/**
 * DEPRECATED!
 * This component will be removed in a future release.
 * See BorderScroller for the new implementation.
 */

const shadowCss = css`
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  bottom: 0;
  inset-inline-start: 0;
  pointer-events: none;
  &::before,
  &::after {
    content: '';
    position: absolute;
    z-index: 2; /* needed so that if there is a table in the dialog the shadow will be above the table header */
    height: 11px;
    width: 100%;
    box-shadow: inset 0px 11px 10px -10px rgba(0, 0, 0, 0.2);
    top: 0;
    opacity: 0;
    transition: opacity 0.3s;
  }
  &::after {
    top: unset;
    bottom: 0;
    box-shadow: inset 0px -11px 10px -10px rgba(0, 0, 0, 0.2);
  }
  &[scroll-top]::before {
    opacity: 1;
  }
  &[scroll-bottom]::after {
    opacity: 1;
  }
`
const containerCss = css`
  display: flex;
  flex-grow: 1;
  flex-shrink: 1;
  flex-direction: column;
  position: relative;
  overflow: hidden;
`

const contentCss = css`
  display: flex;
  flex-direction: column;
  flex: 1;
  -ms-overflow-style: -ms-autohiding-scrollbar; /* Makes the scrollbar auto-hide/show on edge */
  /* better mobile scrolling */
  overflow-scrolling: touch;
  -webkit-overflow-scrolling: touch;
  overflow-y: auto;
  overflow-x: hidden;
  min-height: 0;
`

export const ShadowScroller = ({ children, className, hideShadows, ...props }, ref) => {
  const [scrolledToTop, setScrolledToTop] = useState(true)
  const [scrolledToBottom, setScrolledToBottom] = useState(false)

  const scrollerRef = useForwardRef(ref)

  const handleScroll = useCallback(() => {
    const scrollerEl = scrollerRef.current
    if (scrollerEl) {
      const scrollableAmount = scrollerEl.scrollHeight - scrollerEl.offsetHeight
      setScrolledToTop(scrollerEl.scrollTop === 0)
      // use - 1 here for a little bit of wiggle room
      setScrolledToBottom(scrollerEl.scrollTop >= scrollableAmount - 1)
    }
  }, [scrollerRef])

  useResizeObserver(scrollerRef, handleScroll)

  // In some situations, hideShadows changes but the children size does not, so the resize observer doesn't fire.
  // This will update the shadows in that case.
  useEffect(() => {
    handleScroll()
  }, [handleScroll, hideShadows])

  return (
    <div className={containerCss}>
      <div
        ref={scrollerRef}
        {...props}
        className={cx(contentCss, className)}
        data-scrollable=""
        onScroll={handleScroll}
      >
        <ObserverRootContext.Provider value={scrollerRef}>{children}</ObserverRootContext.Provider>
      </div>
      <div
        className={shadowCss}
        scroll-top={boolAttr(!hideShadows && !scrolledToTop)}
        scroll-bottom={boolAttr(!hideShadows && !scrolledToBottom)}
      />
    </div>
  )
}

export default forwardRef(ShadowScroller)

ShadowScroller.propTypes = {
  /** The content of the scrollable container. */
  children: PropTypes.node,

  /** If true, shadows on bottom and top will not show. */
  hideShadows: PropTypes.bool,
}
