import React, { useEffect, useRef, useState } from 'react'
import { useSpring, animated } from '@react-spring/web'
import { css } from '@linaria/core'
import useHeightObserver from '../use-height-observer'

const heightContainerCss = css`
  position: relative;
  overflow: hidden;
  flex-shrink: 0;
`

const heightElCss = css`
  position: absolute;
  top: 0;
  inset-inline-start: 0;
  width: 100%;
`

type Props = {
  children?: React.ReactNode
}

/**
 * Animates a component from it's height to 0 when its children are removed.
 * Works by creating a copy of the children and then animating the height of the
 * container down to 0.
 */
export default function SquishMeTransition({ children }: Props): JSX.Element {
  const [initialized, setInitialized] = useState(false)
  const heightElRef = useRef<HTMLDivElement>(null)
  const childrenCopyRef = useRef<React.ReactNode>(children)

  const height = useHeightObserver(heightElRef)

  const styles = useSpring({
    height: children ? height : 0,
    immediate: !initialized,
    // This animation needs to be delayed so cases where useEffects are updating the footer and BroadcastingSwitch is
    // clearing the footer don't make it do a little woogie boogie dance.
    delay: () => (children ? 0 : 150),
    config: {
      frequency: children ? 0.3 : 0.05,
      damping: children ? 1 : 5,
      clamp: true,
    },
  })

  useEffect(() => {
    if (children) childrenCopyRef.current = children
  }, [children])

  useEffect(() => {
    // Must be delayed an event loop, otherwise it doesn't work
    const timeout = setTimeout(() => {
      setInitialized(true)
    }, 0)
    return () => clearTimeout(timeout)
  }, [])

  return (
    <animated.div style={styles} className={heightContainerCss}>
      <div ref={heightElRef} className={heightElCss}>
        {/* We render children if available so changes to props will reflect here (changes to props don't trigger the useEffect above) */}
        {children || (styles.height && styles.height.get() !== 0 && childrenCopyRef.current)}
      </div>
    </animated.div>
  )
}
