import { useMemo, useState } from 'react'
import { useContainerWidth } from '../responsive'
import { generateAssociationList } from './ResponsiveTable'

// Hook to manage ResponsiveTable state. This allows wrappers (such as SortableResponsiveTable) as well as ResponsiveTableBase to access these computations
export default function useResponsiveTable({
  atSizeColumns,
  rowLevelHeaders = false,
  totalColumnCount,
  getPropsForCheckbox,
  checkedItems,
  separator,
}) {
  const atWidth = useContainerWidth()
  const currentColumns = atWidth(atSizeColumns)
  const { labels, combinationRules, columnWidths = [], columnCount } = currentColumns

  // we memoize the associationList to avoid an expensive computation every time the table re-renders
  const associationList = useMemo(
    () => combinationRules && generateAssociationList(combinationRules),
    [combinationRules]
  )

  // I need the maxDisplayColumns API to work with 3 valid options:
  //   1. column labels usage
  //   2. with rowLevelHeaders and column labels
  //   3. with rowLevelHeaders and no column labels (requires a column count)
  // this next line is for you Matt:
  const maxDisplayColumns = !rowLevelHeaders ? labels.length : (labels?.length ?? columnCount)

  const totalSpecifiedWidth = columnWidths.filter((x) => typeof x === 'number').reduce((a, b) => a + b, 0)
  if (columnWidths.length > 0 && totalSpecifiedWidth !== 12) {
    throw new Error(
      `ResponsiveTable::atSizeColumns::columnWidths[] must add up to 12. Got ${columnWidths} which adds up to ${totalSpecifiedWidth}.`
    )
  }

  const [hasExpandableContent, setHasExpandableContent] = useState(false)

  return useMemo(
    () => ({
      currentColumns,
      totalColumnCount: Math.min(totalColumnCount, 12),
      maxDisplayColumns,
      associationList,
      getPropsForCheckbox,
      checkedItems,
      separator,
      combinationRules,
      rowLevelHeaders,
      setHasExpandableContent,
      hasExpandableContent,
    }),
    [
      currentColumns,
      associationList,
      checkedItems,
      combinationRules,
      getPropsForCheckbox,
      maxDisplayColumns,
      rowLevelHeaders,
      separator,
      totalColumnCount,
      hasExpandableContent,
    ]
  )
}
