import React, { createContext, useContext, useMemo, useState } from 'react'

export const FocusManagerContext = createContext(null)
export const useFocusManagerContext = () => {
  const { state, setState } = useContext(FocusManagerContext)
  const removeFromStack = (itemToRemove) => {
    const stack = state?.stack
    if (!stack) return
    if (!stack.includes(itemToRemove)) return
    const updatedStack = stack.filter((item) => item !== itemToRemove)
    setState({ stack: updatedStack })
  }
  const addToStack = (itemToAdd) => {
    const stack = state?.stack
    if (!stack) return
    if (stack.includes(itemToAdd)) return
    stack.push(itemToAdd)
    setState({ stack })
  }
  return { state, removeFromStack, addToStack }
}

export default function FocusManagerProvider({ children }) {
  const [state, setState] = useState({ stack: [] })
  const value = useMemo(() => ({ state, setState }), [state])
  return <FocusManagerContext.Provider value={value}>{children}</FocusManagerContext.Provider>
}
