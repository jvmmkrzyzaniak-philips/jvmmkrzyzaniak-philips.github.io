import type { ReactNode, SyntheticEvent } from 'react'
import React from 'react'
import { css } from '@linaria/core'
import { ControlZoomIn, ControlZoomOut, ControlTarget } from '@fs/zion-icon'
import { boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import { useContainerWidth } from '../responsive'
import Row from '../row'
import OpenCloseAnimation from '../open-close-animation'
import ZoomPanControls, { ControlButton, ControlButtonGroup } from './controls'
import type { NeverNullRef, ZoomPanController } from './types'
import type { ZoomPanControlsElement } from './controls/ZoomPanControls'

export const zoomPanViewerHudCss = css`
  z-index: 2;
  position: absolute;
  top: var(--spacer-xs);
  inset-inline-start: var(--spacer-xs); // Scrollbar needs to be accounted for
  width: calc(100% - var(--spacer-xs) * 2);
  pointer-events: none; // unused space inside this component needs to be non-interactive, so anything underneath can receive events
  justify-content: end;
  &[data-left-controls] {
    justify-content: space-between;
    & > * {
      flex-basis: fit-content; // this makes it a little smarter about space so the controls don't get squished as early on smaller viewports
    }
  }

  @media print {
    display: none;
  }
`

const resetButtonCss = css`
  & > * {
    float: right;
  }
`

type ZoomPanViewerHudProps = {
  /** Custom control buttons to go on with the existing ones, like zoom-in and zoom-out. Allowed items are ControlButton and ControlButtonGroup */
  controls?: ZoomPanControlsElement
  leftControls?: ReactNode
  onZoomIn?: (e: SyntheticEvent) => void
  onZoomOut?: (e: SyntheticEvent) => void
  onReset?: (e: SyntheticEvent) => void
  showResetControl?: boolean
  zoomable?: boolean
  controllerRef?: NeverNullRef<ZoomPanController>
}

export const ZoomPanViewerHud = ({
  controls = null,
  leftControls,
  onZoomOut,
  onZoomIn,
  showResetControl = false,
  onReset,
  zoomable,
  controllerRef,
  ...props
}: ZoomPanViewerHudProps): JSX.Element => {
  const { t } = useTranslation()
  const handleZoomIn = (e: SyntheticEvent): void => {
    if (onZoomIn) onZoomIn(e)
    if (!e.defaultPrevented) controllerRef?.current.zoomIn()
  }
  const handleZoomOut = (e: SyntheticEvent): void => {
    if (onZoomOut) onZoomOut(e)
    if (!e.defaultPrevented) controllerRef?.current.zoomOut()
  }
  const handleReset = (e: SyntheticEvent): void => {
    if (onReset) onReset(e)
    if (!e.defaultPrevented) controllerRef?.current.reset()
  }

  const atWidth = useContainerWidth()
  const isNotSmallScreen = atWidth({ default: false, sm: true })

  return (
    <Row className={zoomPanViewerHudCss} data-left-controls={boolAttr(leftControls)} {...sanitizeProps(props)}>
      {leftControls && <ZoomPanControls>{leftControls}</ZoomPanControls>}
      <ZoomPanControls reverse>
        {zoomable && isNotSmallScreen ? (
          <ControlButtonGroup>
            <ControlButton
              Icon={ControlZoomIn}
              onClick={handleZoomIn}
              label={t('zoom-pan.controls.zoom-in.button', 'Zoom In')}
            />
            <ControlButton
              Icon={ControlZoomOut}
              onClick={handleZoomOut}
              label={t('zoom-pan.controls.zoom-out.button', 'Zoom Out')}
            />
          </ControlButtonGroup>
        ) : null}
        <OpenCloseAnimation
          unmountWhenClosed
          className={resetButtonCss}
          isOpen={showResetControl && !controllerRef?.current.isReset()}
          openStyles={{ opacity: 1, width: 36, marginInlineStart: 0 }}
          closeStyles={{ opacity: 0, width: 0, marginInlineStart: -8 }}
        >
          <ControlButton
            Icon={ControlTarget}
            onClick={handleReset}
            label={t('zoom-pan.controls.reset-view.button', 'Reset View')}
          />
        </OpenCloseAnimation>
        {controls}
      </ZoomPanControls>
    </Row>
  )
}

export default ZoomPanViewerHud
