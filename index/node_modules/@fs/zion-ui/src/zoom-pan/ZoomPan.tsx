import type { ReactNode } from 'react'
import React from 'react'
import ZoomPanViewerHud from './ZoomPanViewerHud'
import type { ZoomPanBaseProps } from './ZoomPanBase'
import ZoomPanBase from './ZoomPanBase'
import type { NeverNullRef, ZoomPanController, ZoomPanRefs } from './types'
import type { ZoomPanControlsElement } from './controls/ZoomPanControls'
import useZoomPan from './useZoomPan'

export type ZoomPanProps = ZoomPanBaseProps & {
  /** You can add custom controls to your ZoomPan. More docs coming soon... */
  controls?: ZoomPanControlsElement

  /** Space for adding controls on the upper-left corner */
  leftControls?: ReactNode
}

type CommonProps = Omit<ZoomPanProps, keyof ZoomPanRefs>

type ControlledProps = ZoomPanRefs & CommonProps

function isControlledZoomPan(props: CommonProps | ControlledProps): props is ControlledProps {
  return (props as ControlledProps).controllerRef !== undefined
}

export const zoomIn = (controllerRef: NeverNullRef<ZoomPanController>): (() => void) => {
  const controller = controllerRef.current
  const vals = controller.currentValues
  return () => controller.start({ ...vals, zoom: vals.zoom * 1.3 })
}

export const zoomOut = (controllerRef: NeverNullRef<ZoomPanController>): (() => void) => {
  const controller = controllerRef.current
  const vals = controller.currentValues
  return () => controller.start({ ...vals, zoom: vals.zoom / 1.3 })
}

export const reset =
  (controllerRef: NeverNullRef<ZoomPanController>): (() => void) =>
  () =>
    controllerRef.current?.reset()

export const ControlledZoomPan = ({
  overLayer,
  stageRef,
  viewerRef,
  controllerRef,
  minZoom,
  panMarginX,
  panMarginY,
  imageMode = false,
  rotate = false,
  leftControls,
  controls,
  children,
  ...props
}: ControlledProps): JSX.Element => {
  return (
    <ZoomPanBase
      {...{ stageRef, viewerRef, controllerRef, minZoom, panMarginX, panMarginY, imageMode, rotate }}
      overLayer={
        <>
          {overLayer}
          <ZoomPanViewerHud
            controllerRef={controllerRef}
            leftControls={leftControls}
            controls={controls}
            zoomable
            showResetControl
          />
        </>
      }
      {...props}
    >
      {children}
    </ZoomPanBase>
  )
}

const UncontrolledZoomPan = (props: CommonProps): JSX.Element => {
  const [{ viewerRef, stageRef, controllerRef }] = useZoomPan()
  return <ControlledZoomPan viewerRef={viewerRef} stageRef={stageRef} controllerRef={controllerRef} {...props} />
}

const ZoomPan = (props: ZoomPanProps | CommonProps): JSX.Element => {
  if (isControlledZoomPan(props)) return <ControlledZoomPan {...props} />
  return <UncontrolledZoomPan {...props} />
}

export default ZoomPan
