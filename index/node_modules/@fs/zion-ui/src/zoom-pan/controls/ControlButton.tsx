import type { ComponentType, ReactNode, UIEvent } from 'react'
import React, { useRef } from 'react'
import { css, cx } from '@linaria/core'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { ArrowCaret } from '@fs/zion-icon'
import { DescriptionTooltip } from '../../tooltip'
import { colors } from '../../theme'
import { elevationBaseCss, e2, h4 } from '../../elevation'
import BaseButton from '../../buttons/BaseButton'
import { groupCss } from './ControlButtonGroup'

const buttonCss = css`
  --icon-inline-text: 0; /* Remove text-alignment tweak meant for headings/paragraphs */
  --button-background: ${colors.gray00};
  --button-hover-background: ${colors.gray02};
  --button-active-background: ${colors.gray03};
  --button-focus: ${colors.blue30}; /* Not choosing from the gray theme as we do with Button, because it doesn't show up when a dark image is underneath */
  border-radius: 4px;
  align-items: center;
  color: ${colors.transparent.gray80};
  border: 0;
  background: var(--button-background);
  display: flex;
  height: 36px;
  min-width: 36px;
  padding-top: 3px;
  padding-inline-start: 6px;
  flex-flow: row;
  flex-grow: 0;
  flex-shrink: 0;
  border: 0;
  transition: background-color 0.25s;
  cursor: pointer;
  margin: 0;
  position: relative;

  &:hover {
    background: var(--button-hover-background);
    color: ${colors.transparent.gray100};
  }

  /* Must be a separate selector from above or safari wont work */
  &:focus-visible {
    outline: 3px solid var(--button-focus);
    background: var(--button-hover-background);
    z-index: 1; /* needed or else the focus ring gets covered by neighboring buttons at times */
  }

  &:active {
    background: var(--button-active-background) !important;
  }

  [data-theme='night'] & {
    --button-background: ${colors.gray10};
    --button-hover-background: ${colors.gray20};
    --button-active-background: ${colors.gray03};
    --button-focus-color: ${colors.blue60};
  }

  /* For when this button is contained in a ZoomPanControlGroup */
  .${groupCss} & {
    box-shadow: none !important;
    &:not(:first-child) {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }
    &:not(:last-child) {
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
    &:focus-visible {
      border-radius: 4px !important;
    }
  }
`

const textCss = css`
  color: ${colors.gray100};
  margin: 0 8px;
  text-transform: uppercase;
  white-space: nowrap;
`

type IconProps = {
  size: 'sm' | 'md' | 'lg' | 'xl'
  direction?: 'up' | 'down' | 'forward' | 'backward'
  reflect?: 'horizontal' | 'vertical'
  toggle?: boolean
}

type ControlButtonBaseProps = {
  Icon: ComponentType<IconProps>
  iconDirection?: 'up' | 'down' | 'forward' | 'backward'
  iconToggle?: boolean
  iconReflect?: 'horizontal' | 'vertical'
  children: ReactNode
  label?: string
  onClick(event: UIEvent): void
}

export type ControlButtonProps = Omit<ControlButtonBaseProps, 'children' | 'label'> & {
  label: string // Make label requied
  expanded?: boolean
}

export type ControlMenuButtonProps = Omit<ControlButtonProps, 'expanded'> & {
  isOpen: boolean
}

const ControlButtonBase = ({
  Icon,
  iconDirection,
  iconReflect,
  iconToggle,
  label,
  children,
  onClick,
  ...props
}: ControlButtonBaseProps): JSX.Element => {
  const buttonRef = useRef<HTMLButtonElement>(null)

  return (
    <DescriptionTooltip
      label={label}
      targetAs={BaseButton}
      targetAsProps={{
        'aria-label': label,
        ...sanitizeProps(props),
        className: cx(buttonCss, elevationBaseCss, e2, h4),
        onClick,
        debounce: 0,
        ref: buttonRef,
      }}
      target={
        <>
          <Icon size="sm" aria-hidden reflect={iconReflect} direction={iconDirection} toggle={iconToggle} />
          {children}
        </>
      }
    />
  )
}

const ControlButton = ({ label, expanded, ...props }: ControlButtonProps): JSX.Element => (
  <ControlButtonBase {...props} label={expanded ? undefined : label}>
    {expanded && <span className={textCss}>{label}</span>}
  </ControlButtonBase>
)

export const ControlMenuButton = ({ isOpen, label, ...props }: ControlMenuButtonProps): JSX.Element => {
  return (
    <ControlButtonBase {...props}>
      <span className={textCss}>{label}</span>
      <ArrowCaret direction={isOpen ? 'down' : 'up'} />
    </ControlButtonBase>
  )
}

export default ControlButton
