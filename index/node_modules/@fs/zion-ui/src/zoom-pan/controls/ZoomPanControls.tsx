import type { ReactElement, ReactNode } from 'react'
import React from 'react'
import { css } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import type { ControlButtonProps } from './ControlButton'
import type { ControlButtonGroupProps } from './ControlButtonGroup'

const controlsCss = css`
  display: flex;
  flex-wrap: wrap;
  pointer-events: auto; // the ViewerHud sets this to 'none', so we need to set it to 'auto', because reasons
  gap: 8px;
  &[data-reverse] {
    flex-direction: row-reverse;
  }
`

// Note: these types can't actually limit JSX because JSX.Element can pass off as any kind of ReactElement
export type ControlElement = ReactElement<ControlButtonProps | ControlButtonGroupProps>
export type ZoomPanControlsElement = ControlElement | ControlElement[] | null

export type ZoomPanControlsProps = {
  children: ReactNode
  reverse?: boolean
}

const ZoomPanControls = ({ children, reverse }: ZoomPanControlsProps): JSX.Element | null =>
  children ? (
    <div className={controlsCss} data-reverse={boolAttr(reverse)}>
      {children}
    </div>
  ) : null

export default ZoomPanControls
