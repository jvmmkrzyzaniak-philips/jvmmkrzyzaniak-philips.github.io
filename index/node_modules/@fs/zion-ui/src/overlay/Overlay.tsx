import type { ComponentType, ForwardedRef, RefAttributes, ReactNode, CSSProperties } from 'react'
import React, { forwardRef } from 'react'
import { css, cx } from '@linaria/core'
import { ResponsiveProvider } from '../responsive'
import { GridStart } from '../grid'
import Elevation from '../elevation'

const overlayContainerCss = css`
  outline: none;
  z-index: 2;
  position: relative;
`

const fixSizeCss = css`
  height: 100%;
  width: 100%;
  max-width: inherit;
  max-height: inherit;
`

type OverlayProps<T extends ComponentType<RefAttributes<HTMLDivElement>>> = {
  /** Define a custom tag-name to use (or component) */
  as?: T | 'div' | 'section' | 'aside' | 'span'

  /** The inline css styling */
  style?: CSSProperties

  /** The class name */
  className?: string

  /** The amount of elevation needed for the overlay */
  z?: 0 | 1 | 2 | 4 | 6 | 8 | 12 | 16 | 24

  /** Night mode provides an elevation veil to improve the perception of elevation.
   * In rare cases, you may need to change this value, due to overlay color issues.
   */
  zVeil?: 0 | 1 | 2 | 4 | 6 | 8 | 12 | 16 | 24

  /** Border radius to apply to the Elevation. */
  borderRadius?: number

  /** The a11y role. Defaults to "dialog." */
  role?: string

  /** Tab index. Defaults to -1. Useful if the dialog itself needs to be focusable. */
  tabIndex?: 0 | -1

  /** Fixes size when Overlay is a child of DraggableContainer  */
  fixSize?: boolean

  children: ReactNode
}

const Overlay = forwardRef(
  <T extends ComponentType<RefAttributes<HTMLDivElement>>>(
    {
      as: TagName = 'div',
      className,
      children,
      role = 'dialog',
      z = 24,
      zVeil,
      borderRadius = 8,
      fixSize,
      ...props
    }: OverlayProps<T>,
    ref: ForwardedRef<HTMLDivElement>
  ): JSX.Element => {
    const elevationStyle = { borderRadius }
    if (zVeil != null) {
      elevationStyle['--elev-veil'] = `var(--elev-veil-${zVeil})`
    }
    return (
      <TagName {...props} ref={ref} className={cx(className, overlayContainerCss, fixSize && fixSizeCss)} role={role}>
        <Elevation z={z} as={ResponsiveProvider} style={{ borderRadius }} className={fixSize && fixSizeCss}>
          <GridStart
            /* On overlays with a border-radius, `overflow:hidden` is needed for the border-radius
               to take effect. Note: overlays that both expect this component to have 0 height and
               have Popper elements in their children (such as FullPageOverlay) should not prevent
               overflow or else the Popper elements cannot calculate their overflow properly, so
               those overlays should not supply a borderRadius value to this component.
            */
            style={{ borderRadius, overflow: borderRadius ? 'hidden' : undefined }}
            className={fixSize && fixSizeCss}
          >
            {children}
          </GridStart>
        </Elevation>
      </TagName>
    )
  }
)

export default Overlay
