import { css } from '@linaria/core'
import { baseTextRules } from '../typography/typographyStyles'

export default css`
  :global() {
    // TODO: Remove HanaMinB from our stack when the foundry supports it
    /* For Unicode B,C,E,F character display. Font will only load when a character matching the range is on the page */
    @font-face {
      font-display: swap;
      font-family: 'HanaMinBFont';
      src:
        local('HanaMinB'),
        local('HanaMinB Regular'),
        local('HanaMinB-Regular'),
        url('https://edge.fscdn.org/assets/components/fs-styles/assets/fonts/hanazono/HanaMinB-e09259bbfa3a57f7f9ac2cd8c77d01a9.ttf')
          format('truetype');
      unicode-range: U+20000-2A6D6, U+2A700-2B734, U+2B820-2CEAF, U+2CEB0-2EBEF;
    }

    /**
    * Tofu represents the _Missing Glyph_ definition. This covers not only if a character is unsupported
    * but also what is rendered while character's font is still loading. Without this, an empty space is
    * rendered instead, which can be jaring for the user.
    * I'm placing the font file inline because it is critical to first paint and sufficiently tiny in size
    *
    * Modified from:
    *   https://github.com/nathan-williams/tofu/blob/656cd7fb20b1b4dfea34db33310b7fb6985f2246/tofu.css
    * Original project is licensed with Apache 2.0:
    *   https://github.com/nathan-williams/tofu/blob/656cd7fb20b1b4dfea34db33310b7fb6985f2246/LICENSE
    */
    @font-face {
      font-family: 'Tofu';
      src: url('data:font/ttf;base64,AAEAAAAKAIAAAwAgT1MvMkWnTqsAAAEoAAAAYGNtYXAALvz2AAABkAAAAGRnbHlmO2FM+QAAAfwAAAAsaGVhZCSa2JAAAACsAAAANmhoZWEHbgNUAAAA5AAAACRobXR4BBoAAAAAAYgAAAAGbG9jYQAWAAAAAAH0AAAABm1heHAABAAMAAABCAAAACBuYW1l6hJPCQAAAigAAAFHcG9zdAADAAAAAANwAAAAIAABAAAAAQAAboUSyF8PPPUAAwQAAAAAAOEASjwAAAAA4QBKPACWAAAC7gMgAAAAAwACAAAAAAAAAAEAAAPo/zgAAAOEAJYAlgLuAAEAAAAAAAAAAAAAAAAAAAABAAEAAAACAAoAAQAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAwOEAZAABQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////8H////Pz8/PwAAAAH//wPoAAAAAAPoAMgAAAAAAAAAAAAAAAAAAAAgAAADhAAAAJYAAAAAAAMAAAADAAAAHAADAAEAAAAcAAMACgAAADwABAAgAAAABAAEAAEAAAAB//8AAAAB//8AAAABAAAAAAANAAAAAAAoAAAAAAAAAAIAAAACAAD+DgAAAAEAAP4QABD//wAAAAEAAAAAABYAAAABAJYAAALuAyAACQAAMxEhESE3IREhEZYCWP2oMgH0/gwDIPzgMgK8/UQAAAAADACWAAEAAAAAAAEABAAAAAEAAAAAAAIABwAEAAEAAAAAAAMAGQALAAEAAAAAAAQADAAkAAEAAAAAAAUACwAwAAEAAAAAAAYADAAkAAMAAQQJAAEACAA7AAMAAQQJAAIADgBDAAMAAQQJAAMAMgBRAAMAAQQJAAQAGACDAAMAAQQJAAUAFgCbAAMAAQQJAAYAGACDVG9mdVJlZ3VsYXJmb250QnVpbGRlcjogVG9mdS5SZWd1bGFyVG9mdS1SZWd1bGFyVmVyc2lvbiAwLjEAVABvAGYAdQBSAGUAZwB1AGwAYQByAGYAbwBuAHQAQgB1AGkAbABkAGUAcgA6ACAAVABvAGYAdQAuAFIAZQBnAHUAbABhAHIAVABvAGYAdQAtAFIAZQBnAHUAbABhAHIAVgBlAHIAcwBpAG8AbgAgADAALgAxAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

      /* Unicode B,C,E,F - if we don't limit the Tofu showing up, then Emoji's and other Unicode A chars don't render */
      unicode-range: U+20000-2A6D6, U+2A700-2B734, U+2B820-2CEAF, U+2CEB0-2EBEF;
    }

    /*------------------------------------
      CSS-VARIABLES
      ------------------------------------*/
    :root {
      ${baseTextRules}

      /* We don't use the Reach/Tabs styles, but they will throw a warning without setting
       * the '--reach-tabs' variable to '1' (https://reacttraining.com/reach-ui/styling/).
       * Targeting :root in one of the above linaria CSS variables doesn't work. */
      --reach-tabs: 1;

      --font-families-body: 'HeritageBody:Sans', 'HanaMinBFont', ui-sans-serif, system-ui, sans-serif, 'Tofu';
      --font-families-headings: 'HeritageHeadings:Sans', 'HanaMinBFont', ui-sans-serif, system-ui, sans-serif, 'Tofu';

      /*-------------------------------------
      * White Text colors
      *
      * These css rules do not need to exist on either the 'day' or 'night' themes because they don't
      * change between them.
      */
      --white02: rgba(255, 255, 255, 0.08);
      --white03: rgba(255, 255, 255, 0.15);
      --white05: rgba(255, 255, 255, 0.18);
      --white10: rgba(255, 255, 255, 0.2);
      --white20: rgba(255, 255, 255, 0.28);
      --white30: rgba(255, 255, 255, 0.35);
      --white40: rgba(255, 255, 255, 0.44);
      --white50: rgba(255, 255, 255, 0.62);
      --white60: rgba(255, 255, 255, 0.7);
      --white70: rgba(255, 255, 255, 0.83);
      --white80: rgba(255, 255, 255, 0.9);
      --white90: rgba(255, 255, 255, 0.95);
      --white100: rgba(255, 255, 255, 1);
    }

    /* GLOBAL */

    /**
     * From the Chromium docs:
     * > Glyphs of Han Ideographs [CJK characters] vary by locales. To render
     * > correct glyphs, the installed font fallback uses [the locale].
     * See: https://chromium.googlesource.com/chromium/src/+/main/third_party/blink/renderer/platform/fonts/LocaleInFonts.md#unified-han-ideographs
     * See: https://developer.mozilla.org/en-US/docs/Web/CSS/font-language-override
     *
     * The spec is ambiguous about how to handle 'zh'. It's not clear if it should
     * be treated as 'zh-Hans' or 'zh-Hant'. In practice, it seems that browsers
     * treat it as 'zh-Hans' (simplified Chinese). This is a problem for us because
     * we historically have used the 'zh' locale to mean Traditional Chinese.
     *
     * For Traditional Chinese, we want to use the Traditional Chinese glyphs
     * This is a hack at best. We should be using the lang attribute, but
     * the stack only supports the simplified locale code in the lang attr.
     * It's going to be a major change for the org to move to zh-Hant, so
     * so we're going to use the -webkit-locale and font-language-override
     * properties instead.
     */
    [lang='zh'] {
      -webkit-locale: 'zh-Hant';
      font-language-override: 'ZHT';
    }

    /* We should never allow for some locales to have text transforms, and let translators handle casing */
    [lang|="de"] *, /* German */
    [lang|="ru"] *, /* Russian */
    [lang|="hu"] * /* Hungarian */ {
      text-transform: none !important;
    }

    *,
    *:before,
    *:after {
      box-sizing: border-box;
    }

    body {
      margin: 0;
      font-family: var(--font-families-body);
    }

    button,
    input {
      /* This seems to be necessary. Chrome, Safari and Firefox do not cascade the font-family from the body */
      font-family: inherit;
    }

    button {
      cursor: pointer;
      text-align: start;

      &:focus,
      &:active {
        outline: none;
      }

      &::-moz-focus-inner {
        border: 0;
      }
    }

    fieldset,
    legend {
      border: none;
      margin: 0;
      padding: 0;
    }

    /*------------------------------------
      HEADINGS
      NOTE: These are stripped of styling. Use the HeaderBlock/SubheaderBlock components to style
      ------------------------------------*/

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p {
      font-size: inherit;
      font-weight: 400;
      margin: 0;
      padding: 0;
    }

    /*------------------------------------
      INLINE_ELEMENTS
      ------------------------------------*/

    ol,
    ul {
      padding: 0;
      margin: 0;
    }

    li {
      padding: 0;
      padding-inline-start: 3px;
      margin: 0;
      margin-inline-start: 17px;
    }

    figure {
      margin: 0;
    }

    /**
     * remove animations when OS user preference is on
     * This is a requirement for WCAG 2.1 compliance. See:
     * https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html
     * TODO: remove animations for GIFs 
     */
    @media (prefers-reduced-motion: reduce) {
      *,
      ::before,
      ::after {
        animation-delay: -1ms !important;
        animation-duration: 1ms !important;
        animation-iteration-count: 1 !important;
        background-attachment: initial !important;
        scroll-behavior: auto !important;
        transition-duration: 0s !important;
        transition-delay: 0s !important;

        // For now, we want to keep background-color animation ZoomPan, Skeletons,
        // NoticeLoading(icon), etc because they are actually a viable substitute
        // for motion animations.
      }
    }

    /*------------------------------------
      RESET_ANCHOR
      Because this puts aggressive underlines in places
      where it is hard on the eyes. We make sure that the underlines
      are placed where they should be on the <Link> component and
      the <Button> component, and tastefully (albeit manually) on the
      <Affordance> component.
      ------------------------------------*/
    a[no-link-styles] {
      text-decoration: none;
    }

    a {
      text-decoration-thickness: 1px;
      text-underline-offset: 2px;
    }
  }
`
