import React, { forwardRef, useRef, useContext } from 'react'
import { css, cx } from '@linaria/core'
import { useRandomId, boolAttr, sanitizeProps, useForwardRef } from '@fs/zion-frontend-friends'
import PropTypes from 'prop-types'
import InputLabel from '../input-label'
import { colors, useTheme } from '../theme'
import { WhiteThemeContext } from '../theme/white-theme'
import useA11yRefLabel from '../use-a11y-ref-label'

const colorCss = css`
  --channel-background: ${colors.gray40};
  --channel-checked-background: ${colors.color30};
  --channel-disabled-background: ${colors.gray20};
  --knob-background: ${colors.gray02};
  --knob-checked-background: ${colors.color50};
  --knob-disabled-background: ${colors.gray05};
  --halo-background: ${colors.gray100};
  --halo-checked-background: ${colors.color50};

  &[isdark] {
    --knob-background: ${colors.gray70};
  }
  &[iswhite] {
    --channel-checked-background: ${colors.gray60};
    --knob-background: ${colors.gray100};
    --knob-checked-background: ${colors.gray100};
    --knob-disabled-background: ${colors.gray50};
    --halo-checked-background: ${colors.gray100};
  }
`

const containerCss = css`
  display: inline-flex; /* inline so it is only as wide as it's contents */
  padding-top: 8px;
  position: relative;
  cursor: pointer;

  &[isdisabled] {
    cursor: not-allowed;
  }
  [dir='rtl'] & {
    --translate-x-factor: -1;
  }
`

const channelCss = css`
  border-radius: 6px;
  background: var(--channel-background);
  height: 12px;
  margin: 4px 0 0;
  position: relative;
  transition: background-color 0.25s;
  width: 36px;
  min-width: 36px;

  input:checked + & {
    background: var(--channel-checked-background);
  }

  input:disabled + & {
    background: var(--channel-disabled-background);
  }

  input:disabled:checked + & {
    background: var(--channel-disabled-background);
  }

  &:focus {
    outline: none;
  }
`

const haloCss = css`
  border-radius: 36px;
  height: 36px;
  position: absolute;
  transition:
    transform 0.15s,
    background-color 0.25s,
    opacity 0.15s;
  transform: translate(calc(var(--translate-x-factor, 1) * -8px), -12px);
  background: var(--halo-background);
  opacity: 0;
  width: 36px;

  *:hover > * > & {
    opacity: 0.1;
  }

  *:focus-within > * > & {
    opacity: 0.2;
  }

  *:active > * > & {
    opacity: 0.4;
  }

  input:checked + * > & {
    transform: translate(calc(var(--translate-x-factor, 1) * 8px), -12px);
    background: var(--halo-checked-background);
  }

  input:disabled + * > & {
    opacity: 0;
  }
`

const knobCss = css`
  background: var(--knob-background);
  box-shadow:
    0px 0px 2px rgba(0, 0, 0, 0.25),
    0px 2px 2px rgba(0, 0, 0, 0.25);
  height: 20px;
  width: 20px;
  border-radius: 20px;
  position: absolute;
  transition:
    transform 0.15s,
    background-color 0.25s;
  transform: translate(0px, -4px);

  input:checked + * & {
    background: var(--knob-checked-background);
    transform: translate(calc(var(--translate-x-factor, 1) * 16px), -4px);
  }

  input:disabled + * & {
    background: var(--knob-disabled-background);
  }

  input:disabled:checked + * & {
    background: var(--knob-disabled-background);
  }
`

const labelContainerCss = css`
  line-height: 20px;
  & label {
    line-height: 20px;
    padding: 0;
    padding-inline-start: 8px;
  }
`

const Toggle = forwardRef(function Toggle(
  {
    allowLabelWrapping = false,
    checked = false,
    value,
    onChange,
    onBlur,
    label,
    disabled,
    id,
    name,

    /** ARIA */
    'aria-label': ariaLabel,
    'aria-describedby': ariaDescribedBy,
    'aria-labelledby': ariaLabelledBy,

    /** [HIDDEN]: For internal Zion-UI use only */
    isInForm, // used by @fs/zion-form

    inputProps,
    onClick: consumerOnClick, // not officially supported, but people are using it so we need to keep it for backwards compat.
    ...props
  },
  ref
) {
  const isWhite = useContext(WhiteThemeContext)
  const isDark = useTheme() === 'night'
  const checkboxId = useRandomId(id)
  const switchRef = useRef(null)
  const checkboxRef = useForwardRef(ref)

  // because the checkbox is hidden, it doesn't receive focus on the click of the label, so we put focus manually on the switch. This allows onBlur to fire properly
  function fancyFocus() {
    switchRef.current.focus()
  }
  function handleClick(e) {
    checkboxRef.current.click()
    // because the checkbox is hidden, it doesn't receive focus on the click of the input, so we put focus manually on the switch. This allows onBlur to fire properly
    switchRef.current.focus()
    !disabled && consumerOnClick?.(e)
  }

  // has to be keydown so that we can prevent space bar scrolling behavior
  function handleKeyDown(event) {
    if (event.keyCode === 32) {
      event.preventDefault() // prevent space bar from scrolling page
      event.stopPropagation()
    }
  }

  function handleKeyUp(event) {
    const { keyCode } = event
    if (keyCode === 13 || keyCode === 32) {
      checkboxRef.current.click()
    }
  }

  function switchOnBlur(evt) {
    evt.target = checkboxRef.current
    onBlur && onBlur(evt)
  }

  // The reason we can't use label natively is because we attach it to the hidden checkbox element.
  const [a11yLabel, mirrorLabelRef] = useA11yRefLabel(ariaLabel || label)

  return (
    <div>
      {/* Wrapping div above is so containerCss can use inline-flex, but still have block behavior */}
      <div
        {...sanitizeProps(props)}
        data-interactive="true"
        className={containerCss}
        style={allowLabelWrapping ? {} : { height: 36 }}
        isdisabled={boolAttr(disabled)}
      >
        <input
          {...sanitizeProps(inputProps)}
          onChange={disabled ? undefined : onChange}
          onBlur={onBlur}
          value={value}
          name={name}
          id={checkboxId}
          type="checkbox"
          checked={isInForm ? undefined : checked}
          disabled={disabled}
          ref={checkboxRef}
          role="switch"
          hidden
        />

        {/* SLIDER */}
        <div
          role="switch"
          className={cx(colorCss, channelCss)}
          iswhite={boolAttr(isWhite)}
          isdark={boolAttr(isDark)}
          onKeyDown={disabled ? undefined : handleKeyDown}
          onKeyUp={disabled ? undefined : handleKeyUp}
          onClick={disabled ? undefined : handleClick}
          onBlur={switchOnBlur}
          tabIndex="0"
          ref={switchRef}
          aria-checked={checked}
          aria-disabled={disabled}
          aria-describedby={ariaDescribedBy}
          aria-labelledby={ariaLabelledBy}
          aria-label={a11yLabel}
        >
          <div className={haloCss} aria-hidden />
          <div className={knobCss} aria-hidden />
        </div>

        {/* LABEL */}
        {label && (
          <span className={labelContainerCss} aria-hidden ref={mirrorLabelRef}>
            <InputLabel
              htmlFor={checkboxId}
              disabled={disabled}
              ellipses={!allowLabelWrapping}
              onClick={fancyFocus}
              nextToInput
            >
              {label}
            </InputLabel>
          </span>
        )}
      </div>
    </div>
  )
})
export default Toggle
export const meta = {
  name: 'Toggle',
  isZionFormComponent: true,
  noValidation: true,
}

Toggle.meta = meta

Toggle.propTypes = {
  /** Label will wrap if necessary */
  allowLabelWrapping: PropTypes.bool,

  /** [REQUIRED OUTSIDE OF ZIONFORM] - Whether or not the checkbox is currently checked. */
  checked: PropTypes.bool,

  /** Disables the checkbox. */
  disabled: PropTypes.bool,

  /** Very optional - ID for the checkbox. One is generated if not supplied. */
  id: PropTypes.string,

  /** The label text for the checkbox. JSX is allowed, but if you do this, you must add a plain text version to aria-label as well */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),

  /** [REQUIRED IN ZIONFORM] - Descriptor for the checkbox. This is the key used to identify the checkbox value in forms. */
  name: PropTypes.string,

  /** Handler function that runs each time the checkbox is focused/unfocused. */
  onBlur: PropTypes.func,

  /** [REQUIRED OUTSIDE OF ZIONFORM] - Handler function that runs each time the checkbox is checked/unchecked. */
  onChange: PropTypes.func,

  /** The value associated with this checkbox. */
  value: PropTypes.any,

  /** Add custom props to the input. */
  inputProps: PropTypes.object,
}
