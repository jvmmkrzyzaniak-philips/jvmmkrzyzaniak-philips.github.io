import React, { useContext } from 'react'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'
import { ContentCheck, NoticeWarning, NoticeImportant } from '@fs/zion-icon'
import { Paragraph } from '../typography'
import { colors } from '../theme'
import FeedbackText from '../feedback-text'
import { WhiteThemeContext } from '../theme/white-theme'
import InputGroupProvider from './InputGroupProvider'
import InputLabel from '../input-label'

const fieldsetCss = css`
  border: 0;
  padding: 0;
  min-inline-size: auto;
  min-width: 0;

  /* color legend text on focus */
  &:focus-within legend > p {
    color: ${colors.blue30};
  }
`

export const feedbackColorMap = {
  warning: 'warning',
  error: 'error',
  valid: 'success',
  help: 'help',
}
export function getStatus({ errorMessage, validMessage, warningMessage }) {
  let status = 'none'
  // VALID STATUS
  if (!errorMessage && validMessage) status = 'valid'

  // WARNING STATUS
  if (!errorMessage && warningMessage) status = 'warning'

  // ERROR STATUS
  if (errorMessage) status = 'error'
  return status
}

export default function InputGroup({
  disabled,
  label,
  largerLabel = false,
  allowLabelWrapping = false,
  children,
  errorMessage,
  helpMessage,
  validMessage,
  warningMessage,
  ...props
}) {
  const status = getStatus({ errorMessage, validMessage, warningMessage })
  const validationProps = { errorMessage, helpMessage, validMessage, warningMessage, inputGroup: true }
  const isWhite = useContext(WhiteThemeContext)

  // We cannot use the Paragraph Component for the label as it overrides the line-height property (needs to be 24px): https://fhjira.churchofjesuschrist.org/browse/FRONTIER-1151
  return (
    <InputGroupProvider>
      <fieldset {...sanitizeProps(props)} className={fieldsetCss}>
        {label && (
          <FeedbackText as="legend" style={{ maxWidth: '100%' }} type={isWhite ? undefined : feedbackColorMap[status]}>
            <InputLabel disabled={disabled} largerLabel={largerLabel} ellipses={!allowLabelWrapping} labelAs="span">
              {label}
            </InputLabel>
          </FeedbackText>
        )}
        <div>{children}</div>
        <GroupValidation {...validationProps} />
      </fieldset>
    </InputGroupProvider>
  )
}

// helpMessage styling
// TODO: this is a copy/mutate from inputBase. At some point, we should try to remove the duplication.
const messageCss = css`
  color: var(--special-type-color, ${colors.transparent.gray70});
  align-items: center;
  display: flex;

  &[input-group] {
    margin-top: -12px;
    margin-bottom: 16px;
  }
  [iswhite] &[input-group] {
    margin-top: -14px;
  }
`

// Wraps around the status icon before the helpMessage
const statusIconContainer = css`
  margin-top: -2px;
  padding-inline-end: 8px;
`

const messageTextCss = css`
  display: flex;
  justify-content: space-between;
  width: 100%;
`

export function GroupValidation({ helpMessage, warningMessage, errorMessage, validMessage, inputGroup }) {
  const iconMap = {
    valid: ContentCheck,
    warning: NoticeWarning,
    error: NoticeImportant,
  }

  // Map statuses to the correct messages
  const messageMap = {
    none: helpMessage && <i>{helpMessage}</i>,
    valid: validMessage,
    error: errorMessage,
    warning: warningMessage,
  }
  const status = getStatus({ errorMessage, validMessage, warningMessage })
  const StatusIcon = (warningMessage || errorMessage || validMessage) && iconMap[status]
  const isWhite = useContext(WhiteThemeContext)

  return helpMessage || warningMessage || errorMessage || validMessage ? (
    <FeedbackText
      className={messageCss}
      input-group={boolAttr(inputGroup)}
      type={feedbackColorMap[status]}
      withWhiteText={isWhite && status !== 'none'}
    >
      {/* STATUS ICON */}
      {StatusIcon && (
        <span className={statusIconContainer} aria-hidden>
          <StatusIcon size={isWhite ? 'xs' : 'sm'} />
        </span>
      )}

      {/* HELP TEXT */}
      <div className={cx('help-message-container', messageTextCss)}>
        <Paragraph size="xs">{messageMap[status]}</Paragraph>
      </div>
    </FeedbackText>
  ) : null
}

InputGroup.propTypes = {
  /** Legend text acts like a label for all inputs inside the group. Please make this a string. We only allow other items internally (skeletons) */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /** Increases label size when set to true */
  largerLabel: PropTypes.bool,

  /** Disables ellipses and allows label to wrap when set to true */
  allowLabelWrapping: PropTypes.bool,

  /** Applies disabled styling if true, but only to legend. Developers have to disable child inputs themselves. */
  disabled: PropTypes.bool,

  /** Children are required, inputs recommended */
  children: PropTypes.node.isRequired,
}
