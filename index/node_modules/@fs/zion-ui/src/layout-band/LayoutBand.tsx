import type { ElementType } from 'react'
import React, { createContext, forwardRef, useContext } from 'react'
import PropTypes from 'prop-types'
import type { InferProps } from 'prop-types'
import { css, cx } from '@linaria/core'

import { boolAttr } from '@fs/zion-frontend-friends'
import type { PolymorphicComponentPropsWithRef, PolymorphicRef } from '../polymorphic-prop-types'
import { ResponsiveProvider } from '../responsive'
import { GridStart } from '../grid'
import { Bleed } from '../bleed'
import MarginBox from '../margin-box'

export const LayoutBandContext = createContext<boolean>(false)

export const sizeWidths = {
  nano: 550,
  xxs: 700,
  xs: 850,
  sm: 1000,
  md: 1200,
  lg: 1400,
  xl: 1600,
  xxl: 1900,
}

const propTypes = {
  /**
   * Any content you want.
   */
  children: PropTypes.node,

  /**
   * **The max width for the content.**
   *
   * When your browser is wider than this property, extra margins will be added
   * to either side of the content well to keep things a sensible width.
   *
   * <details>
   *   <summary>**See available sizes.**</summary>
   * - **nano**: 550
   * - **xxs**: 700
   * - **xs**: 850
   * - **sm**: 1000
   * - **md**: 1200
   * - **lg**: 1400
   * - **xl**: 1600
   * - **xxl**: 1900
   * </details>
   * <br/>
   *
   * **NOTE:** if your LayoutBand is inside of another LayoutBand (or overlay), this property is ignored.
   */
  maxWidth: PropTypes.oneOf(['nano', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'] as const),

  /**
   * The minimum amount of margin to have on either side, when maxWidth is not met
   *
   * **NOTE:** if your LayoutBand is inside of another LayoutBand (or overlay), this property is ignored.
   */
  marginX: PropTypes.oneOf(['nano', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'] as const),

  /** The amount of margin to have on top and bottom */
  marginY: PropTypes.oneOf(['nano', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl', 'none'] as const),

  /** The color of the background to use */
  color: PropTypes.string,

  /** An image url to use for the background */
  image: PropTypes.string,

  /**
   * **Add any desired custom-css here.**
   *
   * NOTE: Should be background-only rules, maybe some borders. If you are using the `background-position`,
   * `background-repeat`, or `background-size` rules, you will need to use `!important`.
   */
  className: PropTypes.string,

  /**
   * Any style rules you need. They will be applied to the outside (edge-to-edge) part of your LayoutBand.
   *
   * **IMPORTANT** Meant for background use (and top/bottom borders) only. Do not use this to change
   * font sizes, text colors, etc.
   * */
  style: PropTypes.object,

  /** A minimum height to put on this component */
  minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** The alignment of the content to the container (only makes sense when you set a minHeight */
  alignY: PropTypes.oneOf(['bottom', 'middle', 'top'] as const),

  /**
   * Whether this LayoutBand should try to fill vertical space.
   *
   * **NOTE:** If your LayoutBand is not placed directly inside a flex container, this will not work!
   */
  growY: PropTypes.bool,

  /** Whether to bleed to the top of the container (see docs on Bleed) */
  top: PropTypes.bool,

  /** Whether to bleed to the bottom of the container (see docs on Bleed) */
  bottom: PropTypes.bool,

  /** Whether to flip the background image in RTL
   * Images with people eating or Images with text should not be flipped
   * @default false
   */
  flipBackgroundRtl: PropTypes.bool,
}

const containerCss = css`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
`

const outerCss = css`
  display: flex;
  flex-direction: column;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;

  [dir='rtl'] &[flip-background-rtl] {
    transform: scaleX(-1);
    > * {
      transform: scaleX(-1);
    }
  }
`

const innerCss = css`
  width: 100%;
  margin: 0 auto;
`

const alignYCss = css`
  &[grow-y] {
    flex-grow: 1;
  }
  &[align-y='bottom'] {
    justify-content: flex-end;
  }
  &[align-y='middle'] {
    justify-content: center;
  }
`

const LayoutBandSr = forwardRef(
  <C extends ElementType = 'div'>(
    {
      as,
      children,
      maxWidth = 'md',
      marginX = 'sm',
      marginY = 'none',
      color,
      image,
      className,
      style,
      minHeight,
      flipBackgroundRtl,
      alignY = 'top',
      growY,
      ...props
    }: PolymorphicComponentPropsWithRef<C, Omit<InferProps<typeof propTypes>, 'as'>>,
    ref: PolymorphicRef<C>
  ) => {
    const TagName = (as || 'div') as React.ElementType
    return (
      <LayoutBandContext.Provider value>
        <div
          {...props}
          align-y={alignY}
          grow-y={boolAttr(growY)}
          className={cx(className, outerCss, alignYCss)}
          flip-background-rtl={boolAttr(flipBackgroundRtl)}
          style={{
            minHeight,
            backgroundColor: color,
            backgroundImage: image && `url(${image})`,
            ...style,
          }}
        >
          <MarginBox
            as={TagName}
            ref={ref}
            className={cx(containerCss, innerCss)}
            marginY={marginY}
            marginX={marginX}
            style={{
              maxWidth: `calc(${sizeWidths[maxWidth]}px + 2 * var(--spacer-${marginX}))`,
            }}
          >
            <ResponsiveProvider className={containerCss}>
              <GridStart className={containerCss}>{children}</GridStart>
            </ResponsiveProvider>
          </MarginBox>
        </div>
      </LayoutBandContext.Provider>
    )
  }
)

const layoutBandJrCss = css`
  padding: 0 var(--bleedable-sides);
  [top]&:first-child {
    padding-top: var(--bleedable-top);
  }
  [bottom]&:last-child {
    padding-bottom: var(--bleedable-bottom);
  }
  [grow-y]& > * {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }
`

const LayoutBandJr = forwardRef(
  <C extends ElementType = 'div'>(
    {
      as,
      minHeight,
      color,
      image,
      className,
      style,
      children,
      alignY = 'top',
      growY,
      marginY = 'none',
      bottom,
      top,
      maxWidth,
      marginX, // eslint-disable-line -- ignored: not needed for LayoutBandJr
      ...props
    }: PolymorphicComponentPropsWithRef<C, Omit<InferProps<typeof propTypes>, 'as'>>,
    ref: PolymorphicRef<C>
  ) => {
    const TagName = as || 'div'
    return (
      <Bleed
        {...props}
        ref={ref}
        sides
        bottom={bottom}
        top={top}
        align-y={alignY}
        grow-y={boolAttr(growY)}
        className={cx(className, layoutBandJrCss, alignYCss)}
        style={{
          minHeight,
          backgroundColor: color,
          backgroundImage: image && `url(${image})`,
          ...style,
          paddingTop: marginY !== 'none' ? `var(--spacer-${marginY})` : undefined,
          paddingBottom: marginY !== 'none' ? `var(--spacer-${marginY})` : undefined,
        }}
      >
        <TagName
          style={
            maxWidth && {
              maxWidth: `calc(${sizeWidths[maxWidth]}px + 2 * var(--bleedable-sides))`,
              margin: `0 auto`,
              width: '100%', // Solves issue where LayoutBandJr collapses when maxWidth property is set (FRONTIER-1347)
            }
          }
        >
          {children}
        </TagName>
      </Bleed>
    )
  }
)

const LayoutBand = forwardRef(
  <C extends ElementType = 'div'>(
    props: PolymorphicComponentPropsWithRef<C, Omit<InferProps<typeof propTypes>, 'as'>>,
    ref: PolymorphicRef<C>
  ) => {
    const inLayoutBandSr = useContext(LayoutBandContext)
    const TagName = inLayoutBandSr ? LayoutBandJr : LayoutBandSr
    return <TagName {...props} ref={ref} />
  }
)

LayoutBand.propTypes = propTypes

export default LayoutBand

/**
 * **LayoutBand is used to break up a page into separate regions with distinct backgrounds..**
 *
 * LayoutBand defines the content-well, but lets you color outside the lines when you need to!
 * It allows you to easily style backgrounds in lots of fancy ways.
 *
 * Using LayoutBand for each major section of your page divides the content in a way that helps
 * users find what theyâ€™re looking for. With almost every page you create, it is crucial that LayoutBand
 * is the first thing that you add!
 *
 * **It is highly recommended that you take time to learn how LayoutBand works.**
 * <a href="https://beta.familysearch.org/frontier/zionui/learn/Layout/layoutband" target="_blank">Click here to learn all about it!</a>
 *
 * <br/>
 *
 * ## LayoutBand can be used in two different ways...
 *
 * ### As the basic foundation for laying out your page
 *
 * Your page should almost always start with LayoutBands. They are used to break your page
 * into sections, and to act as a sensible container for many other layout tools, like Grid!
 *
 * <br/>
 * ### As a way to add stylistic sections to other surfaces, like Cards and Overlays
 *
 * Cards, Overlays, InfoSheets and other surfaces often come with sensible margins, so that
 * your content looks good inside of them. However, sometimes you want to add a styled
 * section to your surface. LayoutBand will do this for you, but help keep the margins consistent.
 *
 * @author Zion UI Team, Matthew Larson
 * @tutorial https://beta.familysearch.org/frontier/zionui/learn/Layout/layoutband
 */
export const LayoutBandPropsTableComponent = ({ maxWidth }: InferProps<typeof propTypes>): JSX.Element => (
  <div>{maxWidth}</div>
)
