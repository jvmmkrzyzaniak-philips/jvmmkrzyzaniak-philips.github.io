import React, { useState, Children, cloneElement } from 'react'
import { css } from '@linaria/core'
import { ArrowCaret } from '@fs/zion-icon'
import PropTypes from 'prop-types'
import { oneOfComponentType } from '@fs/zion-frontend-friends'
import ListItem from './ListItem'
import List from './List'
import Divider from '../divider'
import Checkbox from '../checkbox'
import { Expander, ExpanderContent } from '../expander'
import { FillerMedia } from './mediaTypes'

const listItemCss = css`
  list-style: none;
  margin: 0;
  padding: 0;
`

function ControlledExpandableListItem({
  children,
  startElement,
  open,
  setOpen,
  firstChild,
  lastChild,
  noKeyline = false,

  /** [SCRUBBED]: Don't pass on to children */
  endElement,
  to,
  external,

  ...props
}) {
  return (
    <Expander open={open} setOpen={setOpen}>
      {open && !firstChild && <Divider fullWidth />}
      <ListItem
        {...props}
        aria-expanded={open ? 'true' : 'false'}
        onClick={() => setOpen((o) => !o)}
        startElement={startElement}
        endElement={<ListItem.Icon Icon={ArrowCaret} direction={open ? 'up' : 'down'} />}
      />
      <ExpanderContent>
        <li className={listItemCss}>
          <List>
            {Children.map(children, (child) =>
              cloneElement(child, {
                startElement: startElement && !noKeyline ? <FillerMedia element={startElement} /> : undefined,
                onClick: open ? child.props.onClick : undefined, // Remove interactability when sublist is collapsed so tabbing/accessibility do not have issues
              })
            )}
          </List>
        </li>
      </ExpanderContent>
      {open && !lastChild && <Divider fullWidth />}
    </Expander>
  )
}

function UncontrolledExpandableListItem({ initiallyOpen = false, ...props }) {
  const [open, setOpen] = useState(initiallyOpen)
  return <ControlledExpandableListItem {...{ ...props, open, setOpen }} />
}

export default function ExpandableListItem(props) {
  const { setOpen, onClick } = props
  return onClick || setOpen ? (
    <ControlledExpandableListItem {...props} />
  ) : (
    <UncontrolledExpandableListItem {...props} />
  )
}

export const meta = {
  name: 'ExpandableListItem',
}

ExpandableListItem.meta = meta

ExpandableListItem.propTypes = {
  /** If control over the open state is needed, provide the open state through this prop. */
  open: PropTypes.bool,

  /** If control over the open state is needed, provide the open state setter through this prop. */
  setOpen: PropTypes.func,

  /** If true, the expandable list will be expanded by default. */
  initiallyOpen: PropTypes.bool,

  /** Displays the number provided as a count next to the primary text. */
  badgeCount: PropTypes.number,

  /** If true, reduces the vertical padding on the list item. */
  dense: PropTypes.bool,

  /** If true, disables the item. */
  disabled: PropTypes.bool,

  /** Add emphasis to this item */
  emphasized: PropTypes.bool,

  /** Displays media on the start side of the list item. Must be one of these: ListItem.Icon, ListItem.Avatar, ListItem.MultiAvatar, ListItem.Image, ListItem.FillerMedia */
  startElement: oneOfComponentType([
    ListItem.Icon,
    ListItem.Avatar,
    ListItem.MultiAvatar,
    ListItem.Image,
    ListItem.FillerMedia,
    Checkbox,
  ]),

  /** Adds overline text to the list item's text block. */
  overline: PropTypes.string,

  /** Primary line of text. */
  primaryText: PropTypes.node.isRequired,

  /** Secondary line of text. */
  secondaryText: PropTypes.node,

  /** Show this item as selected */
  selected: PropTypes.bool,

  /** If true, it removed the filler space (if present) to the start of the component. To be used when ExpandableListItem has a startElement, but you don't want the children to align with it. */
  noKeyline: PropTypes.bool,
}
