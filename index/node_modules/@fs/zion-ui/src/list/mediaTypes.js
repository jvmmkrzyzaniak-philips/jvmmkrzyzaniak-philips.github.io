import React, { useContext } from 'react'
import { css } from '@linaria/core'
import { sanitizeProps, boolAttr } from '@fs/zion-frontend-friends'
import UIAvatar, { MultiAvatar as UIMultiAvatar } from '../avatar'
import { sizes } from '../avatar/Avatar'
import { IconButton as UIIconButton } from '../buttons'
import { Paragraph } from '../typography'
import { colors } from '../theme'
import { ListItemContext } from './ListItemCore'

const avatarCss = css`
  /* Prevent links from changing the monogram text color */
  color: ${colors.gray100};
`

const imgCss = css`
  box-sizing: content-box;
  height: 56px;
  margin-top: 8px;
  margin-bottom: 8px;
  object-fit: cover;
  width: 56px;
  &[bigness='md'] {
    width: 100px;
  }
  &[dense] {
    margin-top: 16px;
  }
`

const iconButtonCss = css`
  margin-inline-end: -8px;
`

const metaTextCss = css`
  align-self: flex-start;
`

/**
 * These components are used as compound components off of ListItem.
 * This lets us control what developers provide to the startElement and
 * endElement props on ListItem, but still give them the room to handle
 * props and inputs as needed, without us having to do a bunch of middle
 * management, like prop drilling.
 */

export const Image = ({ alt, size = 'sm', ...props }) => {
  const { dense } = useContext(ListItemContext)
  return <img {...sanitizeProps(props)} alt={alt} className={imgCss} bigness={size} dense={boolAttr(dense)} />
}

export const Icon = ({ Icon: DisplayIcon, ...props }) => {
  // Prevent links from changing the color of the icon
  return DisplayIcon ? <DisplayIcon {...props} size="sm" /> : null
}

export const Avatar = (props) => {
  const { dense } = useContext(ListItemContext)
  return (
    <div className={avatarCss}>
      <UIAvatar {...props} size={dense ? 'xs' : 'sm'} />
    </div>
  )
}

export const MultiAvatar = (props) => {
  const { dense } = useContext(ListItemContext)
  return (
    <div className={avatarCss}>
      <UIMultiAvatar {...props} size={dense ? 'xs' : 'sm'} />
    </div>
  )
}

export const IconButton = ({ onClick, ...props }) => {
  const handleClick = (event) => {
    // Prevent also clicking on the ListItem underneath by doing stopPropagation, so the ListItem's `onClick` event won't get called when a user checks/unChecks the box.
    event.stopPropagation()
    onClick && onClick(event)
  }
  return (
    <div className={iconButtonCss}>
      <UIIconButton {...props} onClick={handleClick} />
    </div>
  )
}

export const MetaText = ({ text }) => {
  return text ? (
    <div className={metaTextCss}>
      <Paragraph size="xs" secondary>
        {text}
      </Paragraph>
    </div>
  ) : null
}

export const Filler = ({ width }) => {
  const { dense } = useContext(ListItemContext)
  return <div style={{ width: width || (dense ? sizes.xs.avatarSize : sizes.sm.avatarSize) }} />
}

export const FillerMedia = ({ element }) => {
  switch (element.type) {
    case Avatar:
    case MultiAvatar:
    case Icon:
      return <Filler />
    case Image:
      return <div className={imgCss} />
    default:
      return null
  }
}
