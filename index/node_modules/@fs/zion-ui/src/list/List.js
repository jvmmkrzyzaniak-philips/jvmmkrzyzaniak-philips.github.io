import React, { forwardRef, Children, cloneElement } from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { sanitizeProps, Observable } from '@fs/zion-frontend-friends'
import Ghost from '../ghost'
import { meta as expandableListItemMeta } from './ExpandableListItem'

const listCss = css`
  scroll-behavior: smooth;
  /* allow drag to continue scrolling after user lets go for mobile (iOS Safari) */
  -webkit-overflow-scrolling: touch;
`

const listItemPartitions = (listItems) => {
  const listItemsCount = 100
  return listItems.reduce((partitions, listItem, index) => {
    const needsNewPartition = index % listItemsCount === 0
    if (needsNewPartition) partitions.push([])
    const partition = partitions[partitions.length - 1]
    partition.push(listItem)
    return partitions
  }, [])
}

const List = forwardRef(
  (
    {
      maxHeight,
      children,
      ghosted,

      /** [HIDDEN]: For internal Zion-UI use only */
      as: TagName = 'ul', // DO NOT USE THIS unless you _rely_ on overriding accessibility protocols (like we have to do in Autosuggest)

      ...props
    },
    ref
  ) => {
    if (ghosted) {
      const losNiÃ±os = Children.toArray(children)
      const partitions = listItemPartitions(losNiÃ±os)

      return (
        <TagName
          role="list"
          {...sanitizeProps(props)}
          className={listCss}
          ref={ref}
          style={maxHeight ? { maxHeight, overflow: 'auto' } : {}}
        >
          <Observable rootMargin="200px">
            {partitions.map((partition, index) => (
              // This was a conscious decision because we unconsciously don't know what else to do...
              // eslint-disable-next-line react/no-array-index-key
              <Ghost key={index} heightEstimate={partition.length * 50}>
                {partition.map((item, idx) => (
                  // See above note
                  // eslint-disable-next-line react/no-array-index-key
                  <Ghost key={idx} heightEstimate={50}>
                    {item}
                  </Ghost>
                ))}
              </Ghost>
            ))}
          </Observable>
        </TagName>
      )
    }

    return (
      // DO NOT move this role=list to after the sanitizeProps(props) spread. Autosuggest needs to overwrite that role.
      <TagName
        role="list"
        {...sanitizeProps(props)}
        className={listCss}
        ref={ref}
        style={maxHeight ? { maxHeight, overflow: 'auto' } : {}}
      >
        {/* Need to know if list item is first or last child for expandable lists to show the dividers when they are open */}
        {/* TODO: Simplify this in v10 [Matt..*cough cough*] */}
        {Children.map(children, (child, index) => {
          const isArray = Array.isArray(children)
          return child?.type?.meta?.name === expandableListItemMeta.name
            ? cloneElement(child, {
                firstChild: isArray ? index === 0 : true,
                lastChild: isArray ? index === children.length - 1 : true,
              })
            : child
        })}
      </TagName>
    )
  }
)

List.propTypes = {
  /** Children must be set of ListItems for accessibility to work properly */
  children: PropTypes.node,
  /** In certain situations, we need to have a list scroll inside of a finite space (like AutoSuggest or MenuOverlay). Set this if you need the keyboard navigation to auto-scroll to items with a tab index. */
  maxHeight: PropTypes.string,
  /** ðŸ‘» If you have a large List, you gonna wanna set dis...trus' me. */
  ghosted: PropTypes.bool,
}

export default List
