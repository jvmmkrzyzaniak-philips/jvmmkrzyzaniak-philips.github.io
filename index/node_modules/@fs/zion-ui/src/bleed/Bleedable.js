import React, { forwardRef } from 'react'
import { css, cx } from '@linaria/core'
import PropTypes from 'prop-types'

const bleedableCss = css`
  padding: var(--bleedable-top) var(--bleedable-sides) var(--bleedable-bottom);

  --parent-cell-width: var(--cell-width);
  & > * {
    --cell-width: calc(var(--parent-cell-width) - var(--bleedable-sides) * 2);
  }
`
const asPix = (val) => (typeof val === 'number' ? `${val}px` : `var(--spacer-${val})`)

const Bleedable = forwardRef(function Bleedable(
  { top = 0, sides = 0, bottom = top, children, as: TagName = 'div', className, style, ...props },
  ref
) {
  return (
    <TagName
      {...props}
      className={cx(className, bleedableCss)}
      style={{
        ...style,
        '--bleedable-top': asPix(top),
        '--bleedable-sides': asPix(sides),
        '--bleedable-bottom': asPix(bottom),
      }}
      ref={ref}
    >
      {/* not using sanitizeProps because grid needs to be able to pass styles to it */}
      {children}
    </TagName>
  )
})

Bleedable.propTypes = {
  /** Padding of top of element (numbers will be converted to px). This will also be the default for the 'bottom' unless overridden by setting 'bottom' explicitly */
  top: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** Padding of sides of element (numbers will be converted to px) */
  sides: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** Padding of bottom of element (numbers will be converted to px) */
  bottom: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** Define a custom tag-name to use */
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),
}

export default Bleedable
