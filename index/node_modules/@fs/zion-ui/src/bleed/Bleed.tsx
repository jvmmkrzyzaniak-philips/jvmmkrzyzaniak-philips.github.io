import type { ElementType } from 'react'
import React, { forwardRef } from 'react'
import { css, cx } from '@linaria/core'
import type { InferProps } from 'prop-types'
import PropTypes from 'prop-types'
import { boolAttr } from '@fs/zion-frontend-friends'
import type { PolymorphicRef, PolymorphicComponentPropsWithRef } from '../polymorphic-prop-types'

const bleedCss = css`
  display: flex;
  flex-direction: column;

  &[all],
  &[top] {
    &:first-child {
      margin-top: calc(var(--bleedable-top) * -1);
    }
  }

  &[all],
  &[sides],
  &[end] {
    margin-inline-end: calc(var(--bleedable-sides) * -1);
  }

  &[all],
  &[sides],
  &[start] {
    margin-inline-start: calc(var(--bleedable-sides) * -1);
  }

  &[start],
  &[end] {
    --cell-width: calc(var(--parent-cell-width) - var(--bleedable-sides));
  }

  &[all],
  &[sides],
  &[start][end] {
    --cell-width: var(--parent-cell-width);
  }

  &[all],
  &[bottom] {
    &:last-child {
      margin-bottom: calc(var(--bleedable-bottom) * -1);
    }
  }

  &:only-child {
    height: 100%;
    flex-grow: 1;
  }
`

const propTypes = {
  /**
   * bleed to all possible edges
   *
   * **NOTE** When set to `true`, this will override
   * all other properties.
   * @default false
   */
  all: PropTypes.bool,

  /**
   * bleed to the top **if possible**
   *
   * This only does anything when your Bleed component is the FIRST item
   * in its container.
   * @default false
   * */
  top: PropTypes.bool,

  /**
   * bleed to the bottom **if possible**
   *
   * This only does anything when your Bleed component is the LAST item
   * in its container.
   * @default false
   * */
  bottom: PropTypes.bool,

  /**
   * bleed to the start and end
   *
   * **NOTE** When set to `true`, this will override
   * anything you set on the `start` and `end` properties.
   * @default false
   */
  sides: PropTypes.bool,

  /**
   * bleed to the start (left side) of the container.
   * @default false
   */
  start: PropTypes.bool,

  /**
   * bleed to the end (right side) of the container.
   * @default false
   */
  end: PropTypes.bool,

  /**
   * Define a custom tag-name to use
   * @default "div"
   */
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),
}

const Bleed = forwardRef(
  <C extends ElementType = 'div'>(
    {
      children,
      className,
      as,
      all,
      top,
      bottom,
      sides,
      start,
      end,
      ...props
    }: PolymorphicComponentPropsWithRef<C, Omit<InferProps<typeof propTypes>, 'as'>>,
    ref: PolymorphicRef<C>
  ) => {
    const TagName = as || 'div'
    const directions = {
      all: boolAttr(all),
      sides: boolAttr(sides),
      top: boolAttr(top),
      bottom: boolAttr(bottom),
      start: boolAttr(start),
      end: boolAttr(end),
    }

    return (
      <TagName {...props} {...directions} className={cx(className, bleedCss)} ref={ref}>
        {children}
      </TagName>
    )
  }
)

Bleed.propTypes = propTypes

export default Bleed

/**
 * ### _Allows elements to break from the padding of their parent component._
 *
 * Some ZionUI components have built-in padding applied to them (for example, a Card, Dialog, or ListElement). But in
 * some cases the need arises that we want a child of our component to be able to bleed all the way to the edge of the
 * component, or to break free from the padding in place. This component allows this to happen.
 */
export const BleedPropsTableComponent = ({ all }: InferProps<typeof propTypes>): JSX.Element => <div>{all}</div>
