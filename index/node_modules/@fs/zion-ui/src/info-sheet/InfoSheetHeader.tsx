import type { ReactNode, Ref } from 'react'
import React, { useRef } from 'react'
import { boolAttr } from '@fs/zion-frontend-friends'
import { MenuClose, ControlBottomSheet, ControlSideSheet, Arrow } from '@fs/zion-icon'
import { css, cx } from '@linaria/core'
import { useTranslation } from 'react-i18next'
import Avatar from '../avatar'
import { H2, Subheading } from '../typography'
import { Bleedable, IconButton, Ellipsis, Row, colors } from '..'
import { useParentInfoSheet } from './ParentInfoSheetProvider'
import { useDraggable } from '../draggable-container'
import { headerColorCss } from '../dialog-overlay/DialogOverlayBase'

const infoSheetHeaderCss = css`
  position: relative;
  background: ${colors.gray00};
  outline: none;
  display: grid;
  align-items: center;
  grid-template-columns: 1fr auto;
  grid-template-rows: auto;
  grid-template-areas:
    'title controls'
    'tabs tabs'
    'headercontent headercontent';
  touch-action: none;

  &[data-is-resizable] {
    cursor: ns-resize;

    &::after {
      position: absolute;
      top: 0;
      inset-inline-start: calc(50% - 19px);
      content: '';
      display: block;
      width: 38px;
      height: 4px;
      border-radius: 6px;
      margin: 6px auto 0;
      background-color: ${colors.transparent.gray05};
    }
  }

  &[data-color] {
    &::after {
      display: none;
    }
  }
`

const titleCss = css`
  grid-area: title;
  min-height: 40px;
  padding: 12px 0;
`

const controlsCss = css`
  grid-area: controls;
  margin-inline-start: 12px; /* Dense buttons get overlapped by the title. This gives room for the click area */
  z-index: 1; /* To come above the drag handle */
  &:empty {
    display: none;
  }
  [data-no-title] & {
    margin-inline-start: 24px; /* With tabs, we need a bit more space. */
  }
`

const headerContentCss = css`
  grid-area: headercontent;
`

const tabsCss = css`
  grid-area: tabs;
  z-index: 1; /* To come above the drag handle */
  margin-top: -8px;
  &:empty {
    display: none;
  }
  [data-no-title] & {
    grid-area: title;
    margin-top: 0;
    [data-is-resizable]& {
      margin-top: 16px;
    }
  }
  [data-color] & {
  }
`

export type InfoSheetHeaderProps = {
  /** Avatar component for the header */
  avatar?: React.ComponentProps<typeof Avatar>
  /**
   * Title Text
   *
   * **NOTE:** Normally, a title is required, but there are some cases where a title gets
   * in the way when also using tabs. If this is the case, you must at least provide an `aria-label`
   * for screen readers.
   */
  title?: string

  /** SubTitle Text */
  subtitle?: string

  /** Any needed extra content to go below the title and tabs, but not scroll with the rest of the content. */
  headerContent?: ReactNode

  /**
   * Customize the label text for the Close Button (both aria-label and ToolTip text).
   * @default Close
   */
  closeLabel?: string

  transitioning?: boolean

  isBottomSheet?: boolean

  /** If in an InfoSheetPanel, a back-button will be added to allow the panel to be closed. */
  onBackClick?: () => void

  /** Whether to allow the user to toggle the InfoSheet between a bottom sheet and a side sheet. */
  togglePlacement?: () => void

  /**
   * Whether or not the sheet is not closable
   * @default false
   */
  nonClosable?: boolean

  /** Top-border color for the header */
  headingColor?: 'yellow' | 'red' | 'blue' | 'green' | 'purple' | 'gray'

  /** Informs screen readers if content is loading */
  busy?: boolean

  /** If a consumer is using tabs, a ref is needed to know where to put the tabs inside the header */
  tabsPortalRef: Ref<HTMLDivElement>

  /** The ref to use to be able to attach an a11y label */
  labelRef?: Ref<HTMLDivElement>
}

const InfoSheetHeader = ({
  title,
  subtitle,
  avatar,
  headerContent,
  closeLabel,
  isBottomSheet,
  togglePlacement,
  onBackClick,
  transitioning,
  nonClosable,
  headingColor,
  busy,
  tabsPortalRef,
  labelRef,
}: InfoSheetHeaderProps): JSX.Element => {
  const [t] = useTranslation()
  const { close, bottomSheetHeight, setBottomSheetHeight } = useParentInfoSheet()
  const draggableRef = useRef<HTMLDivElement>(null)
  const startRef = useRef(bottomSheetHeight)

  useDraggable({
    draggableRef,
    onDragStart: () => {
      startRef.current = bottomSheetHeight
      if (document) document.body.style.userSelect = 'none'
    },
    onDragMove: (delta) => {
      setBottomSheetHeight((startRef.current - delta.y) / window.innerHeight)
      return true
    },
    onDragEnd: () => {
      if (document) document.body.style.userSelect = 'auto'
    },
    getBounds: () => ({
      min: { x: 0, y: startRef.current - window.innerHeight + 32 },
      max: { x: 0, y: startRef.current - 48 },
    }),
    disabled: !isBottomSheet,
    noStretchy: true,
    filterEvents: (e) => {
      const target = e.target as HTMLElement
      return !(target.closest('button') || target.closest('[aria-selected="false"'))
    },
  })

  return (
    <Bleedable
      sides={16}
      as="header"
      ref={draggableRef}
      className={cx(infoSheetHeaderCss, headerColorCss)}
      data-color={headingColor}
      data-no-title={boolAttr(!title)}
      data-is-resizable={boolAttr(isBottomSheet)}
      tabIndex={-1}
      aria-busy={Boolean(busy)}
    >
      <Row alignY="middle" guttersX="xs" guttersY="none" className={titleCss}>
        {onBackClick && (
          <IconButton
            title={t('common-ui:back.action', 'Back')}
            Icon={Arrow}
            onClick={onBackClick}
            iconDirection="backward"
            noShrinkX
            dense
          />
        )}
        {avatar && <Avatar {...avatar} size="sm" />}
        {title && (
          <H2 growX size="H6" ref={labelRef}>
            <Ellipsis>{title}</Ellipsis>
            {subtitle && (
              <Subheading>
                <Ellipsis>{subtitle}</Ellipsis>
              </Subheading>
            )}
          </H2>
        )}
      </Row>
      <Row guttersX="xs" guttersY="none" className={controlsCss}>
        {togglePlacement && (
          <IconButton
            color="gray"
            title={
              !isBottomSheet
                ? t('infosheet.dock-to-bottom', 'Dock to Bottom')
                : t('infosheet.dock-to-right', 'Dock to Right')
            }
            disabled={transitioning}
            Icon={!isBottomSheet ? ControlBottomSheet : ControlSideSheet}
            onClick={togglePlacement}
            noShrinkX
            dense
          />
        )}
        {close && !nonClosable && (
          <IconButton
            color="gray"
            title={closeLabel || t('common-ui:close.action', 'Close')}
            Icon={MenuClose}
            onClick={close}
            noShrinkX
            dense
          />
        )}
      </Row>
      <div className={tabsCss} ref={tabsPortalRef} />
      {headerContent && <div className={headerContentCss}>{headerContent}</div>}
    </Bleedable>
  )
}

export default InfoSheetHeader
