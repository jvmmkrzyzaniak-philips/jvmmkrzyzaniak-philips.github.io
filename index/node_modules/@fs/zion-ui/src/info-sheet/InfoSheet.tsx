import React, { useCallback, useState, useRef, useEffect } from 'react'
import { createPortal } from 'react-dom'
import { usePageWidth } from '../responsive'
import { ParentInfoSheetProvider } from './ParentInfoSheetProvider'
import { useInfoSheetContext, sideSheetSizes } from './InfoSheetProvider'
import BaseInfoSheet, { type InfoSheetBaseProps } from './BaseInfoSheet'
import { type UseInfoSheetReturnOptions } from './useInfoSheet'

type InfoSheetProps = Omit<InfoSheetBaseProps, 'onBackClick' | 'togglePlacement'> & UseInfoSheetReturnOptions

type CleanUpRef = {
  isOpen?: () => void
  nonClosable?: () => void
  toggle?: () => void
}

const useDisableAutoFocus = (isOpen: boolean, disableAutoFocus: boolean): boolean => {
  const firstRenderRef = useRef(true)
  const [definitelyDisableAutoFocus, setDefinitelyDisableAutoFocus] = useState(isOpen || disableAutoFocus)
  useEffect(() => {
    if (!firstRenderRef.current) {
      setDefinitelyDisableAutoFocus(disableAutoFocus)
    } else firstRenderRef.current = false
    // initially open should only disable autofocus on first render
    // so we watch isOpen to turn off disableAutoFocus when the infosheet is closed
  }, [isOpen, disableAutoFocus])
  return definitelyDisableAutoFocus
}

/**
 * ### _Provides supplementary information to the main content. It appears on the right side or bottom of the window._
 *
 * One must use `useInfoSheet` to consume an InfoSheet. An affordance (Button, IconButton, ActionChip) should be used to show and hide the infosheet.
 */
const InfoSheet = ({
  children,
  size = 'sm',
  dockable = false,
  disableAutoFocus = false,
  nonClosable = false,

  // From useInfoSheet
  isOpen,
  open,
  close,
  transitioning,
  isBottomSheet,
  setIsBottomSheet,
  bottomSheetHeight,
  setBottomSheetHeight,

  ...props
}: InfoSheetProps): JSX.Element => {
  const [togglingPlacement, setTogglingPlacement] = useState(false)
  const cleanUpRef = useRef<CleanUpRef>({})
  const togglingPositionRef = useRef(false)

  const definitelyDisableAutoFocus = useDisableAutoFocus(isOpen, disableAutoFocus)

  const [panelPortalDiv, setPanelPortalDiv] = useState<HTMLDivElement | undefined>(
    document ? document.createElement('div') : undefined
  )
  const panelPortalRef = useCallback(setPanelPortalDiv, [setPanelPortalDiv])

  const { sheetPortalDiv, updateInfoSheet, closingCurrentInfoSheet, registerNonClosableSheet } = useInfoSheetContext()

  const sizeBreakpointMap = { sm: 'md', md: 'lg', lg: 'lg' }
  const isMobile = usePageWidth()({ default: true, [sizeBreakpointMap[size]]: false })
  const isDefinitelyBottomSheet = isMobile || isBottomSheet
  // The size of the sheet (width *or* height, depending on sheet placement)
  const sheetSize = !isDefinitelyBottomSheet ? sideSheetSizes[size] : bottomSheetHeight

  // Register/UnRegister nonClosable Infosheet
  useEffect(() => {
    if (nonClosable) {
      registerNonClosableSheet(open)
      cleanUpRef.current.nonClosable = () => registerNonClosableSheet(null)
    } else {
      cleanUpRef.current.nonClosable?.()
      cleanUpRef.current.nonClosable = null
    }
  }, [nonClosable, open, registerNonClosableSheet])

  // UpdateInfoSheet
  useEffect(() => {
    if (isOpen) {
      updateInfoSheet?.({ size, isBottomSheet: isDefinitelyBottomSheet, close, bottomSheetHeight })
      cleanUpRef.current.isOpen = () => closingCurrentInfoSheet(close)
    } else {
      cleanUpRef.current.isOpen = null
    }
  }, [isOpen, size, isDefinitelyBottomSheet, close, updateInfoSheet, closingCurrentInfoSheet, bottomSheetHeight])

  // Close InfoSheet
  useEffect(() => {
    if (!isOpen && !transitioning) {
      closingCurrentInfoSheet(close)
    }
  }, [isOpen, close, closingCurrentInfoSheet, transitioning])

  // Clean Up
  useEffect(
    () => () => {
      cleanUpRef.current.nonClosable?.()
      cleanUpRef.current.isOpen?.()
      cleanUpRef.current.toggle?.()
    },
    []
  )

  // TOGGLE PLACEMENT PART 1 - Switch the toggling flag on and close the infosheet
  const togglePlacement = (): void => {
    togglingPositionRef.current = true
    // If the infosheet is nonClosable, we need to unregister it in order to close it
    if (nonClosable) registerNonClosableSheet(null)
    // prevent the nonClosable infosheet from being automatically opened during the transition
    closingCurrentInfoSheet(close, togglingPositionRef.current)
    close()
  }

  // TOGGLE PLACEMENT PART 2 - Once it's done transitioning closed, reopen it in the new position
  useEffect(() => {
    if (togglingPositionRef.current && !transitioning && !isOpen) {
      setIsBottomSheet(!isDefinitelyBottomSheet)
      togglingPositionRef.current = false
      // Disabling the animation for an event cycle lets InfoSheetSlider reposition itself so it can slide into it's new position
      // Otherwise, it slides in from the position it was set to when closing (i.e. toggling from bottom to side makes the sidesheet slide up, instead of from the right)
      setTogglingPlacement(true)
      const togglePartThree = requestAnimationFrame(() => {
        // Re-enable animation so it will slide in
        setTogglingPlacement(false)
        // reregister the nonClosable infosheet because it had to be unregistered to close
        if (nonClosable) registerNonClosableSheet(open)
        else open()
      })
      cleanUpRef.current.toggle?.()
      cleanUpRef.current.toggle = () => cancelAnimationFrame(togglePartThree)
    }
  }, [
    close,
    closingCurrentInfoSheet,
    isDefinitelyBottomSheet,
    isOpen,
    nonClosable,
    open,
    registerNonClosableSheet,
    setIsBottomSheet,
    transitioning,
  ])

  return createPortal(
    <ParentInfoSheetProvider
      bottomSheetHeight={bottomSheetHeight}
      close={close}
      isBottomSheet={isDefinitelyBottomSheet}
      isOpen={isOpen}
      nonClosable={nonClosable}
      panelPortalDiv={panelPortalDiv}
      setBottomSheetHeight={setBottomSheetHeight}
      sheetSize={sheetSize}
      togglingPlacement={togglingPlacement}
      transitioning={transitioning}
    >
      <BaseInfoSheet
        disableAutoFocus={definitelyDisableAutoFocus}
        dockable={dockable && !isMobile}
        isBottomSheet={isDefinitelyBottomSheet}
        isOpen={isOpen}
        nonClosable={nonClosable}
        panelPortalRef={panelPortalRef}
        sheetSize={sheetSize}
        togglePlacement={togglePlacement}
        transitioning={transitioning}
        {...props}
      >
        {children}
      </BaseInfoSheet>
    </ParentInfoSheetProvider>,
    sheetPortalDiv
  )
}

export default InfoSheet
