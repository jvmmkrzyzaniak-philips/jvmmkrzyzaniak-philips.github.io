import type { HTMLAttributes, PropsWithChildren } from 'react'
import React from 'react'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { animated, useSpring } from '@react-spring/web'
import { css, cx } from '@linaria/core'
import { colors } from '../theme'
import { useParentInfoSheet } from './ParentInfoSheetProvider'
import { textDirection } from '../rtl-support'
import { elevationBaseCss, e8 } from '../elevation'

const animatedCss = css`
  @media print {
    position: absolute !important;
    height: auto !important;
    bottom: unset !important;
  }
`

export const sliderCss = css`
  display: flex;
  flex-direction: column;
  background: ${colors.gray00};
  height: 100%;
  width: 100%;

  @media print {
    height: auto;
  }
`

export const bottomBoxShadowCss = css`
  box-shadow:
    0px -5px 5px -3px rgba(0, 0, 0, 0.1),
    0px -8px 10px 1px rgba(0, 0, 0, 0.07),
    0px -3px 14px 2px rgba(0, 0, 0, 0.06);
`

type InfoSheetSliderProps = PropsWithChildren<{
  isBottomSheet: boolean
  sheetSize: number
  isOpen: boolean
  transitioning: boolean
  onTransitioned?: () => void
  elevated: boolean
}> &
  Omit<HTMLAttributes<HTMLDivElement>, 'className' | 'style'>

const InfoSheetSlider = ({
  children,
  isBottomSheet,
  sheetSize,
  isOpen,
  transitioning,
  onTransitioned,
  elevated,
  ...props
}: InfoSheetSliderProps): JSX.Element => {
  const slideDistance = isOpen ? 0 : sheetSize + 50
  const slideXDistance = !isBottomSheet ? slideDistance : 0
  const slideYDistance = isBottomSheet ? slideDistance : 0
  const direction = textDirection() === 'ltr' ? 1 : -1

  const { togglingPlacement } = useParentInfoSheet()

  const animStyles = useSpring({
    transform: `translate(${slideXDistance * direction}px, ${slideYDistance}px)`,
    // "right: 0" and "bottom: 0" needed to keep the slider right/bottom-positioned, so the spacer changing size doesn't reposition the infosheet
    insetInlineEnd: 0,
    bottom: 0,
    config: {
      tension: 250,
      mass: 0.5,
    },
    immediate: togglingPlacement,
    // This will handle setting the "transitioning" value from useInfoSheet > useOverlay
    onRest: onTransitioned,
  })

  if (!isOpen && !transitioning) return null

  return (
    <animated.aside
      {...sanitizeProps(props)}
      style={{
        ...animStyles,
        width: !isBottomSheet ? sheetSize : '100%',
        height: isBottomSheet ? sheetSize : '100%',
        maxWidth: !isBottomSheet ? 'calc(100vw - 20px)' : undefined,
        maxHeight: isBottomSheet ? 'var(--page-content-height)' : undefined,
        position: 'absolute',
        zIndex: 2,
      }}
      className={animatedCss}
    >
      <div
        className={cx(
          sliderCss,
          elevationBaseCss,
          isBottomSheet ? bottomBoxShadowCss : '',
          elevated && !isBottomSheet ? e8 : ''
        )}
        data-bottomsheet={isBottomSheet}
        data-elevated={elevated}
        style={{
          borderInlineStart: !isBottomSheet && !elevated ? `solid 1px ${colors.transparent.gray10}` : 'none',
          borderRadius: isBottomSheet ? '12px 12px 0 0' : '0',
        }}
      >
        {children}
      </div>
    </animated.aside>
  )
}

export default InfoSheetSlider
