import type { ReactNode, Ref } from 'react'
import React, { useRef, forwardRef } from 'react'
import { css } from '@linaria/core'
import { useForwardRef } from '@fs/zion-frontend-friends'
import InfoSheetHeader, { type InfoSheetHeaderProps } from './InfoSheetHeader'
import InfoSheetFooter from './InfoSheetFooter'
import InfoSheetSlider from './InfoSheetSlider'
import BorderScroller from '../border-scroller'
import { Bleedable } from '../bleed'
import { GridStart } from '../grid'
import { ResponsiveProvider } from '../responsive'
import TabsPortalProvider from '../tabs/TabsPortalProvider'
import { LayoutBandContext } from '../layout-band/LayoutBand'
import useAutoFocus from '../use-auto-focus'
import useA11yLabelRef from '../use-a11y-ref-label'
import { useOnClose } from '../overlay'
import { type UseInfoSheetReturnOptions } from './useInfoSheet'

const fullHeightCss = css`
  display: grid;
  grid-template-rows: auto 1fr auto;
  grid-template-columns: 100%;
  height: 100%;
  width: 100%;
  overflow: hidden;
  border-radius: inherit;
`

const contentWrapper = css`
  display: flex;
  flex-direction: column;
  overflow: hidden;
`

type InfoSheetContentProps = {
  children: ReactNode
}

const getHeader = (container: HTMLElement): HTMLElement => container.querySelector('header')

// exporting for testing purposes (not public)
export const InfoSheetContent = forwardRef<HTMLDivElement, InfoSheetContentProps>(
  ({ children }, ref): JSX.Element => (
    // The ResponsiveProvider needs to be outside of the BorderScroller or else content that has width-based heights (i.e. using --cell-width or --grid-width
    // values to determine height) will cause stroby resize loops at certain sizes due to the scrollbar changing the width of the ResponsiveProvider when it appears/disappears. (ZIONUI-1398)
    // NOTE: We have tried other methods (mainly trying to keep --cell-width and --grid-width consistent) to counteract this, but they both came with caveats.
    //  1. using negative margins makes the scrollbar overlap the content if there isn't enough margin.
    //  2. Adding the width of the scrollbar to the overlays is doable, but it is complicated, hard to maintain, can still behave a bit wonky sometimes.
    <ResponsiveProvider ref={ref} className={contentWrapper}>
      <BorderScroller>
        <Bleedable sides={16} top={8} bottom={16}>
          <GridStart>
            {/* We don't want LayoutBand to act as a ResponsiveProvider (or allow MaxWidth) when it's a regular side-sheet */}
            <LayoutBandContext.Provider value>{children}</LayoutBandContext.Provider>
          </GridStart>
        </Bleedable>
      </BorderScroller>
    </ResponsiveProvider>
  )
)

export type InfoSheetBaseProps = Omit<InfoSheetHeaderProps, 'tabsPortalRef' | 'labelRef'> & {
  /** Label for assistive technologies */
  'aria-label'?: string

  /** Size of the Side Sheet */
  size?: 'sm' | 'md' | 'lg'

  /**
   * Disables auto-focus behavior when the sheet is opened.
   * @default false
   */
  disableAutoFocus?: boolean

  /** If true, a button will be shown in the header that will toggle the sheet's position. */
  dockable?: boolean

  /**
   * Enables elevation for the side sheet.
   *
   * **Do not enable unless**:
   * - You're putting this InfoSheet next to something that zooms and pans (like ImageViewer a pedigree view, or a map)
   * - You wish to signify that the InfoSheet has greater importance than the rest of the page.
   * @default false
   */
  elevated?: boolean

  /**
   * If you want the InfoSheet to focus on something specific pass a ref to it here. Must be something focusable
   * like a `<button>`, `<input>`, `<select>`, etc.
   */
  focusRef?: Ref<HTMLElement>

  /** Footer content. */
  footer?: ReactNode

  /** Function to call when the sheet is closed. */
  onClose?: () => void

  /** The contents of the InfoSheet */
  children?: ReactNode
}

type Props = Omit<
  UseInfoSheetReturnOptions,
  'open' | 'close' | 'bottomSheetHeight' | 'setBottomSheetHeight' | 'setIsBottomSheet'
> &
  Omit<InfoSheetBaseProps, 'size'> & {
    /** A ref to use for adding sub-panels to this InfoSheet */
    panelPortalRef?: Ref<HTMLDivElement>

    /** Whether to set a role on this InfoSheet */
    role?: string

    /** The pixel-width, or pixel-height when a bottom sheet, of the InfoSheet */
    sheetSize: number
  }

const BaseInfoSheet = forwardRef<HTMLDivElement, Props>(
  (
    {
      'aria-label': ariaLabel,
      busy,
      children,
      closeLabel,
      disableAutoFocus = false,
      dockable,
      elevated = false,
      focusRef,
      footer,
      handleTransitioned,
      headingColor,
      headerContent,
      isBottomSheet,
      isOpen,
      nonClosable = false,
      onBackClick,
      onClose,
      panelPortalRef,
      subtitle,
      title,
      avatar,
      togglePlacement,
      transitioning,

      // Ignored from useOverlay
      handleClick, // eslint-disable-line @typescript-eslint/no-unused-vars -- not needed, ignored,
      focusBackRef, // eslint-disable-line @typescript-eslint/no-unused-vars -- not needed, ignored,
      targetRef, // eslint-disable-line @typescript-eslint/no-unused-vars -- not needed, ignored,

      ...props
    },
    ref
  ): JSX.Element => {
    const tabsPortalRef = useRef<HTMLDivElement>(null)
    const containerRef = useForwardRef(ref)

    const [a11yLabel, labelRef] = useA11yLabelRef(ariaLabel)

    useAutoFocus({
      isOpen,
      enabled: !disableAutoFocus,
      focusRef,
      containerRef,
      whatToFocusInContainer: getHeader,
    })

    // onClose handler
    useOnClose({
      isOpen,
      transitioning,
      onClose,
    })

    return (
      <InfoSheetSlider
        {...props}
        isBottomSheet={isBottomSheet}
        isOpen={isOpen}
        transitioning={transitioning}
        onTransitioned={handleTransitioned}
        elevated={elevated}
        aria-label={a11yLabel}
      >
        <ResponsiveProvider className={fullHeightCss} ref={containerRef}>
          <TabsPortalProvider location={tabsPortalRef}>
            <InfoSheetHeader
              avatar={avatar}
              title={title}
              subtitle={subtitle}
              headerContent={headerContent}
              closeLabel={closeLabel}
              isBottomSheet={isBottomSheet}
              transitioning={transitioning}
              togglePlacement={dockable ? togglePlacement : undefined}
              nonClosable={nonClosable}
              headingColor={headingColor}
              onBackClick={onBackClick}
              busy={busy}
              tabsPortalRef={tabsPortalRef}
              labelRef={labelRef}
            />

            <InfoSheetContent>{children}</InfoSheetContent>

            {footer && <InfoSheetFooter>{footer}</InfoSheetFooter>}
          </TabsPortalProvider>

          {/* Panels go into this portal */}
          {panelPortalRef && <div ref={panelPortalRef} data-portal="InfoSheet Panels" />}
        </ResponsiveProvider>
      </InfoSheetSlider>
    )
  }
)

export default BaseInfoSheet
