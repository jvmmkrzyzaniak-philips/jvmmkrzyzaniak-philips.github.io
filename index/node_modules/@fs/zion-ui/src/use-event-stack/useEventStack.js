import React, { useContext, useEffect, useCallback } from 'react'
import PropTypes from 'prop-types'

export default ({ Context, handlerRef, enabled }) => {
  const state = useContext(Context)

  const addHandler = useCallback(() => {
    const handlers = state.current.stack
    if (!handlers.includes(handlerRef)) {
      state.current.stack = [handlerRef, ...handlers]
    }
  }, [state, handlerRef])

  const removeHandler = useCallback(() => {
    const handlers = state.current.stack
    if (handlers.includes(handlerRef)) {
      state.current.stack = handlers.filter((hRef) => hRef !== handlerRef)
    }
  }, [state, handlerRef])

  useEffect(() => {
    if (state === null) {
      const { hookName } = Context
      console.error(
        `It looks like you're trying to use a Zion component without wrapping it in a "Providers" component, which is needed in order for ${hookName} to work properly.`
      )
      return () => {}
    }

    if (enabled) {
      addHandler()
    } else if (!enabled) {
      removeHandler()
    }
    return () => {
      removeHandler()
    }
  }, [enabled, addHandler, removeHandler, state, Context])
}

// This is just a dummy component so that we can use propTypes to make things easier to document
export const HookParameters = (props) => <div {...props} />

const DomElement = typeof Element === 'undefined' ? () => {} : Element

HookParameters.propTypes = {
  /** The Context specific to the event you wish to stack. See ClickAwayProvider or EscHandlerProvider for examples. */
  Context: PropTypes.object.isRequired,

  /** If true, the handler will be added to the bottom of the stack. */
  enabled: PropTypes.bool.isRequired,

  /** Ref whose value is the handler function to be ran. This allows hot-updates to the handler without re-rendering everything needlessly, since the event listeners are attached direcetly to the dom. */
  handlerRef: PropTypes.oneOfType([
    // Either a function
    PropTypes.func,
    // Or the instance of a DOM native element
    PropTypes.shape({ current: PropTypes.instanceOf(DomElement) }),
  ]).isRequired,
}
