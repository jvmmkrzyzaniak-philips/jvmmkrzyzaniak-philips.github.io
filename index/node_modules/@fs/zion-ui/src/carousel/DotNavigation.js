import React, { useState, useEffect } from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import { colors } from '../theme'

const wrapperCSS = css`
  padding: 11px 8px;
  background-color: #212225;
  border-radius: 32px;
  display: flex;
  justify-content: center;
  align-items: center;
`

const dotCss = css`
  border-radius: 50%;
  background-color: ${colors.gray70};
  transition: all 0.5s;
  margin: 0px 4px;
  &[featured] {
    background-color: var(--dot-featured-color);
  }

  &[bigness='3'] {
    width: 8px;
    height: 8px;
  }
  &[bigness='2'] {
    width: 4px;
    height: 4px;
  }
  &[bigness='1'] {
    width: 2px;
    height: 2px;
  }
  &[bigness='0'] {
    width: 0px;
    height: 0px;
  }
  &[bigness='-1'] {
    display: none;
    width: 0px;
    height: 0px;
  }
`

export function getDotState(currentDots, total, current, movementType) {
  if ((movementType === 'next' || movementType === 'previous') && currentDots[current] === 3) {
    return null
  }
  if (movementType === 'next') {
    return getFreshDots(total, current, 5)
  }
  if (movementType === 'previous') {
    return getFreshDots(total, current, 3)
  }
  return getFreshDots(total, current, 4)
}

function getFreshDots(total, current, highlightedIndex) {
  const newDots = new Array(total).fill(-1)
  const order = [0, 1, 2, 3, 3, 3, 2, 1, 0]
  if (current === 0) {
    for (let index = 0; index < total && index < 6; index++) {
      newDots[index] = order[index + 3]
    }
  } else if (current === total - 1) {
    let currentOrderIndex = 5
    for (let index = current; index >= 0 && currentOrderIndex >= 0; index--) {
      newDots[index] = order[currentOrderIndex]
      currentOrderIndex--
    }
  } else {
    const startingDotsIndex = current >= highlightedIndex ? current - highlightedIndex : 0
    const startingOrderIndex = current > highlightedIndex ? 0 : highlightedIndex - current
    for (
      let index = 0;
      startingOrderIndex + index < order.length && startingDotsIndex + index < newDots.length;
      index++
    ) {
      newDots[startingDotsIndex + index] = order[startingOrderIndex + index]
    }
  }
  return newDots
}

function getNext(current, total) {
  return (current + 1) % total
}
function getPrevious(current, total) {
  return current === 0 ? total - 1 : current - 1
}

export default function DotNavigation({ index = 0, length, featuredColor }) {
  const [dots, setDots] = useState([])
  const [previousCurrent, setPreviousCurrent] = useState()
  const [dotIds, setDotIds] = useState([])

  useEffect(() => {
    function createRandomId() {
      return Math.random()
        .toString(36) // base-36 means generate digits from 0-9 and a-z
        .substr(2) // get rid of the "0." at the beginning of the number
    }
    const newDotIds = new Array(length).fill(null)
    setDotIds(newDotIds.map(() => createRandomId()))
  }, [length])

  useEffect(() => {
    if (index === previousCurrent) {
      return
    }
    let movementType = 'select'
    if (getNext(previousCurrent, length) === index) {
      movementType = 'next'
    } else if (getPrevious(previousCurrent, length) === index) {
      movementType = 'previous'
    }
    const refactoredDots = getDotState(dots, length, index, movementType)
    if (refactoredDots) {
      setDots(refactoredDots)
    }
    setPreviousCurrent(index)
  }, [index, dots, previousCurrent, length])

  const renderedDots =
    dotIds.length === length &&
    dots.map((dot, idx) => (
      <Dot size={dot} featured={idx === index} key={`dot-${dotIds[idx]}`} featuredColor={featuredColor} />
    ))

  return <div className={wrapperCSS}>{renderedDots}</div>
}

const Dot = ({ size, featured = false, featuredColor = '#f7f8f8' }) => (
  <span
    className={dotCss}
    style={{ '--dot-featured-color': featuredColor }}
    bigness={size}
    featured={boolAttr(featured)}
  />
)

DotNavigation.propTypes = {
  /** How many slides there are */
  length: PropTypes.number.isRequired,
  /** What slide you are currently on. Defaults to 0. */
  index: PropTypes.number,
  /** Allows you to choose what color the active dot should be. */
  featuredColor: PropTypes.string,
}
