import type { ReactNode } from 'react'
import React, { forwardRef } from 'react'
import { cx } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import { ThemeContext, useTheme } from './ThemeContext'
import day from './day'
import night from './night'
import { blueTheme } from './themeSubsets'
import { WhiteThemeContext } from './white-theme'
import type { PolymorphicRef, PolymorphicComponentPropsWithRef } from '../polymorphic-prop-types'

type ThemeType = 'day' | 'night'

type Props = {
  /** The desired theme. Choosing 'complementary' will swap to a different theme.
   * Choosing 'current' will generate a div with the current theme attached (useful for overlays)
   */
  theme?: 'current' | 'complementary' | ThemeType

  /** In some cases you want a theme to not have a background. Use this to make it transparent */
  transparent?: boolean

  /** Any extra styling as needed */
  className?: string

  /** Content to be wrapped in Theme */
  children: ReactNode
}

type ThemeProps<C extends React.ElementType> = PolymorphicComponentPropsWithRef<C, Props>

const Theme = forwardRef(
  <C extends React.ElementType = 'div'>(
    { as, theme = 'current', transparent = false, className, ...props }: ThemeProps<C>,
    ref: PolymorphicRef<C>
  ) => {
    const TagName = as || 'div'
    const contextTheme = useTheme()
    let current: ThemeType

    switch (theme) {
      case 'current':
        current = contextTheme
        break

      case 'complementary':
        current = contextTheme === 'day' ? 'night' : 'day'
        break

      case 'day':
        current = 'day'
        break

      case 'night':
        current = 'night'
        break

      default:
        throw new Error(`Unrecognized theme: ${theme}`)
    }

    return (
      <ThemeContext.Provider value={current}>
        <WhiteThemeContext.Provider value={false}>
          <TagName
            ref={ref}
            {...props}
            className={cx(current === 'day' ? day : night, blueTheme, className)}
            transparent={boolAttr(transparent)}
          />
        </WhiteThemeContext.Provider>
      </ThemeContext.Provider>
    )
  }
)

export default Theme
