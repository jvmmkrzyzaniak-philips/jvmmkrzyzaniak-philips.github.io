import React, { forwardRef, memo, useMemo } from 'react'
import { css } from '@linaria/core'
import { useRandomId, boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'
import { ContentCheck } from '@fs/zion-icon'
import PropTypes from 'prop-types'
import _debounce from 'lodash.debounce'
import InputLabel from '../input-label'
import { colors } from '../theme'

const containerCss = css`
  display: flex;
  min-height: 36px;
  padding-top: 8px;
  position: relative;
  cursor: pointer;
  height: max-content;
  pointer-events: none;
  margin: 0;
  margin-inline-end: 8px;

  /* The checkboxCss is already using :before and :after */
  &::before {
    content: '';
    position: absolute;
    width: 36px;
    height: 36px;
    margin: -8px;
    border-radius: 100%;
    transition: background 0.3s;
    cursor: initial;
  }

  &:not([isdisabled]):hover:before {
    background: ${colors.transparent.blue03};
  }

  &:not([isdisabled]):has(:focus-visible):before,
  &:not([isdisabled]):active:before {
    background: ${colors.transparent.blue05};
  }

  &[isdisabled] {
    *,
    & {
      cursor: not-allowed;
    }
  }

  @supports not selector(:has(:focus-visible)) {
    &:not([isdisabled]):focus-within:before {
      background: ${colors.transparent.blue05};
    }
  }
`

const inputCss = css`
  opacity: 0;
  margin: 0;
  height: 20px;
  width: 20px;
  position: absolute;
  cursor: pointer;
  &:not([isdisabled]) {
    pointer-events: auto;
  }
`

const checkboxCss = css`
  appearance: none;
  cursor: pointer;
  height: 20px;
  width: 20px;
  /* disabling pointer-events lets the click apply to the checkbox, not the fake one layering over it */
  pointer-events: none;
  cursor: pointer;

  /* Remove the default focus halo */
  &:focus {
    outline: none;
  }

  /* This is the white backdrop for when the box is un-checked */
  &::before {
    content: '';
    display: block;
    position: absolute;
    top: 8px;
    border: solid 1px ${colors.gray100};
    height: 20px;
    width: 20px;
    background: ${colors.gray00};
    border-radius: 4px;
  }

  /* Build the checkbox */
  &[data-checked='mixed']::after,
  &::after {
    content: '';
    display: block;
    height: 20px;
    width: 20px;
    background: ${colors.blue50};
    border-color: ${colors.blue70};

    /* These are animated */
    border-radius: 50%;
    opacity: 0;
    transform: scale(0);
    transition: all 0.2s ease-out;
  }

  /* When checked, grow the checkbox checkbox from nothing */
  &[data-checked='mixed']::after,
  input:checked + &::after {
    border-radius: 3px;
    opacity: 1;
    transform: scale(1);
  }

  /* When about to be checked, grow the checkbox a little */
  input:not(disabled):active + &::after {
    border-radius: 25%;
    transform: scale(0.5);
    opacity: 0.5;
  }
  input:not(disabled):checked:active + &::after {
    border-radius: 4px;
    transform: scale(1);
    opacity: 0.5;
  }

  /* DISABLED */
  input:disabled + &::after {
    border-color: ${colors.gray20};
  }
  input:checked:disabled + &::after {
    border-color: ${colors.gray20};
    background: ${colors.gray20};
  }

  /* Checkbox disabled colors */
  input:disabled + &::before {
    border-color: ${colors.gray20};
  }
`

const checkmarkCss = css`
  pointer-events: none;
  position: absolute;
  margin: 0;
  margin-top: -0.5px;
  margin-inline-start: 1.5px;
  color: ${colors.gray02};
  width: 18px;
  line-height: 16px;
  font-size: 19px;
  text-align: center;

  input[aria-checked='mixed'] ~ & {
    margin-top: 1px;
    margin-inline-start: 1px;
  }
`

const labelContainerCss = css`
  height: max-content;
  min-width: 0;
  [isdisabled] > & {
    pointer-events: none;
  }
  line-height: 20px;
  margin-top: -2px;
  padding: 0;
  & label {
    padding: 0;
    padding-inline-start: 8px;
    &:not([isdisabled]) {
      pointer-events: auto;
    }
  }
`

const CheckboxComponent = forwardRef(
  (
    {
      checked = false,
      value,
      onChange,
      debounce = 300,
      onBlur,
      label,
      disabled,
      id,
      name,
      ellipses = false,

      /** [SCRUBBED]: Don't pass on to children */
      warningValidate,

      /** [HIDDEN]: For internal Zion-UI use only */
      mixedState,
      isInForm, // used by @fs/zion-form

      ...props
    },
    ref
  ) => {
    const checkboxId = useRandomId(id)

    const ariaChecked = mixedState ? 'mixed' : checked.toString()

    // since Checkbox is re-rendered every time it gets clicked,
    // we have to cache the application returned by _debounce
    const debouncedOnChange = useMemo(
      () => (debounce > 0 ? onChange && _debounce(onChange, debounce, { leading: true, trailing: false }) : onChange),
      [onChange, debounce]
    )

    return (
      <div className={containerCss} isdisabled={boolAttr(disabled)}>
        {/* CHECKBOX */}
        <input
          {...sanitizeProps(props)}
          data-interactive="true"
          onChange={debouncedOnChange}
          onBlur={onBlur}
          name={name}
          type="checkbox"
          value={value}
          checked={isInForm ? undefined : checked}
          id={checkboxId}
          disabled={disabled}
          className={inputCss}
          aria-checked={isInForm ? undefined : ariaChecked}
          ref={ref}
        />
        <span aria-hidden className={checkboxCss} data-checked={isInForm ? undefined : ariaChecked} />

        {/* CHECKMARK or mixed state */}
        {(checked || mixedState) && (
          <div className={checkmarkCss} aria-hidden>
            {checked ? <ContentCheck size="xs" /> : <>&ndash;</>}
          </div>
        )}

        {/* LABEL */}
        {label && (
          <div className={labelContainerCss}>
            <InputLabel
              disabled={disabled}
              htmlFor={checkboxId}
              ellipses={ellipses}
              nextToInput
              aria-hidden={props['aria-hidden']} // used by Skeletons
            >
              {label}
            </InputLabel>
          </div>
        )}
      </div>
    )
  }
)

const Checkbox = memo(CheckboxComponent)

export default Checkbox

export const meta = {
  name: 'Checkbox',
  isZionFormComponent: true,
  noValidation: true,
}

Checkbox.meta = meta

CheckboxComponent.propTypes = {
  /** Whether or not the checkbox is currently checked. */
  checked: PropTypes.bool,

  /** Disables the checkbox. */
  disabled: PropTypes.bool,

  /** Very optional - ID for the checkbox. One is generated if not supplied. */
  id: PropTypes.string,

  /** The label text for the checkbox.  JSX is allowed, but please don't use for anything except links. */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),

  /** [REQUIRED IN ZIONFORM] - Descriptor for the checkbox. This is the key used to identify the checkbox value in forms. */
  name: PropTypes.string.isRequired,

  /** [REQUIRED OUTSIDE OF ZIONFORM] - Handler function that runs each time the checkbox is focused/unfocused. */
  onBlur: PropTypes.func,

  /** [REQUIRED OUTSIDE OF ZIONFORM] - Handler function that runs each time the checkbox is checked/unchecked. */
  onChange: PropTypes.func,

  /** Wait time to debounce */
  debounce: PropTypes.number,

  /** The value associated with this checkbox. */
  value: PropTypes.any,

  /** Whether or not to ellipses the label */
  ellipses: PropTypes.bool,
}
