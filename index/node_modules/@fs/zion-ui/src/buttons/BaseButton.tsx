import React, { useContext, forwardRef, useMemo, type ElementType } from 'react'
import { css, cx } from '@linaria/core'
import { trackEvent } from '@fs/zion-analytics'
import { Link } from '@fs/zion-router'
import { boolAttr, useEvent } from '@fs/zion-frontend-friends'
import _debounce from 'lodash.debounce'
import { WhiteThemeContext } from '../theme/white-theme'
import type { BaseButtonProps } from './types'
import type { PolymorphicComponentPropsWithRef, PolymorphicRef } from '../polymorphic-prop-types'

const baseButtonCss = css`
  text-align: start;
  user-select: text; // Standardize text selection of buttons across all browsers (EAACOMPL-17)
  &[aria-disabled='true'] {
    cursor: not-allowed;
  }
`

// Allow for links to be "disabled". Allow for the href to be set so that the
// link can be copied and pasted - but not navigated to.
const preventNavigationWhenDisabled = (evt: React.MouseEvent<HTMLAnchorElement, MouseEvent>): void => {
  evt.preventDefault()
  evt.stopPropagation()
}

const BaseButton = forwardRef(
  <C extends ElementType = 'button'>(
    {
      as,
      to,
      type = to ? undefined : 'button',
      linkName,
      children,
      onClick,
      className,
      disabled = false,
      external = false,
      noScrollTop,
      role,

      // There has been some disagreement as to whether this should be throttling.
      // I hereby declare that is most certainly (and verifiably) `debounce`.
      // DO NOT change this debounce to a throttle. That would result in incorrect
      // behavior. Take it up with Kyle West <kyle@familysearch.org> if you disagree,
      // but don't you dare change this back to a throttling.
      debounce = 300, // in ms, this is a tested viable debounce period
      ...props
    }: PolymorphicComponentPropsWithRef<C, BaseButtonProps>,
    ref: PolymorphicRef<C>
  ): JSX.Element => {
    // React Router uses a 'component' prop similar to 'as', when we know to use a Link
    // we have to pass a 'component' prop to the Link instead of the 'as' prop
    const TagName = (to ? Link : as || 'button') as React.ElementType
    const component = to ? as : undefined
    let actualRole = role
    if (!role && TagName !== (to ? Link : 'button')) {
      actualRole = to ? 'link' : 'button'
    }

    const isWhite = useContext(WhiteThemeContext)

    // See this conversation for our reasoning behind this particular
    // debounce implementation:
    // https://github.com/fs-webdev/zion/pull/7346#discussion_r1328845106
    const handleClick = useEvent(onClick)
    const debouncedClick = useMemo(
      () =>
        _debounce(
          (e) => {
            handleClick(e)

            // If linkName was supplied for a non-link button, track it as a click event.
            linkName &&
              !to &&
              trackEvent({
                event_name: 'click_action',
                link_name: linkName,
              })
          },
          debounce,
          { leading: true, trailing: false }
        ),
      [handleClick, debounce, to, linkName]
    )

    const linkProps = to ? { to, noLinkStyles: true, linkName, external, noScrollTop, component } : {}

    return (
      <TagName
        {...props}
        {...linkProps}
        role={actualRole}
        ref={ref}
        type={type}
        className={cx(className, baseButtonCss)}
        data-white={boolAttr(isWhite)}
        // We use `aria-disabled` instead of `disabled` to finesse the interactivity with the
        // element while it is disabled.
        aria-disabled={Boolean(disabled).toString()}
        onClick={disabled ? preventNavigationWhenDisabled : debouncedClick}
        onContextMenu={disabled ? preventNavigationWhenDisabled : props.onContextMenu} // right click menu
        // very rarely used, but you can take any link and drag it into the address bar of the browser
        // to navigate somewhere - we don't want to allow that if the button is disabled
        onDragStart={disabled ? preventNavigationWhenDisabled : props.onDragStart}
      >
        {children}
      </TagName>
    )
  }
)

export default BaseButton
