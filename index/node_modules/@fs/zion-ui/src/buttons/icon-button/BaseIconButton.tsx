import React, { forwardRef } from 'react'
import { css, cx } from '@linaria/core'
import { sanitizeProps, useRandomId } from '@fs/zion-frontend-friends'
import VisuallyHidden from '@reach/visually-hidden'
import BaseButton from '../BaseButton'
import { DescriptionTooltip } from '../../tooltip'
import { colorCss } from '../colorStyles'
import { lowEmphasisCss, highEmphasisCss } from '../emphasisStyles'
import type { BaseIconButtonProps } from '../types'

const iconButtonCss = css`
  --icon-inline-text: 0; /* Remove text-alignment tweak meant for headings/paragraphs */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: middle;
  border-radius: 500px; // Doesn't matter, just needs to not be a percentage and sufficiently large
  width: var(--icon-button-size);
  height: var(--icon-button-size);
  &[data-size='xs'] {
    --icon-button-size: 24px;
  }
  &[data-size='sm'] {
    --icon-button-size: 28px;
  }
  &[data-size='md'] {
    --icon-button-size: 40px;
  }
  &[data-size='lg'] {
    --icon-button-size: 64px;
  }
  &[data-size='xl'] {
    --icon-button-size: 88px;
  }
`
const iconSizes = {
  xs: 'xs',
  sm: 'xs',
  md: 'sm',
  lg: 'md',
  xl: 'lg',
}

const BaseIconButton = forwardRef(
  (
    {
      Icon,
      title,
      emphasis,
      size = 'md',
      iconToggle,
      iconDirection,
      iconReflect,
      description,
      disabledDescription = description,
      disabled,

      /** [HIDDEN]: For internal Zion-UI use only */
      iconColor,
      className,
      tooltipProps,
      ...props
    }: BaseIconButtonProps,
    ref
  ) => {
    const classNames = [colorCss, iconButtonCss, className]
    const randId = useRandomId()
    if (emphasis === 'low' || emphasis === 'medium') {
      classNames.push(lowEmphasisCss)
    } else {
      classNames.push(highEmphasisCss)
    }

    return (
      <DescriptionTooltip
        // listed at top to avoid overriding other props
        {...tooltipProps}
        label={title}
        description={disabled ? disabledDescription : description}
        targetAs={BaseButton}
        targetAsProps={{
          // This needs to be listed BEFORE the `...sanitizeProps(props)`, so that a consumer can provide a custom aria-label` and override it when needed.
          'aria-label': title,
          ...sanitizeProps(props),
          className: cx(...classNames),
          'data-size': size,
          ref,
          'aria-describedby': randId,
          disabled,
        }}
        target={
          <>
            <Icon
              size={iconSizes[size]}
              color={iconColor}
              aria-hidden
              direction={iconDirection}
              reflect={iconReflect}
              toggle={iconToggle}
            />
            {/* `bottom:1px` prevents a weird issue where there is sometimes a lot of unwanted space at the bottom of a page to accommodate rogue VisuallyHidden components */}
            <VisuallyHidden style={{ bottom: '1px' }} id={randId}>
              {description}
            </VisuallyHidden>
          </>
        }
      />
    )
  }
)

BaseIconButton.displayName = 'BaseIconButton'

export default BaseIconButton
