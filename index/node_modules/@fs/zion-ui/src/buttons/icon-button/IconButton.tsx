import React, { forwardRef, useContext } from 'react'
import { cx, css } from '@linaria/core'
import { boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'
import { useTheme } from '../../theme'
import colorThemes from '../../theme/themeSubsets'
import BaseIconButton from './BaseIconButton'
import { WhiteThemeContext } from '../../theme/white-theme'
import {
  lowCss,
  grayHighCss,
  grayHighNightCss,
  highCss,
  highNightCss,
  lightHighCss,
  lightHighNightCss,
  grayLowCss,
  grayLightHighNightCss,
  grayLightHighCss,
} from '../colorStyles'

import type { IconButtonProps } from '../types'

const tuckInIconCss = css`
  margin: 0 var(--tuck-in-size);
  &[data-dense] {
    margin: var(--tuck-in-size);
  }
  &[data-size='xs'] {
    --tuck-in-size: -3px;
  }
  &[data-size='sm'] {
    --tuck-in-size: -5px;
  }
  &[data-size='md'] {
    --tuck-in-size: -8px;
  }
  &[data-size='lg'] {
    --tuck-in-size: -14px;
  }
  &[data-size='xl'] {
    --tuck-in-size: -20px;
  }
`

const IconButton = forwardRef(
  ({ Icon, color: inputColor, emphasis = 'low', title, disabled, dense, ...props }: IconButtonProps, ref) => {
    const theme = useTheme()
    const isWhite = useContext(WhiteThemeContext)
    const color = inputColor ?? (isWhite && ['low', 'medium'].includes(emphasis) ? 'gray' : 'blue')
    let className: string
    switch (emphasis) {
      case 'high':
        if (color === 'gray') {
          className = theme === 'night' ? grayHighNightCss : grayHighCss
        } else {
          className = theme === 'night' ? highNightCss : highCss
        }
        break
      case 'lightHigh':
        if (color === 'gray') {
          className = theme === 'night' ? grayLightHighNightCss : grayLightHighCss
        } else {
          className = theme === 'night' ? lightHighNightCss : lightHighCss
        }
        break
      case 'low': // Fall through, this is default
      default:
        // low emphasis IconButton inside a WhiteTheme shall always be gray (for good contrast)
        className = cx(tuckInIconCss, color === 'gray' ? grayLowCss : lowCss)
        break
    }

    return (
      <BaseIconButton
        {...sanitizeProps(props)}
        disabled={disabled}
        Icon={Icon}
        title={title}
        emphasis={emphasis}
        className={cx(className, !disabled && colorThemes[color])}
        data-dense={boolAttr(dense && emphasis === 'low')}
        ref={ref}
      />
    )
  }
)

export default IconButton
