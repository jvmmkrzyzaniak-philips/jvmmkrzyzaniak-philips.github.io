import type { Ref } from 'react'
import React, { forwardRef, useContext } from 'react'
import { css, cx } from '@linaria/core'
import { boolAttr, sanitizeProps, useForwardRef } from '@fs/zion-frontend-friends'
import { useTheme } from '../../theme'
import { WhiteThemeContext } from '../../theme/white-theme'
import colorThemes from '../../theme/themeSubsets'
import TextAndIconButton from '../TextAndIconButton'
import { colorCss, lowCss, grayLowCss, highCss, grayHighCss, highNightCss, grayHighNightCss } from '../colorStyles'
import { lowEmphasisCss, mediumEmphasisCss, highEmphasisCss } from '../emphasisStyles'
import useSquishyButton from '../useSquishyButton'
import type { ButtonProps } from '../types'
import { textBcss } from '../../typography/typographyStyles'

export const buttonCss = css`
  padding: 11px 16px;
  max-width: 100%;
  text-transform: uppercase;
  height: 40px;
  //This is to prevent the button from shrinking vertically when placed in a flex container
  min-height: 40px;

  &[icon-at-end]:has(svg) {
    padding-inline-end: 12px;
  }

  // This is to line up the baseline of anchor tags with the baseline of buttons and text elements
  a& {
    vertical-align: -14px;
  }
`

const lowEmphasisButtonCss = css`
  padding: 11px 8px;
  margin: 0 -8px;

  // This calculation should use 16px, but an extra pixel prevents always showing the ellipsis in Safari 14 and older
  // Revisit this when we only support iOS 15+
  max-width: calc(100% + 17px); // Need to account for the negative margins

  &[icon-at-end]:has(svg) {
    padding-inline-end: 4px !important;
  }

  [data-dense]& {
    margin: -8px;

    // This is to line up the baseline of anchor tags with the baseline of buttons and text elements
    a& {
      vertical-align: -6px;
    }
  }
`

const Button = forwardRef(
  (
    { emphasis = 'low', fullWidth = false, color: inputColor, children, disabled, dense, ...props }: ButtonProps,
    forwardedRef: Ref<HTMLElement>
  ) => {
    const ref = useForwardRef(forwardedRef)
    const buttonScale = useSquishyButton(ref)

    const theme = useTheme()
    const isWhite = useContext(WhiteThemeContext)
    let color = ['gray', 'blue'].includes(inputColor) ? inputColor : null
    if (!color) color = isWhite && emphasis !== 'high' ? 'gray' : 'blue'
    const classNames = [buttonCss, colorCss, textBcss, colorThemes[color]]

    switch (emphasis) {
      case 'high':
        classNames.push(highEmphasisCss)
        if (color === 'gray') {
          classNames.push(theme === 'night' ? grayHighNightCss : grayHighCss)
        } else {
          classNames.push(theme === 'night' ? highNightCss : highCss)
        }
        break
      case 'medium':
        classNames.push(lowEmphasisCss, mediumEmphasisCss)
        if (color === 'gray') {
          classNames.push(grayLowCss)
        } else {
          classNames.push(lowCss)
        }
        break
      case 'low': // Fall through, this is default
      default:
        classNames.push(lowEmphasisCss, lowEmphasisButtonCss)
        if (color === 'gray') {
          classNames.push(grayLowCss)
        } else {
          classNames.push(lowCss)
        }
    }

    return (
      <TextAndIconButton
        {...sanitizeProps(props)}
        disabled={disabled}
        fullWidth={fullWidth && ['medium', 'high'].includes(emphasis)}
        iconSize="xs"
        className={cx(...classNames)}
        style={{ '--button-scale': buttonScale }}
        data-dense={boolAttr(dense && emphasis === 'low')}
        ref={ref}
      >
        {children}
      </TextAndIconButton>
    )
  }
)

export default Button
