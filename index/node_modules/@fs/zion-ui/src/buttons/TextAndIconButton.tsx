import React, { forwardRef } from 'react'
import { css, cx } from '@linaria/core'

import { boolAttr } from '@fs/zion-frontend-friends'
import TextButton from './TextButton'

import type { TextAndIconButtonProps } from './types'

const buttonCss = css`
  /* Adjustable margins for icons */
  --icon-outside-margin: -4px;
  --icon-inside-margin: 6px;
  border-radius: 4px;

  &[full-width] {
    width: 100%;
    text-align: center;
  }

  &[data-centered] {
    margin: 0 auto !important;
    display: block !important; // Inline-block will prevent this from being centered.
  }
`

export const iconCss = css`
  --icon-inline-text: 0; /* Remove text-alignment tweak meant for headings/paragraphs */
  display: inline-block;
  margin-top: -5px;
  margin-bottom: -2px;
  margin-inline-start: var(--icon-outside-margin);
  margin-inline-end: var(--icon-inside-margin);
  vertical-align: middle;

  [icon-at-end] & {
    margin-inline-start: var(--icon-inside-margin) !important;
    margin-inline-end: max(
      var(--icon-outside-margin),
      0
    ) !important; // Firefox causes overflow to trigger if there are any negative margins at the end
  }
`

export const TextAndIconButton = forwardRef(
  (
    {
      Icon,
      centered,
      className,
      fullWidth,
      iconAtEnd,
      iconDirection,
      iconReflect,
      iconSize,
      iconToggle,
      children,
      ...props
    }: TextAndIconButtonProps,
    ref
  ) => (
    <TextButton
      {...props}
      className={cx(className, buttonCss)}
      text={children}
      full-width={boolAttr(fullWidth)}
      icon-at-end={boolAttr(iconAtEnd)}
      data-centered={boolAttr(centered)}
      ref={ref}
    >
      {iconAtEnd && children}
      {Icon ? (
        <div className={iconCss} aria-hidden="true">
          <Icon size={iconSize} direction={iconDirection} reflect={iconReflect} toggle={iconToggle} />
        </div>
      ) : null}
      {!iconAtEnd && children}
    </TextButton>
  )
)

export default TextAndIconButton
