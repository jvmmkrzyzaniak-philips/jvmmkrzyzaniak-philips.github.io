import { detectOverflow } from '@popperjs/core'
import type { Obj, Modifier } from '@popperjs/core'

// NOTE: Much of this code is copy+pasted from the maxSize modifier.
// The horizontal flipping logic was removed because it wasn't needed.
// https://github.com/atomiks/popper.js/blob/master/src/modifiers/maxSize.js
// https://www.npmjs.com/package/popper-max-size-modifier

const maxHeightModifier: Modifier<'maxHeight', Obj> = {
  name: 'maxHeight',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['offset', 'preventOverflow', 'scrollFlip'],
  fn: function maxHeight({ state, name, options }) {
    const overflow = detectOverflow(state, options)
    const { y } = state.modifiersData.preventOverflow || { y: 0 }
    const { height } = state.rects.popper
    const [basePlacement] = state.placement.split('-')

    const heightProp = basePlacement === 'top' ? 'top' : 'bottom'
    state.modifiersData[name] = {
      height: height - overflow[heightProp] - y,
    }
  },
}

export default maxHeightModifier

export const applyMaxHeight: Modifier<'applyMaxHeight', Obj> = {
  name: 'applyMaxHeight',
  enabled: true,
  phase: 'beforeWrite',
  requires: ['maxHeight'],
  fn: function applyMaxHeight({ state, options: { setMaxHeight } }) {
    if (!state.rects.popper.width || !state.rects.popper.height) return

    const { height } = state.modifiersData?.maxHeight ?? { height: 0 }

    const maxHeight = `${height}px`
    if (setMaxHeight && state.styles.popper.maxHeight !== maxHeight) {
      setMaxHeight({ maxHeight })
      state.styles.popper = {
        ...state.styles.popper,
        maxHeight,
      }
    }
  },
}
