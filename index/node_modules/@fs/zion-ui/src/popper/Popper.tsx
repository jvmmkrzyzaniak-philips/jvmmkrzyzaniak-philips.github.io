import type { MutableRefObject, ReactNode } from 'react'
import React, { forwardRef, useImperativeHandle } from 'react'
import type { Instance } from '@popperjs/core'
import type { Placement } from './usePopper'
import usePopper from './usePopper'

export type PopperProps = {
  /** DOM node to which we attach the Popper. */
  targetRef: MutableRefObject<HTMLElement | null>

  /**
   * Which side of the target to place the overlay.
   *
   * Provide an array of placements to use as backup when the first placement value would render the overlay offscreen.
   */
  placement?: Placement | Placement[]

  /** If true, popper will center the placement. Used for tooltips. */
  centerPlacement?: boolean

  /** [useOverlay state] If true, the popper cleans up its content. */
  isOpen?: boolean

  /** [useOverlay state] If true, the overlay is transitioning in or out. */
  transitioning?: boolean

  /** If true, the Popper will update its position whenever there is an update to its children (i.e. text changes). Use cautiously. */
  updateOnChildrenChange?: boolean

  /** The distance in pixels between Popper and the targetRef */
  distance?: number

  /** The min-width of the popper */
  minWidth?: number

  /** Content inside Popper. */
  children: ReactNode

  /** If true, the popper will be elevated to the overlay stacking context z-index. */
  setMaxHeight?: (h: number) => void

  /** If true, the popper will be elevated to the overlay stacking context z-index. */
  elevatedZIndex?: boolean

  /** The ref that will hold the popper controls. Allows a user to force an update on popper using the instance.update() method */
  instanceRef?: MutableRefObject<Instance | null>
} & React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>

const Popper = forwardRef<HTMLDivElement, PopperProps>(
  (
    {
      targetRef,
      placement = 'end',
      centerPlacement = false,
      isOpen = false,
      transitioning = false,
      updateOnChildrenChange = false,
      distance = 8,
      minWidth,
      setMaxHeight,
      elevatedZIndex = false,
      children,
      instanceRef,
      ...props
    },
    ref
  ) => {
    const popperRef = usePopper({
      isOpen,
      transitioning,
      targetRef,
      placement,
      centerPlacement,
      updateOnChildrenChange,
      setMaxHeight,
      distance,
      instanceRef,
    })

    useImperativeHandle(ref, () => popperRef.current as HTMLDivElement)

    return (
      <div {...props} data-testid="popper" ref={popperRef} style={{ minWidth, zIndex: elevatedZIndex ? 2 : undefined }}>
        {children}
      </div>
    )
  }
)

export default Popper
