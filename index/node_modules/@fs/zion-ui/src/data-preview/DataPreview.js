import React, { createContext, useContext, useState, useEffect, useRef, useMemo } from 'react'
import { css, cx } from '@linaria/core'
import PropTypes from 'prop-types'

const readyCss = css`
  animation: fade-in 0.35s ease-out;

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
`

const DataContext = createContext()

// Provider, Ready, Loading, and Error are exported so props tables in docs will work

export const Provider = ({ children, loading = false, delay = 0, error = false }) => {
  const value = useMemo(() => ({ loading, delay, error }), [delay, error, loading])
  return <DataContext.Provider value={value}>{children}</DataContext.Provider>
}

export const Loading = ({ children, loading: directLoading, delay: directDelay, error: directError }) => {
  const { loading, delay, error } = useContext(DataContext) || {}
  const skelRef = useRef(null)

  // "loading" must be undefined for it to use the context loading value - this is so we don't accidentally use a context when we don't mean to
  const isLoading = typeof directLoading !== 'undefined' ? directLoading : loading
  const loadDelay = directDelay || delay
  const isError = typeof directError !== 'undefined' ? directError : error

  const [hideSkeletons, setHideSkeletons] = useState(!!loadDelay)

  useEffect(() => {
    if (isLoading && loadDelay) {
      setTimeout(() => {
        // Check if we're still mounted
        if (skelRef.current) setHideSkeletons(false)
      }, loadDelay)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isLoading]) // We only want this to run when loading has changed

  return isLoading && !isError ? (
    <div ref={skelRef} className={hideSkeletons ? undefined : readyCss}>
      {hideSkeletons ? null : children}
    </div>
  ) : null
}

export const Ready = ({ children, loading: directLoading, error: directError, className, ...props }) => {
  const { loading, error } = useContext(DataContext) || {}
  const isLoading = directLoading || (directLoading === undefined && loading)
  const isError = directError || (directError === undefined && error)
  // "loading" must be undefined for it to use the context loading value - this is so we don't accidentally use a context when we don't mean to
  return isLoading || isError ? null : (
    <div className={cx(readyCss, className)} {...props}>
      {children}
    </div>
  )
}

export const Error = ({ children, error: directError }) => {
  const { error } = useContext(DataContext) || {}
  const isError = directError || (directError === undefined && error)
  // "error" must be undefined for it to use the context loading value - this is so we don't accidentally use a context when we don't mean to
  return isError ? <div className={readyCss}>{children}</div> : null
}

export default {
  Provider,
  Loading,
  Ready,
  Error,
}

Provider.propTypes = {
  /** Standard children. Anything goes. */
  children: PropTypes.node,

  /** Loading state. This drives whether previews or actual content are shown. */
  loading: PropTypes.bool.isRequired,

  /** Milliseconds. Delays rendering the loading indicators onto the page. Useful when what is being loaded is typically loaded quickly. */
  delay: PropTypes.number,

  /** Error state. This drives whether preview/actual or error content is shown. */
  error: PropTypes.bool,
}

Loading.propTypes = {
  /** The preview to display. This typically displays a loading skeleton. */
  children: PropTypes.node,

  /** Only required if not used inside a "DataPreview.Provider". If used, it will override any provider value (even if false). */
  loading: PropTypes.bool,

  /** Milliseconds. Delays rendering the loading indicators onto the page. Useful when what is being loaded is typically loaded quickly. */
  delay: PropTypes.number,

  /** Only required if not used inside a "DataPreview.Provider". If used, it will override any provider value (even if false). */
  error: PropTypes.bool,
}

Ready.propTypes = {
  /** The actual content to be displayed after loading is finished. */
  children: PropTypes.node,

  /** Only required if not used inside a "DataPreview.Provider". If used, it will override any provider value (even if false). */
  loading: PropTypes.bool,

  /** Only required if not used inside a "DataPreview.Provider". If used, it will override any provider value (even if false). */
  error: PropTypes.bool,
}

Error.propTypes = {
  /** The actual content to be displayed when the error is found. */
  children: PropTypes.node,

  /** Only required if not used inside a "DataPreview.Provider". If used, it will override any provider value (even if false). */
  error: PropTypes.bool,
}
