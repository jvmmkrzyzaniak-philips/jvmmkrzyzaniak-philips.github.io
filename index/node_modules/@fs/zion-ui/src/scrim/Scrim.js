import React, { forwardRef } from 'react'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { colors } from '../theme'
import OpenCloseAnimation from '../open-close-animation'

// nicely fits elements inside the roleIndicator
export const fitContentAreaCss = css`
  position: fixed;
  z-index: 2;
  height: calc(var(--page-content-height) - var(--virtual-keyboard-height));
  top: var(--role-indicator-height, 0px);
  width: calc(100% - var(--role-indicator-border, 0px) * 2); /* roleIndicator left + right borders */
  inset-inline-start: var(--role-indicator-border, 0px);
`

const scrimCss = css`
  background: ${colors.transparent.gray30};

  // Sometimes the Scrim will become very small when a virtual keyboard is opened. This makes sure the Scrim will stay tall enough so that the content of DialogOverlay (which shrinks when the scrim shrinks) will not be squished to invisibility by the overlay's header and footer
  min-height: 220px;
`

const animStyles = {
  openStyles: {
    opacity: 1,
    pointerEvents: 'auto',
  },
  closeStyles: {
    opacity: 0,
    pointerEvents: 'none',
  },
}

/** Provides the kind of moody atmosphere you'd expect to see in an Alfred Hitchcock film (think "The Birds") */
const Scrim = forwardRef(({ isOpen = false }, ref) => {
  return (
    <OpenCloseAnimation isOpen={isOpen} {...animStyles} className={fitContentAreaCss}>
      <div className={cx(fitContentAreaCss, scrimCss)} ref={ref} />
    </OpenCloseAnimation>
  )
})

export default Scrim

Scrim.propTypes = {
  /** If true, the scrim will be visible. */
  isOpen: PropTypes.bool,
}
