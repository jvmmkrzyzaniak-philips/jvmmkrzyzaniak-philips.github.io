import React from 'react'
import { css, cx } from '@linaria/core'
import PropTypes from 'prop-types'
import { skeletonCss } from './BaseSkeleton'
import * as Type from '../typography'

const randomWidths = [0.75, 0.95, 1, 0.8, 0.7, 0.9, 0.85, 0.92, 0.7, 0.77]

function getWidth(seed) {
  return randomWidths[seed % randomWidths.length]
}

const baseTypeSkeletonCss = cx(
  skeletonCss,
  css`
    border-radius: 1000000px;
    display: inline-block;
    height: 0.7em;
  `
)

export function TypeSkeleton({ lineCount = 1, maxWidth = '100%', randomSeed = 0 }) {
  const width = typeof maxWidth === 'number' ? `${maxWidth}px` : maxWidth
  return [...Array(lineCount).keys()].map((index) => (
    <span
      className={baseTypeSkeletonCss}
      key={index}
      style={{ width: `calc(${width}*${getWidth(index + randomSeed)})`, maxWidth: `min(100%, ${width})` }}
    />
  ))
}

// this is used in some instances (like InputBase) to allow for a skeleton to be passed in instead of actual text
TypeSkeleton.identity = 'Skeleton'

TypeSkeleton.propTypes = {
  /** Number of lines of skeleton "text" to display. */
  linesCount: PropTypes.number,

  /** Max width the skeleton should extend to. Useful for limiting skeletons to general sizes. */
  maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
}

function makeHeadingSkeleton(size) {
  return function HeadingSkeleton({
    lineCount = 1,
    hasOverline = false,
    subheadingLineCount = 0,
    maxWidth = '50%',
    ...props
  }) {
    return (
      <Type.GenericHeading {...props} aria-hidden as="span" size={size}>
        {hasOverline && (
          <Type.Overline>
            <TypeSkeleton maxWidth={maxWidth} />
          </Type.Overline>
        )}
        <TypeSkeleton lineCount={lineCount} />
        {subheadingLineCount > 0 && (
          <Type.Subheading>
            <TypeSkeleton lineCount={subheadingLineCount} randomSeed={1} />
          </Type.Subheading>
        )}
      </Type.GenericHeading>
    )
  }
}

export const H1 = makeHeadingSkeleton('H1')
export const H2 = makeHeadingSkeleton('H2')
export const H3 = makeHeadingSkeleton('H3')
export const H4 = makeHeadingSkeleton('H4')
export const H5 = makeHeadingSkeleton('H5')
export const H6 = makeHeadingSkeleton('H6')
export const Paragraph = ({ lineCount, maxWidth, ...rest }) => (
  <Type.Paragraph {...rest} as="span">
    <TypeSkeleton lineCount={lineCount} maxWidth={maxWidth} />
  </Type.Paragraph>
)
