import React from 'react'
import PropTypes from 'prop-types'
import { TypeSkeleton } from './TypeSkeletons'

// importing the Real Components from index.js causes a circular dependency
// which is fine in the browser, but not in node - specifically jest
// see my explanation here for more detail : https://stackoverflow.com/a/76929314/12626187
import RealComboMenu from '../combo-menu/ComboMenu'
import RealSlider from '../slider/Slider'
import RealTextField from '../text-field/TextField'
import RealTextArea from '../text-area/TextArea'
import RealCheckbox from '../checkbox/Checkbox'
import RealRadio from '../radio/Radio'
import RealToggle from '../toggle/Toggle'
import RealInputGroup from '../input-group/InputGroup'
import RealRadioGroup from '../radio-group/RadioGroup'

function makeInputSkeleton({ Component, helpMessage, defaultProps = {} }) {
  return ({ noLabel, showHelp, ...props }) => {
    if (showHelp && helpMessage) {
      props.helpMessage = helpMessage
    } else {
      // deleting in case the user passed in a helpMessage prop
      // on a component (Checkbox, Radio, etc) that doesn't support it
      delete props.helpMessage
    }

    return (
      <Component
        name={Math.random().toString()}
        value=""
        {...defaultProps}
        {...props}
        onChange={() => {}}
        label={noLabel ? undefined : <TypeSkeleton maxWidth={300} />}
        aria-hidden
        disabled
      />
    )
  }
}

// InputGroup in the wild looks differently than RadioGroup, CheckboxGroup, etc (margins).
// Rather than require the user to know this for Skeletons, we'll just use the same component
// and handle when to swap out the internal component.
export const InputGroup = ({ as: is, showHelp, orientation, children }) => {
  let Component = RealRadioGroup

  React.Children.forEach(children, (child) => {
    if (child?.type?.identity === 'Skeleton:TextInput') {
      Component = RealInputGroup
    }
  })

  return (
    <Component
      orientation={orientation}
      label={<TypeSkeleton maxWidth={150} />}
      help={showHelp ? <TypeSkeleton maxWidth={500} /> : undefined}
      as={is}
      disabled
      aria-hidden
    >
      {children}
    </Component>
  )
}

// combomenu is a piece of crap
const selectedOption = { primaryText: <TypeSkeleton maxWidth={300} /> }
export const ComboMenu = makeInputSkeleton({
  Component: RealComboMenu,
  helpMessage: <TypeSkeleton maxWidth={300} />,
  defaultProps: {
    options: [selectedOption],
    selectedOption,
    setSelectedOption: () => {},
  },
})
export const Slider = makeInputSkeleton({ Component: RealSlider, defaultProps: { value: 0 } })
export const TextInput = makeInputSkeleton({ Component: RealTextField, helpMessage: <TypeSkeleton maxWidth={300} /> })
export const TextArea = makeInputSkeleton({ Component: RealTextArea, helpMessage: <TypeSkeleton maxWidth={300} /> })
export const Checkbox = makeInputSkeleton({ Component: RealCheckbox })
export const Radio = makeInputSkeleton({ Component: RealRadio })
export const Toggle = makeInputSkeleton({ Component: RealToggle })

// used in InputGroup skeleton to determine if we should use RadioGroup or InputGroup internally
TextInput.identity = 'Skeleton:TextInput'
TextArea.identity = 'Skeleton:TextInput'

InputGroup.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
}

ComboMenu.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
  /** Does not display the label. */
  noLabel: PropTypes.bool,
}

Slider.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
  /** Does not display the label. */
  noLabel: PropTypes.bool,
}

TextInput.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
  /** Does not display the label. */
  noLabel: PropTypes.bool,
}

TextArea.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
  /** Does not display the label. */
  noLabel: PropTypes.bool,
  /** Number of rows. */
  rows: PropTypes.number,
}

Toggle.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
}

Radio.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
}

Checkbox.propTypes = {
  /** HTML tag name for data container. */
  as: PropTypes.string,
}
