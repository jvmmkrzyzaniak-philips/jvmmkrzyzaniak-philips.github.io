import React from 'react'
import PropTypes from 'prop-types'
import { TypeSkeleton } from './TypeSkeletons'
import BaseSkeleton from './BaseSkeleton'
import RealRecordBlock from '../record-block/RecordBlock'
import RealPersonBlock from '../person-block/PersonBlock'
import RealFactBlock from '../fact-block/FactBlock'
import { ListItem as RealListItem } from '../list'
import { Icon, Avatar } from './AtomSkeletons'

export function RecordBlock({ size = 'md', as: is = 'div' }) {
  // todo: thumbnail with loading styles
  return (
    <RealRecordBlock
      aria-hidden
      as={is}
      size={size}
      thumbnail
      type={<TypeSkeleton maxWidth={120} />}
      personRole={<TypeSkeleton maxWidth={90} />}
      name={<TypeSkeleton maxWidth={200} />}
      details={<TypeSkeleton maxWidth={300} />}
    />
  )
}

RecordBlock.propTypes = {
  /** Size of the RecordBlock skeleton - matches the size of the actual RecordBlock component. */
  size: RealRecordBlock.propTypes.size,
}

export function PersonBlock({ size = 'sm', centered, maxWidth: customMaxWidth, as: is = 'div', avatarSize, noAvatar }) {
  // todo: avatar with loading styles
  return (
    <RealPersonBlock
      aria-hidden
      size={size}
      centered={centered}
      avatarSize={avatarSize}
      noAvatar={noAvatar}
      as={is}
      name={<TypeSkeleton maxWidth={customMaxWidth || 250} />}
      details={<TypeSkeleton maxWidth={customMaxWidth || 200} />}
      avatarProps={
        !noAvatar && {
          sex: 'unknown',
        }
      }
    />
  )
}

PersonBlock.propTypes = {
  /** Size of the PersonBlock skeleton - matches the size of the actual PersonBlock component. */
  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),
  /** Centers the skeleton. Matches the "centered" prop on PersonBlock. */
  centered: PropTypes.bool,
  /** Overrides the default maxWidth of the skeleton. */
  maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /** If true, the avatar will be hidden. */
  noAvatar: PropTypes.bool,
}

export function Image({ height, width, as: is }) {
  // img tags are inline-block by default, so this needs to be too
  return <BaseSkeleton style={{ height, width, borderRadius: 0, display: 'inline-block' }} as={is} />
}

Image.propTypes = {
  /** The height of the image skeleton. */
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /** The width of the image skeleton. */
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
}

export function ListItem({ hasAvatar, hasIcon, hasEndIcon, hasSecondLine, dense, maxWidth = 300, as: is = 'li' }) {
  let startElement = null
  if (hasAvatar) {
    startElement = <Avatar size={dense ? 'xs' : 'sm'} />
  } else if (hasIcon) {
    startElement = <RealListItem.Icon Icon={Icon} />
  }

  let endElement = null
  if (hasEndIcon) {
    endElement = <Icon />
  }

  return (
    <RealListItem
      aria-hidden
      startElement={startElement}
      primaryText={<TypeSkeleton maxWidth={maxWidth} randomSeed={3} />}
      secondaryText={hasSecondLine ? <TypeSkeleton maxWidth={maxWidth} randomSeed={1} /> : undefined}
      endElement={endElement}
      as={is}
      dense={dense}
    />
  )
}

ListItem.propTypes = {
  /** Adds an avatar skeleton if true. */
  hasAvatar: PropTypes.bool,
  /** Adds an icon skeleton if true. */
  hasIcon: PropTypes.bool,
  /** Adds an icon skeleton on the end if true. */
  hasEndIcon: PropTypes.bool,
  /** Adds a secondary text skeleton if true. */
  hasSecondLine: PropTypes.bool,
  /** Condenses the skeleton. Matches the "dense" prop on ListItem. */
  dense: PropTypes.bool,
  /** Sets the max width for the skeleton. */
  maxWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
}

export function FactBlock({ as: is = 'div' }) {
  return (
    <RealFactBlock
      aria-hidden
      heading={<TypeSkeleton maxWidth={180} />}
      date={{ date: <TypeSkeleton maxWidth={250} />, standardized: true }}
      place={{ place: <TypeSkeleton maxWidth={400} />, standardized: true }}
      as={is}
    />
  )
}
