import React from 'react'
import PropTypes from 'prop-types'
import BaseSkeleton from './BaseSkeleton'

// An "Atom" skeleton is a skeleton for a component of the smallest kind (like a button) that isn't a typography component

// The styling for each of the different "atom" skeletons
const atomSkeletons = {
  BillboardButton: {
    style: {
      height: 44,
      borderRadius: 4,
    },
  },
  Button: {
    style: {
      height: 40,
      borderRadius: 4,
    },
  },
  IconButton: {
    size: 'sm',
    style: {
      xs: {
        height: 24,
        width: 24,
        borderRadius: 24,
      },
      sm: {
        height: 40,
        width: 40,
        borderRadius: 40,
      },
      md: {
        height: 64,
        width: 64,
        borderRadius: 64,
      },
      lg: {
        height: 88,
        width: 88,
        borderRadius: 88,
      },
    },
  },
  Chip: {
    style: {
      height: 32,
      borderRadius: 32,
      display: 'inline-block',
    },
  },
  Avatar: {
    size: 'sm',
    style: {
      xs: {
        height: 24,
        width: 24,
        borderRadius: 24,
        maxWidth: '100%',
      },
      sm: {
        height: 40,
        width: 40,
        borderRadius: 40,
        maxWidth: '100%',
      },
      md: {
        height: 64,
        width: 64,
        borderRadius: 64,
        maxWidth: '100%',
      },
      lg: {
        height: 88,
        width: 88,
        borderRadius: 88,
        maxWidth: '100%',
      },
      xl: {
        height: 136,
        width: 136,
        borderRadius: 136,
        maxWidth: '100%',
      },
      xxl: {
        height: 180,
        width: 180,
        borderRadius: 180,
        maxWidth: '100%',
      },
    },
  },
  Icon: {
    size: 'sm',
    style: {
      xs: {
        height: 18,
        width: 18,
        borderRadius: 18,
        display: 'inline-block',
      },
      sm: {
        height: 24,
        width: 24,
        borderRadius: 24,
        display: 'inline-block',
      },
      md: {
        height: 36,
        width: 36,
        borderRadius: 36,
        display: 'inline-block',
      },
      lg: {
        height: 48,
        width: 48,
        borderRadius: 48,
        display: 'inline-block',
      },
      xl: {
        height: 60,
        width: 60,
        borderRadius: 60,
        display: 'inline-block',
      },
    },
  },
  Tag: {
    style: {
      padding: '4px 6px',
      fontSize: 'var(--text-size-a)',
      borderRadius: 4,
    },
  },
}

const AtomSkeleton = ({ atomOptions, minWidth, maxWidth = '100%', width, size, as, children }) => {
  const atomSize = size || atomOptions.size
  const skellyStyle = atomSize ? atomOptions.style[atomSize] : atomOptions.style
  return (
    <BaseSkeleton as={as} style={{ maxWidth, minWidth, width, ...skellyStyle }} size={size}>
      {children}
    </BaseSkeleton>
  )
}

export const BillboardButton = ({ minWidth = 80, maxWidth = 165, ...props }) => {
  return <AtomSkeleton atomOptions={atomSkeletons.BillboardButton} {...{ minWidth, maxWidth, ...props }} />
}
export const Button = ({ minWidth = 55, maxWidth = 83, ...props }) => {
  return <AtomSkeleton atomOptions={atomSkeletons.Button} {...{ minWidth, maxWidth, ...props }} />
}
export const Chip = ({ minWidth = 55, maxWidth = 100, ...props }) => {
  return <AtomSkeleton atomOptions={atomSkeletons.Chip} {...{ minWidth, maxWidth, ...props }} />
}
export const Avatar = (props) => <AtomSkeleton atomOptions={atomSkeletons.Avatar} {...props} />
export const Icon = (props) => <AtomSkeleton atomOptions={atomSkeletons.Icon} {...props} />
export const IconButton = (props) => <AtomSkeleton atomOptions={atomSkeletons.IconButton} {...props} />

export const Tag = ({ minWidth = 55, maxWidth = 83, ...props }) => {
  return (
    <AtomSkeleton atomOptions={atomSkeletons.Tag} {...{ minWidth, maxWidth, ...props }}>
      &nbsp;
    </AtomSkeleton>
  )
}

AtomSkeleton.propTypes = {
  /** The styling options for the component, from the "atomSkeletons" object above. */
  atomOptions: PropTypes.object,

  /** Sets the max width of the skeleton. */
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Optional prop - not all atom component skeletons use size. */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', 'xxl']),
}

BillboardButton.propTypes = {
  /** Sets the max width of the skeleton. BillboardButton comes with a default average size. */
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the min width of the skeleton. */
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the width of the skeleton. If passing a large value, may have to also pass maxWidth. */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
}

Button.propTypes = {
  /** Sets the max width of the skeleton. Button comes with a default average size. */
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the min width of the skeleton. */
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the width of the skeleton. If passing a large value, may have to also pass maxWidth. */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
}

Chip.propTypes = {
  /** Sets the max width of the skeleton. Chip comes with a default average size. */
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the min width of the skeleton. */
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the width of the skeleton. If passing a large value, may have to also pass maxWidth. */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
}

Avatar.propTypes = {
  /** Size of the avatar skeleton - matches the size of the actual avatar component. */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', 'xxl']),
}

Icon.propTypes = {
  /** Size of the icon skeleton - matches the size of the actual Icon component. */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
}

IconButton.propTypes = {
  /** Size of the icon button skeleton - matches the size of the actual component. */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg']),
}

Tag.propTypes = {
  /** Sets the max width of the skeleton. Button comes with a default average size. */
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the min width of the skeleton. */
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /** Sets the width of the skeleton. If passing a large value, may have to also pass maxWidth. */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
}
