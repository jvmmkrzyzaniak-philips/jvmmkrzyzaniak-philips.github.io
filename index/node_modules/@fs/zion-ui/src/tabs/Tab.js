import React, { forwardRef } from 'react'
import { Tab as ReachTab } from '@reach/tabs'
import { Link } from '@fs/zion-router'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'
import { colors } from '../theme'
import { textAcss, textBcss } from '../typography/typographyStyles'

const tabCss = css`
  background: ${colors.transparent.gray00};
  color: ${colors.gray100};
  cursor: pointer;
  height: 48px;
  line-height: 48px;
  margin: 0;
  max-width: 360px;
  min-width: 90px;
  padding: 0 var(--bleedable-sides, 16px);
  text-align: center;
  text-decoration: none;
  position: relative;

  &[has-icon] {
    height: 72px;
    > *:first-child {
      display: block;
      width: fit-content;
      margin: 8px auto -8px;
    }
  }

  [iswhite] & {
    color: ${colors.gray60};
  }

  &:first-child {
    padding-inline-start: var(--bleedable-sides, 16px);
  }
  &:last-child {
    padding-inline-end: var(--bleedable-sides, 16px);
  }

  &:visited {
    color: ${colors.gray100};
  }

  &:hover {
    background: ${colors.transparent.color02};
    text-decoration: none;
  }

  &:focus {
    background: ${colors.transparent.color02};
    outline: none;
  }

  // show focus outline on tab when navigating with the keyboard
  &:focus-visible {
    outline: 3px solid ${colors.color30};
    background: none;
    outline-offset: -11px;
    border-radius: 13px; // effectively about a 4px radius, must be more because the offset is negative
  }

  &[data-selected] {
    color: ${colors.color60};

    [iswhite] & {
      color: ${colors.gray100};
      border-color: ${colors.gray60};
    }
  }
  /* using an after instead of bottom border so we can curve the outline's border radius */
  &[data-selected]::after {
    content: '';
    background: ${colors.color60};
    display: block;
    height: 4px;
    position: absolute;
    bottom: 0px;
    left: 0;
    right: 0;
  }

  [fullwidth] & {
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 1;
    max-width: none;
  }
`

// if export default forwardRef(Tab) is used React throws Warning: forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?.
const Tab = forwardRef(TabComponent)
function TabComponent({ title, to, count, children, linkName, wayfinding = true, Icon, ...props }, ref) {
  // if 'to' prop exists, make Tab a Link
  const component = to ? Link : 'div'
  const linkProps = to ? { to, noLinkStyles: true, linkName, wayfinding } : {}

  return (
    <ReachTab
      {...sanitizeProps(props)}
      as={component}
      className={cx(tabCss, textBcss)}
      has-icon={boolAttr(Icon)}
      {...linkProps}
      ref={ref}
      // tabs that act as links should have a role of link
      // so screen readers have access to them
      role={to ? 'link' : 'tab'}
      // the default behavior of Reach Tabs is to set the tabindex to -1 for non-selected tabs
      // tabindex needs to be manually set to 0 to allow keyboard navigation with the TAB key
      // this diverts from the spec, but in testing it seems to open up more usability for
      // keyboard-only users, while not seeming to harm the screen reader users
      tabIndex={0}
      onClickCapture={(event) => {
        // Prevent link tabs from being selected when ctrl/cmd-clicked
        if (to && (event.ctrlKey || event.metaKey)) {
          event.stopPropagation()
        }
      }}
    >
      {Icon && <Icon size="sm" />}
      {title}
      {(count || count === 0) && <span className={textAcss}>&nbsp;({count})</span>}
    </ReachTab>
  )
}

Tab.propTypes = {
  /** Optional. Tracking name to log when a tab is clicked (overrides the linkName on the Tabs component) */
  linkName: PropTypes.string,

  /** Text to display on the tab */
  title: PropTypes.string.isRequired,

  /** Use this prop to render a Link. See 'Linkable component' above. */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),

  /** Used to maintain link color after clicking */
  wayfinding: PropTypes.bool,

  /** Count to display on the tab */
  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** The icon component to use for the button. Must be something imported from `@fs/zion-icon` */
  Icon: PropTypes.elementType,
}

export default Tab
