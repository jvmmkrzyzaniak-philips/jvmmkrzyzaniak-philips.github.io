import React from 'react'
import type { InferProps } from 'prop-types'
import PropTypes from 'prop-types'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import BaseCard from './BaseCard'

const propTypes = {
  /** Content of the Card */
  children: PropTypes.node,

  /**
   * Determines the correct styling for the edges of the card. `elevation` gives the card a shadow box. `border` changes the card to have an outlined border with no elevation and a transparent background.
   * `none` removes the outline and the elevation. When setting `edges="none"` you MUST provide a `backgroundColor` or `backgroundImage`.
   */
  edges: PropTypes.oneOf(['elevation', 'border', 'none'] as const),

  /** Options for margins */
  margins: PropTypes.oneOf(['xxl', 'xl', 'lg', 'md', 'sm', 'xs', 'xxs', 'sparse', 'regular', 'dense'] as const),

  /** Click handler ran when user clicks on the `Card` or uses the `Enter` key while card has focus. **NOTE:** It is not recommended to pass both a `to` and `onClick` props. If both are passed the `to` prop will be ignored. */
  onClick: PropTypes.func,

  /** Path to the route. Example: to="/frontier/app/react". See https://reacttraining.com/react-router/web/api/Link for all options. */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),

  /** For using Link outside of the Router. This prop is not needed for full urls. */
  external: PropTypes.bool,

  /** Action you'd like to see for this link on the analytics dashboard */
  action: PropTypes.string,

  /**
   * If specified, and analytics is enabled for the react app, then analytics click metrics
   * will be sent. The metrics will contain the specified value, which will be available in
   * analytics reports.
   */
  linkName: PropTypes.string,

  /**
   * If true this will prevent the page from scrolling to the top when clicked. Only works
   * on internal links.
   */
  noScrollTop: PropTypes.bool,

  /** Set the background color of the Card. */
  backgroundColor: PropTypes.string,

  /** Set the background image of the Card. */
  backgroundImage: PropTypes.string,

  /**
   * In most cases, the height of a Card should be defined by the content in the Card or by the height of
   * neighboring Cards. But there are cases where you need to define the height of the Card manually.
   *
   * ** Do not use unless you really need it.**
   */
  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * In most cases, the width of a Card should be defined by the Grid/FlowGrid wrapping your Card.
   * But there are cases where you need to define the width of the Card manually.
   * A good example would be if you need to put a Card in a Row or a HorizontalFlowGrid.
   *
   * ** Do not use unless you really need it.**
   */
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * By default, we set the focus ring color to a dark transparent gray,
   * but in certain cases, you might need another color for accessibility.
   */
  focusRingColor: PropTypes.oneOf(['blue', 'green', 'yellow', 'red', 'purple', 'white', 'gray'] as const),
}

export type CardProps = InferProps<typeof propTypes>
const Card = (props: CardProps): JSX.Element => <BaseCard {...sanitizeProps(props)} />

export default Card
