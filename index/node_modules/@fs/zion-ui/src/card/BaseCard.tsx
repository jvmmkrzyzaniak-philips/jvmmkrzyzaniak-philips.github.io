import type { ComponentType } from 'react'
import React, { Children, cloneElement, isValidElement, useContext } from 'react'
import { css, cx } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import BaseButton from '../buttons/BaseButton'
import { elevationBaseCss, e1, h4, f2, a1 } from '../elevation'
import { colors } from '../theme'
import { SizeContext, WidthContext } from '../responsive/ResponsiveProvider'
import { CellSizeContext, CellWidthContext } from '../grid/ResponsiveCellProvider'
import type { CardProps } from './Card'
import MarginBox from '../margin-box'

type BaseCardProps = Omit<CardProps, 'maxWidth' | 'minHeight'> & {
  as?: React.ReactNode

  /** Custom CSS for the base card */
  className?: string

  onClickCapture?: (event?: React.SyntheticEvent) => void
  role?: string
  noLinkStyles?: boolean
  overLayer?: React.ReactNode

  maxWidth?: string | number
  minHeight?: string | number

  onKeyDown?: (event?: React.KeyboardEvent) => void
  tabIndex?: number
}

type CardChildProps = {
  /** Applies `flex-grow: 1` to the child to stretch it vertically. */
  growY?: boolean
}

const cardCss = css`
  --roundiness: 8px;
  position: relative;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  align-items: normal;
  width: 100%;
  margin: 0;
  padding: 0;
  border-radius: var(--roundiness);
  overflow: hidden;
  -webkit-touch-callout: none;
  background-size: cover;
  background-position: center;
  border: 0;

  &[data-edges='elevation'] {
    // Purposefully choosing background-color instead of background,
    // so background-image can be set and not get into a specificity battle.
    background-color: ${colors.gray00};
  }

  &[data-edges='border'] {
    border: 1px solid ${colors.transparent.gray10};

    [high-contrast] & {
      border-color: ${colors.gray60};
    }
  }
`

const bleedableCss = css`
  flex-grow: 1;
  display: flex;
  justify-content: var(--grid-justify, start); /* When grid cells are marked as alignY="middle", this will honor it */
  flex-direction: column;
  width: 100%;
`

const cellCss = css`
  display: flex;
  flex-direction: column;

  &[grow-y],
  &[grow-y] > * {
    flex-grow: 1;
  }
`

const perspective = 'calc(var(--cell-width, 400px))'
const hoverSquishyPantsCss = css`
  will-change: transform;
  transition:
    box-shadow 0.1s,
    transform 0.1s !important; //This style was being overwritten in production by elevationBaseCss. See ZIONUIV13-150
  transform: perspective(${perspective}) translateZ(0px);

  &:hover {
    transform: perspective(${perspective}) translateZ(5px);
  }

  &:focus-visible {
    transform: perspective(${perspective}) translateZ(3px);
    outline: 3px solid var(--focus-ring-color);
  }

  &:active,
  &[aria-disabled='true']:hover {
    transform: perspective(${perspective}) translateZ(0px);
  }
`

export const marginMap = {
  sparse: 'md',
  regular: 'sm',
  dense: 'xxs',
}

const colorMap = {
  white: colors.white90,
  gray: colors.transparent.gray60,
  blue: colors.blue40,
  green: colors.green40,
  yellow: colors.yellow40,
  red: colors.red40,
  purple: colors.purple40,
}

const oldMargins = ['sparse', 'regular', 'dense']

const roundinessMap = {
  md: '12px',
  lg: '16px',
  xl: '20px',
  xxl: '24px',
}

const BaseCard = ({
  to,
  external,
  action,
  linkName,
  onClick,
  children,
  className,
  margins = 'sm',
  edges = 'elevation',
  backgroundColor,
  backgroundImage,
  overLayer,
  maxWidth,
  minHeight,
  focusRingColor = 'gray',
  ...props
}: BaseCardProps): JSX.Element => {
  let TagName: keyof JSX.IntrinsicElements | ComponentType = 'div'
  let affordanceProps: BaseCardProps = {}
  const classNames = [className, cardCss, e1]

  if (edges === 'elevation') classNames.push(elevationBaseCss)
  if (edges === 'none' && !backgroundColor && !backgroundImage) {
    throw new Error('When setting edges to none you MUST set backgroundColor or backgroundImage')
  }

  if (to || onClick) {
    classNames.push(h4, f2, a1, hoverSquishyPantsCss)
    TagName = BaseButton
    affordanceProps = {
      action,
      external,
      linkName,
      to,
      onClick,
    }
  }
  if (onClick) {
    affordanceProps.role = 'button'
  }

  // Check for old margin values and translate them if necessary
  // Remove this in the next version of Zion UI and get rid of 'sparse', 'regular', and 'dense' options
  const grandfatheredMargin: Exclude<typeof margins, 'sparse' | 'regular' | 'dense'> = oldMargins.includes(margins)
    ? marginMap[margins]
    : margins

  const cardSize = useContext(CellSizeContext)
  const cardWidth = useContext(CellWidthContext)
  return (
    <SizeContext.Provider value={cardSize}>
      <WidthContext.Provider value={cardWidth}>
        <TagName
          {...props}
          style={{
            '--roundiness': roundinessMap[grandfatheredMargin],
            backgroundColor,
            backgroundImage: backgroundImage && `url(${backgroundImage})`,
            maxWidth,
            minHeight,
            '--focus-ring-color': colorMap[focusRingColor],
          }}
          className={cx(...classNames)}
          {...affordanceProps}
          data-edges={edges}
        >
          <MarginBox className={bleedableCss} marginX={grandfatheredMargin} marginY={grandfatheredMargin}>
            {Children.map(children, (child) => {
              if (child && typeof child === 'object' && 'props' in child) {
                const { growY, ...rest } = child.props as { growY?: boolean }
                // Only wrap in div when necessary
                if (growY) {
                  const clonedChild = isValidElement(child) ? cloneElement({ ...child, props: rest }) : child
                  return (
                    <div key={child.key} className={cellCss} grow-y={boolAttr(growY)}>
                      {clonedChild}
                    </div>
                  )
                }
              }
              return child
            })}
          </MarginBox>
          {overLayer}
        </TagName>
      </WidthContext.Provider>
    </SizeContext.Provider>
  )
}

export default BaseCard

// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Functions below are just to show props in storybook
export const CardChild = (_props: CardChildProps): JSX.Element => <div />
