import { useCallback, useEffect, useState } from 'react'

const hasWindow = typeof window !== 'undefined'

const defaults = {
  /** The inner height of the window. */
  '--layout-viewport-height': '100vh',
  /** The height of the visual viewport (see https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API) */
  '--visual-viewport-height': 'var(--layout-viewport-height)',
  /** The inner height of the window minus the role-indicator height. Calculation done in @fs/zion-role-indicator */
  '--page-content-height': 'var(--layout-viewport-height)',
  /** The height of the role indicator. Set by @fs/zion-role-indicator */
  '--role-indicator-height': '0px',
  /** The size of the role indicator border. Set by @fs/zion-role-indicator */
  '--role-indicator-border': '0px',
  /** The height of the header from HF. Set by the @fs/zion-header */
  '--header-height': '0px',
  /** The height of the virtual keyboard. */
  '--virtual-keyboard-height': '0px',
}

/**
 * This hook sets CSS variables that are used for layout and positioning.
 * See https://developer.mozilla.org/en-US/docs/Web/API/Visual_Viewport_API for the
 * differences between layout viewport and visual viewport.
 * See also https://css-tricks.com/the-trick-to-viewport-units-on-mobile/ for the implementation inspiration
 *   --layout-viewport-height is used for the global page layout.
 *   --visual-viewport-height is used to keep ProgressOverlay always visible.
 *   --page-content-height is used to position overlays inside the role indicator.
 */
export default function useViewportVariables() {
  const [viewportVariables, setViewportVariables] = useState(defaults)
  const setViewportVariable = useCallback(
    (name, value) => setViewportVariables((prevVariables) => ({ ...prevVariables, [name]: value })),
    []
  )

  useEffect(() => {
    if (!hasWindow) return () => {}
    let visualViewportCleanup = () => {}

    // VisualViewport will account for the iOS on-screen keyboard or pinch-zooming changing the viewport. See https://github.com/WICG/visual-viewport and https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport
    if (window.visualViewport) {
      const visualResizeHandler = () => {
        setViewportVariable('--visual-viewport-height', `${window.visualViewport.height}px`)
        setViewportVariable('--virtual-keyboard-height', `${getVirtualKeyboardHeight()}px`)
        setViewportVariable('--layout-viewport-height', `${getInnerHeight()}px`)
      }

      visualResizeHandler()

      window.visualViewport.addEventListener('resize', visualResizeHandler)
      visualViewportCleanup = () => window.visualViewport.removeEventListener('resize', visualResizeHandler)
    }

    const windowResizeHandler = () => {
      // Update the layout-viewport-height
      setViewportVariable('--layout-viewport-height', `${getInnerHeight()}px`)
    }

    windowResizeHandler()
    window.addEventListener('resize', windowResizeHandler)

    return () => {
      visualViewportCleanup()
      window.removeEventListener('resize', windowResizeHandler)
    }
  }, [setViewportVariable])

  return viewportVariables
}

/** Chrome on Windows has a bug where system or browser scaling can cause overflow scrolling by a fraction of a pixel, when the computed page height is a fractional value (e.g. 584.54) and the page content is set to `window.innerHeight` (which is a rounded integer, e.g. 585). Subtract a pixel to avoid these situations (ZIONUI-1024) */
function getInnerHeight() {
  return Number.isInteger(window.devicePixelRatio) ? window.innerHeight : window.innerHeight - 1
}

/** Because opening the virtual keyboard affects the visualViewport, we can get the height of the virtual keyboard by subtracting the height of the visualViewport from the layout-viewport (i.e. window.innerHeight). However, we want only the change represented by the virtualKeyboard, not from pinch-zooming (or else the resulting value will be larger than expected when pinch-zoomed), and so we need to unscale the visualViewport height for this calculation */
function getVirtualKeyboardHeight() {
  const { height, scale } = window.visualViewport
  const innerHeight = getInnerHeight()
  const unscaledHeight = height * scale // scale represents the change to the visualViewport made by pinch-zooming
  return Math.max(0, innerHeight - unscaledHeight)
}
