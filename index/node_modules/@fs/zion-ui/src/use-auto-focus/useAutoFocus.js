import React, { useEffect } from 'react'
import PropTypes from 'prop-types'
import { getFocusableChildren, getFirstTabbableItem } from '../use-focus-manager/useFocusManager'

const getFirstTab = (container) => getFirstTabbableItem(getFocusableChildren(container))

// used in DialogOverlay and InfoSheet to select the header
export const getOverlayHeader = (container) =>
  container?.querySelector('[data-overlay-header]') || getFirstTab(container)

export default function useAutoFocus({
  isOpen,
  enabled,
  focusRef,
  containerRef,
  whatToFocusInContainer = getFirstTab,
}) {
  useEffect(() => {
    if (!isOpen || !enabled) return
    // For some reason, the containerRef isn't populated yet, so pushing the focus to the next event loop lets it wait until it is populated.
    requestAnimationFrame(() => {
      // Try to focus the focusRef
      focusRef?.current?.focus?.({ preventScroll: true })

      // Check to see if the focus succeeded
      if (focusRef?.current && document?.activeElement === focusRef.current) return

      // If the focus on the focusRef did not succeed then try and focus an element inside the contanerRef
      const el = containerRef?.current && whatToFocusInContainer(containerRef.current)
      el?.focus({ preventScroll: true })
    })
  }, [isOpen, enabled, focusRef, containerRef, whatToFocusInContainer])
}

// This is just a dummy component so that we can use propTypes to make things easier to document
export const HookConfigOptions = (props) => <div {...props} />

const DomElement = typeof Element === 'undefined' ? () => {} : Element

HookConfigOptions.propTypes = {
  /** If true, then auto-focus will fire whenever `isOpen` is changed to true. */
  enabled: PropTypes.bool,

  /** Ref to the container that auto-focus will target. */
  containerRef: PropTypes.oneOfType([
    // Either a function
    PropTypes.func,
    // Or the instance of a DOM native element
    PropTypes.shape({ current: PropTypes.instanceOf(DomElement) }),
  ]),

  /** Ref to the specific element to be focused. */
  focusRef: PropTypes.oneOfType([
    // Either a function
    PropTypes.func,
    // Or the instance of a DOM native element
    PropTypes.shape({ current: PropTypes.instanceOf(DomElement) }),
  ]),

  /** Determines if auto-focus should fire. Fires whenever `isOpen` is changed to true. */
  isOpen: PropTypes.bool,

  /** A custom function to use when you need to specify what will be focused. */
  whatToFocusInContainer: PropTypes.func,
}
