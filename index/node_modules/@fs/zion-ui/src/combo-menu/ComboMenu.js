import React, { useRef, useEffect } from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { useSelect } from 'downshift'
import { createPopper } from '@popperjs/core/lib/popper-lite'
import { ArrowCaret } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'
import { sanitizeProps, boolAttr } from '@fs/zion-frontend-friends'
import { ListItemCore, ListItem } from '../list'
import useClickAway from '../use-click-away'
import Portal, { PopperPortalContext } from '../portal'
import Elevation from '../elevation'
import { Theme, colors } from '../theme'
import OpenCloseAnimation from '../open-close-animation'
import useEscHandler from '../use-esc-handler'
import { usePageWidth } from '../responsive'

const openerListItemCss = css`
  margin: 0 -12px;
  border-radius: 4px;
  overflow: hidden;
`

const listItemCss = css`
  list-style: none;
  padding: 0;
  margin: 0;
  overflow: hidden;
  &:focus {
    outline: none;
  }

  &[is-selected] > div {
    background: ${colors.gray03};
  }
`

const overlayCss = css`
  position: absolute;
  /* Increasing z-index to 4 is required to prevent the ComboMenu displaying behind DialogOverlay. */
  /* Before updating or removing z-index make sure ComboMenu in DialogOverlay story works correctly. */
  z-index: 4;
  outline: none;
  max-height: 262px;
  overflow: auto;
  pointer-events: none;
  border-radius: 4px;

  &[is-open] {
    pointer-events: auto;
  }

  &[fullscreen] {
    max-height: unset;
    max-width: unset;
    width: 100vw;
    height: 100%;
    min-width: unset;
    margin: 0;
  }
`

const menuCss = css`
  max-height: 262px;
  display: block;
  overflow: auto;
  &:focus,
  &:active {
    outline: none;
  }
`

const toggleContainerCss = css`
  width: fit-content;

  &[aria-disabled='true'] {
    cursor: not-allowed;
  }
`

/**
 * This exists so the "click away" behavior of the suggestions menu still works with the
 * click-away behavior of other overlays, even though the menu's click-away behavior is
 * slightly different. It is in a wrapper here so we can enable/disable click-away via
 * Downshift's isOpen value.
 */
function ClickAwayWrapper({ children, isOpen, contentRef, originatorRef, focusBackRef }) {
  useClickAway({
    enabled: isOpen,
    originatorRef,
    focusBackRef,
    contentRef,
    handler: () => {
      focusBackRef.current?.focus()
    },
  })
  return children
}

const commonStyles = {
  position: 'fixed',
  zIndex: 2 /* Create a stacking context, so all things inside this overlay will be contained (and on top of the main ui) */,
  top: 0,
  bottom: 0,
  insetInlineStart: 0,
}
const fullscreenAnimStyles = {
  openStyles: { ...commonStyles, y: '0vh', config: { tension: 250, clamp: true } },
  closeStyles: { ...commonStyles, y: '100vh', config: { tension: 300 } },
}

function getComboMenuProps({ getMenuProps, highlightedIndex, options, setHighlightedIndex, selectItem, closeMenu }) {
  return getMenuProps({
    onKeyDown: (event) => {
      switch (event?.key) {
        case 'ArrowDown':
          if (highlightedIndex === options.length - 1) {
            setHighlightedIndex(-1)
          }
          break
        case 'ArrowUp':
          if (event.key === 'ArrowUp' && highlightedIndex === 0) {
            setHighlightedIndex(options.length)
          }
          break
        case 'Tab':
        case ' ':
        case 'Enter':
          if (options.length > highlightedIndex) {
            selectItem(options[highlightedIndex])
          }
          closeMenu()
          event.preventDefault()
          break
        default:
          break
      }
    },
  })
}

export default function ComboMenu({
  options = [],
  selectedOption,
  setSelectedOption,
  menuProps,
  fullWidth,
  disabled,
  downshiftProps = {},
}) {
  const [t] = useTranslation()
  const popperRef = useRef()
  const menuRef = useRef()
  const toggleButtonRef = useRef()
  const menuPositioningRef = useRef()
  const isSmBreakpoint = usePageWidth()({ md: true })

  const {
    isOpen,
    openMenu,
    closeMenu,
    selectItem,
    setHighlightedIndex,
    getToggleButtonProps,
    getMenuProps,
    highlightedIndex,
    getItemProps,
  } = useSelect({
    ...downshiftProps,
    items: options,
    defaultSelectedItem: selectedOption || null,
    onSelectedItemChange: (downshiftChanges) => {
      setSelectedOption?.(downshiftChanges.selectedItem)
      setTimeout(() => {
        toggleButtonRef.current?.focus()
      }, 0)
    },
    itemToString: (option) => option.primaryText || option.secondaryText,
    initialHighlightedIndex: 0,
    defaultHighlightedIndex: 0,
  })

  useEscHandler({
    handler: () => {
      closeMenu()
    },
    enabled: isOpen,
  })

  if (isOpen && isSmBreakpoint && !popperRef.current) {
    popperRef.current = createPopper(menuPositioningRef.current, menuRef.current, { placement: 'bottom-start' })
  }

  useEffect(() => {
    if (isOpen && isSmBreakpoint) {
      if (popperRef.current) popperRef.current.destroy()
      popperRef.current = createPopper(menuPositioningRef.current, menuRef.current, { placement: 'bottom-start' })
    }
  }, [isOpen, isSmBreakpoint])

  return (
    <div className={toggleContainerCss} style={{ width: fullWidth ? '100%' : 'fit-content' }} aria-disabled={disabled}>
      {/* This extra div allows popup positioning of menu without interfering with onClick handler for ListItemCore */}
      <div ref={menuPositioningRef} style={{ height: 0, marginInline: -12 }} />
      <div className={openerListItemCss}>
        <ListItemCore
          primaryText={t('combo-menu.no-option', 'Please select an option')}
          {...sanitizeProps(selectedOption || {})}
          {...getToggleButtonProps({ ref: toggleButtonRef })}
          {...(isOpen ? {} : { 'aria-labelledby': undefined })} // [EAACOMPL-294] remove downshift's aria-labelledby because the DOM with that ID is not rendered yet
          interactable
          endElement={<ListItem.Icon Icon={ArrowCaret} direction={isOpen ? 'up' : 'down'} />}
          onKeyDown={(event) => {
            // Open the menu when clicking the space bar, ArrowDown or ArrowUp keys.
            if (event.key === ' ' || event.key === 'ArrowDown' || event.key === 'ArrowUp') {
              openMenu()
              event.stopPropagation()
              event.preventDefault()
            }
            // If the ComboMenu is inside a form, then we want to submit the form
            // when the user presses enter. This is just like it would behave with
            // a native <select> element in a form.
            if (event.key === 'Enter') {
              const form = event.currentTarget.closest('form')
              if (form?.requestSubmit) {
                form.requestSubmit()
              } else {
                form?.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }))
              }
            }
          }}
          disabled={disabled}
        />
      </div>

      <ClickAwayWrapper
        isOpen={isOpen}
        contentRef={menuRef}
        originatorRef={toggleButtonRef}
        focusBackRef={toggleButtonRef}
      >
        <Portal context={PopperPortalContext}>
          <OpenCloseAnimation
            isOpen={isOpen}
            {...(!isSmBreakpoint ? fullscreenAnimStyles : { openStyles: {}, closeStyles: {} })}
          >
            <Elevation
              z={4}
              ref={menuRef}
              className={overlayCss}
              is-open={boolAttr(isOpen)}
              fullscreen={boolAttr(!isSmBreakpoint)}
              style={{ width: isSmBreakpoint ? toggleButtonRef.current?.clientWidth : '100vw' }}
              {...sanitizeProps(menuProps)}
            >
              {/* We have to use a div here instead of a ul because Safari does not honor the role=listbox (returned from getMenuProps()) features when mixed with a ul-li DOM structure */}
              <Theme
                {...getComboMenuProps({
                  getMenuProps,
                  highlightedIndex,
                  options,
                  setHighlightedIndex,
                  selectItem,
                  closeMenu,
                })}
                {...(isOpen ? {} : { 'aria-labelledby': undefined })} // [EAACOMPL-294] remove downshift's aria-labelledby because the DOM with that ID is not rendered yet
                className={menuCss}
              >
                {isOpen &&
                  options.map((option, index) => {
                    const key = `combomenu_${index}`
                    // value, to, external, etc. are extracted here so they aren't passed on to ListItemCore
                    const { value, to, external, href, onClick, ...listItemProps } = option
                    const selected = highlightedIndex === index
                    return (
                      <li
                        {...getItemProps({ item: option, index })}
                        tabIndex={-1}
                        is-selected={boolAttr(selected)}
                        key={key}
                        className={listItemCss}
                      >
                        <ListItemCore
                          selected={selected}
                          {...sanitizeProps(listItemProps)}
                          tabIndex={-1}
                          interactable
                        />
                      </li>
                    )
                  })}
              </Theme>
            </Elevation>
          </OpenCloseAnimation>
        </Portal>
      </ClickAwayWrapper>
    </div>
  )
}

ComboMenu.propTypes = {
  /** Array of options. Each option has the same props as a ListItem, but also accepts a _value_ property. */
  options: PropTypes.arrayOf(
    PropTypes.shape({
      /** ListItem props are available here as well. */
      value: PropTypes.any,
    })
  ),

  /** State for the currently selected option. Should be created with useState(). */
  selectedOption: PropTypes.shape({
    /** ListItem props are available here as well. */
    value: PropTypes.any,
  }),

  /** Setter for selectedOption, returned from useState(). */
  setSelectedOption: PropTypes.func,
}
