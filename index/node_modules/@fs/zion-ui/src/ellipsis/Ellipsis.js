import React, { useCallback, useRef, useState, useImperativeHandle, forwardRef } from 'react'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { boolAttr, useResizeObserver } from '@fs/zion-frontend-friends'
import { DescriptionTooltip } from '../tooltip'

export const ellipsisCss = css`
  display: block;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-word;

  [multiline]& {
    display: -webkit-box !important;
    white-space: normal;
    -webkit-box-orient: vertical;
  }

  // To prevent safari browser tools tips from showing
  // https://stackoverflow.com/questions/20974276/prevent-safari-from-showing-tooltip-when-text-overflow-is-hidden-with-ellipsis
  //
  // NOTE: For some reason this causes buttons to not show the ellipsis at all on Safari and Chrome.
  // Luckily, Safari only shows its tooltips on anchor tags, not buttons.
  // The 'a&' is on purpose: It translates to 'a.ellipsisCss_###::after {', so it won't apply to buttons
  a&::after {
    content: '';
    display: block;
  }
`

const Ellipsis = forwardRef(
  (
    {
      as: TagName = 'span',
      className,
      children,
      label = children,
      description,
      noTooltip = false,
      lineClamp = 1,
      style,
      ...props
    },
    ref
  ) => {
    // We need two different tooltips, otherwise the resizeObserver will
    // stop watching when the ref points to a different dom node
    const insideTooltipRef = useRef()
    const outsideTooltipRef = useRef()

    const [showLabelTooltip, setShowLabelTooltip] = useState(false)
    const showDescriptionTooltip = !!description
    const showTooltip = !noTooltip && (showLabelTooltip || showDescriptionTooltip)

    useImperativeHandle(ref, () => (showTooltip ? insideTooltipRef.current : outsideTooltipRef.current), [showTooltip])
    const multiline = lineClamp > 1

    const handleResize = useCallback(() => {
      setShowLabelTooltip(() => {
        const { current } = showTooltip ? insideTooltipRef : outsideTooltipRef
        if (multiline) return current?.offsetHeight < current?.scrollHeight
        return current?.offsetWidth < current?.scrollWidth
      })
    }, [showTooltip, multiline])
    useResizeObserver(showTooltip ? insideTooltipRef : outsideTooltipRef, handleResize)

    const ellipsisProps = {
      ...props,
      ref: insideTooltipRef,
      className: cx(className, ellipsisCss),
      multiline: boolAttr(multiline),
      style: { ...style, WebkitLineClamp: multiline ? lineClamp : undefined },
    }
    return showTooltip ? (
      <DescriptionTooltip
        targetAs={TagName}
        targetAsProps={ellipsisProps}
        target={children}
        // If label is fully visible, only include description in tooltip
        label={showLabelTooltip ? label : undefined}
        description={description}
      />
    ) : (
      <TagName {...ellipsisProps} ref={outsideTooltipRef}>
        {children}
      </TagName>
    )
  }
)

Ellipsis.propTypes = {
  /** If you need a custom tag around your Ellipsis, use this
   * NOTE: If you're going to pass a component here, that component MUST be forwardRef'd.
   */
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),

  /** The text to be truncated with an ellipsis. */
  children: PropTypes.node,

  /** If you need to specify a subset of your children for the tooltip, use the `label` prop. */
  label: PropTypes.node,

  /** If you need to add extra information to the tooltip, use this prop (uncommon). */
  description: PropTypes.string,

  /** A tooltip will be added to the text that displays the full text unless this is true. */
  noTooltip: PropTypes.bool,

  /** Number of lines to show before clamping */
  lineClamp: PropTypes.number,
}

Ellipsis.displayName = 'Ellipsis'

export default Ellipsis
