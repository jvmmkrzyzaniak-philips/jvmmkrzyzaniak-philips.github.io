import React, { Fragment, useState, forwardRef, useRef } from 'react'
import PropTypes from 'prop-types'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import Overlay from '../overlay'
import useEscHandler from '../use-esc-handler'
import OpenCloseAnimation from '../open-close-animation'
import Portal, { PopperPortalContext } from '../portal'
import Popper from '../popper'
import { menuOverlayModifierCreator, PopperModifiersContext, defaultModifierCreator } from '../popper/PopperContext'
import useAutoFocus from '../use-auto-focus'
import useKeyboardShortcuts from '../use-keyboard-shortcuts'
import { Theme } from '../theme'
import { Bleedable } from '../bleed'
import ShadowScroller from '../shadow-scroller'
import { getTabDestination, handleListNavigationByKeys } from './utils'
import useClickAway from '../use-click-away'

const animStyles = {
  openStyles: { opacity: 1, config: { tension: 300 } },
  closeStyles: { opacity: 0, config: { tension: 300 } },
}

function PopperPortal({ children }) {
  return <Portal context={PopperPortalContext}>{children}</Portal>
}

const whatToFocusInContainer = (container) => container.querySelector('[role="menuitem"]')

function MenuOverlayBase(
  {
    children,
    inline = true,
    menuId,
    minWidth = 0,

    /** [SCRUBBED]: Don't pass on to children. From useOverlay */
    isOpen,
    transitioning,
    open,
    close,
    handleClick,
    targetRef,
    focusBackRef,
    autoFocus,
    handleTransitioned,

    ...props
  },
  ref
) {
  const [t] = useTranslation()
  const overlayRef = useRef(null)
  const [maxHeight, setMaxHeight] = useState({})
  const Container = inline ? Fragment : PopperPortal

  useKeyboardShortcuts({
    handlers: {
      Tab: {
        // Ensure tabbing away from non-inline menu doesn’t jump to element after portal
        action: () => close(getTabDestination(targetRef.current, menuId)),
        title: t('common-ui:close.action'),
        shift: {
          // When shift-tabbing back to opener, close the menu. Blurring to the opener doesn’t close, because if it’s a click, then the menu would re-open.
          action: () => close(targetRef.current),
          title: t('common-ui:close.action'),
        },
      },
      wildCard: {
        action: handleListNavigationByKeys(menuId),
      },
    },
    enabled: isOpen,
  })

  // Close on escape key
  useEscHandler({
    handler: close,
    enabled: isOpen,
  })

  useAutoFocus({
    isOpen,
    enabled: autoFocus,
    containerRef: overlayRef,
    whatToFocusInContainer,
  })

  useClickAway({
    enabled: isOpen,
    originatorRef: targetRef,
    focusBackRef,
    contentRef: overlayRef,
    handler: close,
    inline,
  })

  return (
    <Container>
      {/* This all needs to stay in the dom for accessibility, so display: none is used to hide it */}
      <div style={{ display: !isOpen && !transitioning ? 'none' : 'block' }}>
        <PopperModifiersContext.Provider value={menuOverlayModifierCreator}>
          <Popper
            minWidth={minWidth}
            isOpen={isOpen}
            transitioning={transitioning}
            placement={['bottom', 'top']}
            targetRef={targetRef}
            elevatedZIndex
            updateOnChildrenChange
            setMaxHeight={setMaxHeight}
          >
            <PopperModifiersContext.Provider value={defaultModifierCreator}>
              <OpenCloseAnimation
                isOpen={isOpen}
                {...animStyles}
                onOpenFinished={handleTransitioned}
                onCloseFinished={handleTransitioned}
              >
                <Overlay {...sanitizeProps(props)} ref={overlayRef} z={4} aria-modal="false">
                  <Theme ref={ref}>
                    <ShadowScroller>
                      <Bleedable style={maxHeight} top={8} sides={20}>
                        {children}
                      </Bleedable>
                    </ShadowScroller>
                  </Theme>
                </Overlay>
              </OpenCloseAnimation>
            </PopperModifiersContext.Provider>
          </Popper>
        </PopperModifiersContext.Provider>
      </div>
    </Container>
  )
}

export default forwardRef(MenuOverlayBase)

MenuOverlayBase.propTypes = {
  /** REQUIRED unless using an IconButton or Button to handle the overlay: useOverlay() object used to determine if menu should be opened or not. */
  overlay: PropTypes.object,

  /** Optionally have the menu be next to the button in the DOM for better accessibilty.  If set to false, this overlay will be rendered in a portal instead. Use this prop if your overlay is being cut off because one of its ancestors has `overflow: hidden` */
  inline: PropTypes.bool,

  /** The ID that was applied to the element with role=menu. */
  menuId: PropTypes.string,

  /** Controls the minWidth of the overlay */
  minWidth: PropTypes.number,
}
