import { focusableSelectors } from '@fs/zion-frontend-friends'

function getFocusedIndex(elements) {
  return elements.findIndex((elem) => elem.contains(document.activeElement))
}

// Returns the next focusable element after a given element, ignoring elements in the current menu
export function getTabDestination(element, menuId) {
  // Prevent focusing on items in the menu (inline menu items will be right after opener)
  const menu = document.getElementById(menuId)
  const focusableElements = Array.from(document.querySelectorAll(focusableSelectors)).filter((el) =>
    menu ? !menu.contains(el) : true
  )
  const elementIndex = focusableElements.indexOf(element)

  const nextNonMenuElement = focusableElements[elementIndex + 1]
  return nextNonMenuElement
}

function setFocus(event, target) {
  event.preventDefault()
  event.stopPropagation()
  // `0` worked for all the browsers except for safari
  setTimeout(() => target?.focus(), 50)
}

function getMenuItems(menuId) {
  const menu = document.getElementById(menuId)
  if (!menu) return []
  return [...menu.querySelectorAll('[role="menuitem"]')]
}

export const handleListNavigationByKeys = (menuId) => (event) => {
  const { key } = event

  const allMenuItems = getMenuItems(menuId)
  const focusedIndex = getFocusedIndex(allMenuItems)
  if (key === 'ArrowDown') {
    const nextIndex = (focusedIndex + 1) % allMenuItems.length
    return setFocus(event, allMenuItems[nextIndex])
  }
  if (key === 'ArrowUp') {
    let nextIndex = focusedIndex - 1
    if (nextIndex < 0) nextIndex = allMenuItems.length - 1
    return setFocus(event, allMenuItems[nextIndex])
  }
  if (key === 'Home') {
    return setFocus(event, allMenuItems[0])
  }
  if (key === 'End') {
    return setFocus(event, allMenuItems[allMenuItems.length - 1])
  }
  if (focusedIndex >= 0 && key === 'Enter') {
    const current = allMenuItems[focusedIndex]
    return current?.click()
  }
  if (/[A-z]/.test(key)) {
    const matches = allMenuItems.filter((elem) => elem.textContent.toLowerCase().startsWith(key.toLowerCase()))
    if (matches?.length) {
      const nextIndex = (getFocusedIndex(matches) + 1) % matches.length
      return setFocus(event, matches[nextIndex])
    }
  }
  return true
}

// Opener button calls this when ArrowUp key pressed
export function focusLastMenuItem(event, menuId) {
  const allMenuItems = getMenuItems(menuId)
  setFocus(event, allMenuItems[allMenuItems.length - 1])
}
