import React, { cloneElement, forwardRef } from 'react'
import PropTypes from 'prop-types'
import { sanitizeProps, useRandomId } from '@fs/zion-frontend-friends'
import { useOnClose } from '../overlay'
import MenuOverlayList from './MenuOverlayList'
import MenuOverlayBase from './MenuOverlayBase'
import { MenuOverlayProvider } from './MenuOverlayContext'
import useMenuOverlay from './useMenuOverlay'

const UncontrolledMenuOverlay = forwardRef(
  ({ children, minWidth, menuButton, inline = true, 'aria-label': ariaLabel, onClose, ...props }, ref) => {
    const { menuId: ulId, menuButtonProps, ...overlay } = useMenuOverlay()
    const { isOpen, transitioning } = overlay
    // focus behavior is handled by the handleListNavigationByKeys since it is non-trivial

    useOnClose({
      isOpen,
      transitioning,
      onClose,
    })

    return (
      <div {...sanitizeProps(props)}>
        <div>
          {cloneElement(menuButton, {
            ...menuButtonProps,
            onClick: (event) => {
              overlay.handleClick(event)
              menuButton.props.onClick?.(event)
            },
          })}
        </div>

        <MenuOverlayBase {...overlay} menuId={ulId} inline={inline} minWidth={minWidth} ref={ref}>
          <MenuOverlayList {...overlay} id={ulId} aria-label={ariaLabel}>
            {children}
          </MenuOverlayList>
        </MenuOverlayBase>
      </div>
    )
  }
)

const ControlledMenuOverlay = forwardRef(
  (
    {
      children,
      inline,
      'aria-label': ariaLabel,
      minWidth,

      /** From useMenuOverlay() */
      menuId,
      menuButtonProps,

      /** From useOverlay() */
      open,
      close,
      isOpen,
      transitioning,
      targetRef,
      focusBackRef,
      autoFocus,
      handleTransitioned,
      handleClick,
      onClose,

      ...props
    },
    ref
  ) => {
    // In the future, require useMenuOverlay instead of useOverlay by throwing error if menuId is not present
    const randomId = useRandomId()
    const ulId = menuId || randomId

    const overlay = {
      isOpen,
      transitioning,
      open,
      close,
      handleClick,
      targetRef,
      focusBackRef,
      autoFocus,
      handleTransitioned,
    }

    useOnClose({
      isOpen,
      transitioning,
      onClose,
    })

    return (
      <div {...sanitizeProps(props)}>
        <MenuOverlayBase minWidth={minWidth} inline={inline} menuId={ulId} {...overlay} {...props} ref={ref}>
          <MenuOverlayList id={ulId} aria-label={ariaLabel} {...overlay} {...props}>
            {children}
          </MenuOverlayList>
        </MenuOverlayBase>
      </div>
    )
  }
)

const MenuOverlay = forwardRef(({ children, menuButton, ...props }, ref) => {
  return (
    <MenuOverlayProvider>
      {menuButton ? (
        <UncontrolledMenuOverlay menuButton={menuButton} {...props} ref={ref}>
          {children}
        </UncontrolledMenuOverlay>
      ) : (
        <ControlledMenuOverlay {...props} ref={ref}>
          {children}
        </ControlledMenuOverlay>
      )}
    </MenuOverlayProvider>
  )
})

export default MenuOverlay

MenuOverlay.propTypes = {
  /** the aria-label is read by screen readers to users to help them know type of menu it is. (Example: Submenu). */
  'aria-label': PropTypes.string,

  /** Optionally have the menu be next to the button in the DOM for better accessibilty.  If set to false, this overlay will be rendered in a portal instead. Use this prop if your overlay is being cut off because one of its ancestors has `overflow: hidden` */
  inline: PropTypes.bool,

  /** REQUIRED to use this OR {...useMenuOverlay()} props: JSX to display as the button that opens/closes the menu. */
  menuButton: PropTypes.node,

  /** Handler fired whenever the dialog is closed. Fires no matter how the dialog is closed. */
  onClose: PropTypes.func,

  /** REQUIRED to use this OR menuButton prop: Needs all the props provided from the useMenuOverlay hook in order to work. The `menuButtonProps` property must also be spread onto the button that opens the menu. */
  '{...useMenuOverlay()}': PropTypes.object,
}
