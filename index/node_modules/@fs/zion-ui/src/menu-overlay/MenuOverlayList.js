import React, { cloneElement, Fragment } from 'react'
import PropTypes from 'prop-types'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import List from '../list/List'
import { meta as ListItemMeta } from '../list/ListItem'

function cloneChildren({ children, handleItemSelection, close }) {
  // Remove fragments before trying to add click handler to list items.
  const flattenedChildren = flattenChildren(children)
  return flattenedChildren.map((child, index) => {
    const { startElement, endElement } = child.props
    return child?.type && // If the value is null, false, or undefined, don't try to clone it
      ([ListItemMeta.name].includes(child?.type?.meta?.name) || child?.props?.href)
      ? cloneElement(child, {
          // eslint-disable-next-line react/no-array-index-key -- TODO explain why it is fine to use key here
          key: `menuItem_${index}`,
          onClick: (e) => handleItemSelection(e, child.props.onClick),
          // Focus is programatically set on the parent <li>
          tabIndex: -1,
          startElement:
            startElement &&
            cloneElement(startElement, {
              onClick: () => {
                startElement.props?.onClick?.()
                close() // this prevents stacking overlays
              },
            }),
          endElement:
            endElement &&
            cloneElement(endElement, {
              onClick: () => {
                endElement.props?.onClick?.()
                close() // this prevents stacking overlays
              },
            }),
        })
      : child
  })
}

function flattenChildren(children) {
  const flattenedChildren = []

  function removeLayers(node) {
    if (!node) return null
    if (Array.isArray(node)) {
      return node.forEach((item) => removeLayers(item))
    }
    if (node.type === Fragment) {
      return removeLayers(node.props.children)
    }
    flattenedChildren.push(node)
    return null
  }

  removeLayers(children)
  return flattenedChildren
}

export default function MenuOverlayList({
  children,

  /** From useOverlay() */
  isOpen,
  transitioning,
  open,
  close,
  handleClick,
  targetRef,
  focusBackRef,
  handleTransitioned,

  'aria-label': ariaLabel,
  ...props
}) {
  const handleItemSelection = (e, childOnClick) => {
    // If they press esc, don't run the callback
    if (e.nativeEvent.code !== 'Escape') {
      childOnClick?.(e)
    }
    // We need to close the overlay in the next event loop so that default behavior has time to execute.
    // `Link`s don't fire on the Enter key otherwise because the User Agent fires the click event
    // on links _after_ the keyboard event is done firing. However since SyntheticEvents fire
    // synchronously - the user agent never receives the second native event because the element
    // has been removed from the DOM by then. Hence we have to give it time to fire.
    // EDIT: I don't think we need this setTimeout. Commenting it out to fix ZIONUI-1320.
    // setTimeout(() => close(), 50) // Firefox would not work if I put 0ms here, so I did 10 and that seemed to work on my machine, but not always - thats why I did 50
    close()
  }

  const clonedChildren = cloneChildren({ children, handleItemSelection, close })
  return (
    <List {...sanitizeProps(props)} aria-label={ariaLabel} role="menu">
      {clonedChildren}
    </List>
  )
}

MenuOverlayList.propTypes = {
  /** REQUIRED unless using an IconButton to handle the overlay: useOverlay() object used to determine if menu should be opened or not. */
  overlay: PropTypes.object,
}
