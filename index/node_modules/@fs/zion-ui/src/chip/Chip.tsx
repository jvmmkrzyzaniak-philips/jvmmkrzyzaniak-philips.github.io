import React, { forwardRef, useContext } from 'react'
import { css, cx } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import { useTheme } from '../theme'
import colorThemes from '../theme/themeSubsets'
import { WhiteThemeContext } from '../theme/white-theme'
import type { BaseButtonProps } from '../buttons/types'
import BaseChip from './BaseChip'
import { colorCss, lowChipCss, highChipCss } from './colorStyles'
import BaseButton from '../buttons/BaseButton'
import { textAcss } from '../typography/typographyStyles'

export const chipCss = css`
  line-height: 15px;
  position: relative;

  inset-inline-start: -2px; /* Visual adjustment for horizontal alignment with other elements */

  &[data-centered] {
    inset-inline-start: 0; /* this is a dumb idea when centered */
    margin: 0 auto !important;
  }

  &[data-inline] {
    display: inline-block;
  }
`

export const contentCss = css`
  cursor: pointer;
  height: 32px;
  padding: 8px 11px;

  &[data-inline] {
    height: 20px;
    padding: 2px 8px 3px;
  }
`

export type ChipProps = BaseButtonProps & {
  centered?: boolean
  color?: 'gray' | 'blue' | 'yellow' | 'red' | 'green' | 'purple'
  emphasis?: 'low' | 'high'
  emphasized?: boolean
  inline?: boolean
  role?: string
  selected?: boolean
}

const Chip = forwardRef<typeof BaseButton, ChipProps>(
  (
    {
      centered = false,
      children,
      className,
      color = 'gray',
      disabled,
      emphasis = 'high',
      inline,
      onClick,
      selected,
      to,
      ...props
    }: ChipProps,
    ref
  ): JSX.Element => {
    const isWhite = useContext(WhiteThemeContext)
    const isNight = useTheme() === 'night'
    const colorTheme = colorThemes[color]
    return (
      <BaseChip
        as={BaseButton}
        {...props}
        tabIndex={(onClick || to) && !disabled ? 0 : -1}
        aria-disabled={Boolean(disabled)}
        className={cx(
          chipCss,
          colorTheme,
          className,
          colorCss,
          textAcss,
          emphasis === 'low' ? lowChipCss : highChipCss
        )}
        data-centered={boolAttr(centered)}
        data-inline={boolAttr(inline)}
        data-selected={boolAttr(selected)}
        data-night={boolAttr(isNight)}
        data-white={boolAttr(isWhite)}
        data-gray-chip={boolAttr(color === 'gray')} // This helps in WhiteTheme when it goes white-on-white
        disabled={disabled}
        onClick={onClick}
        ref={ref}
        to={to}
      >
        {children}
      </BaseChip>
    )
  }
)

export default Chip
