import type { ReactNode, ElementType } from 'react'
import React, { forwardRef, useContext } from 'react'
import { css, cx } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import type { PolymorphicComponentPropsWithRef, PolymorphicRef } from '../polymorphic-prop-types'
import { useTheme } from '../theme'
import { WhiteThemeContext } from '../theme/white-theme'
import Avatar from '../avatar'
import type { AvatarProps } from '../avatar/Avatar'

export const baseChipCss = css`
  vertical-align: baseline;
  align-items: center;
  justify-content: center;

  max-width: 100%;
  width: fit-content;

  border: none;
  border-radius: 50px;
  transition: background-color 0.15s;

  &:focus {
    outline: none;
  }
`

const leftCss = css`
  --icon-inline-text: -0.38;
  display: inline-block;
  vertical-align: -7px;
  margin-top: -4px;
  margin-inline-start: -7px;
  margin-inline-end: 5px;
`

type ChipProps = {
  children?: ReactNode
  className?: string
  disabled?: boolean
  tabIndex?: number
  inline?: boolean
  avatarProps?: AvatarProps
  Icon?: ElementType
}

type ChipLetSideProps = {
  Icon?: ElementType
  avatarProps?: AvatarProps
}

export const ChipLeftSide = ({ avatarProps, Icon }: ChipLetSideProps): JSX.Element => {
  if (avatarProps) {
    return (
      <div className={leftCss}>
        <Avatar {...avatarProps} size="xs" />
      </div>
    )
  }
  if (Icon) {
    return (
      <div className={leftCss}>
        <Icon aria-hidden size="sm" />
      </div>
    )
  }
  return null
}

type BaseChipProps<C extends React.ElementType> = PolymorphicComponentPropsWithRef<C, ChipProps>
type BaseChipComponent = <C extends React.ElementType = 'span'>(props: BaseChipProps<C>) => React.ReactElement | null
const BaseChip: BaseChipComponent = forwardRef(
  <C extends React.ElementType = 'span'>(
    { as, children, className, disabled, tabIndex, Icon, avatarProps, inline, ...props }: BaseChipProps<C>,
    ref: PolymorphicRef<C>
  ) => {
    const TagName = as || 'div'
    const isWhite = useContext(WhiteThemeContext)
    const isNight = useTheme() === 'night'

    return (
      <TagName
        className={cx(className, baseChipCss)}
        data-white={boolAttr(isWhite)}
        data-night={boolAttr(isNight)}
        aria-disabled={disabled}
        disabled={disabled}
        tabIndex={tabIndex}
        {...props}
        ref={ref}
      >
        {!inline && <ChipLeftSide avatarProps={avatarProps} Icon={Icon} />}
        {children}
      </TagName>
    )
  }
)

export default BaseChip
