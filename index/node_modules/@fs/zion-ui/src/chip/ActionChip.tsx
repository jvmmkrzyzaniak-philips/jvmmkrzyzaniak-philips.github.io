import React, { forwardRef, useContext } from 'react'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { WhiteThemeContext } from '../theme/white-theme'
import Ellipsis from '../ellipsis'
import Chip, { contentCss } from './Chip'

// Both variants need !important to prevent BaseChip from overriding the max-width in production. See ZIONUIV13-185.
const lowEmphasisCss = css`
  margin: 0 -8px;
  max-width: calc(100% + 17px) !important; // Need to account for the negative margins
`

const lowEmphasisWithLeftCss = css`
  margin-inline-start: -4px;
`

const lowEmphasisInlineCss = css`
  margin: 0 -6px;
  max-width: calc(100% + 13px) !important; // Need to account for the negative margins
`

type ActionChipProps = PropTypes.InferProps<typeof propTypes>

const ActionChip = forwardRef(
  (
    { avatarProps, description, emphasis = 'high', selected, Icon, inline, label, color, ...props }: ActionChipProps,
    ref
  ) => {
    const isWhite = useContext(WhiteThemeContext)
    const classNames = [contentCss]

    if (emphasis === 'low') {
      if (inline) {
        classNames.push(lowEmphasisInlineCss)
      } else {
        classNames.push(lowEmphasisCss)
        if (Icon || avatarProps) classNames.push(lowEmphasisWithLeftCss)
      }
    }

    return (
      <Ellipsis
        as={Chip}
        {...sanitizeProps(props)}
        color={color ?? (selected && !isWhite ? 'blue' : 'gray')}
        selected={selected && !inline}
        className={cx(...classNames)}
        label={label}
        description={description}
        emphasis={emphasis}
        inline={inline}
        ref={ref}
        Icon={!inline && Icon}
        avatarProps={!inline && avatarProps}
      >
        {label}
      </Ellipsis>
    )
  }
)

const propTypes = {
  /** An alternate color for the chip */
  color: PropTypes.oneOf(['gray', 'blue', 'yellow', 'red', 'green', 'purple'] as const),

  /** Tooltip description.  If present, a DescriptionTooltip is placed on the chip with this description. */
  description: PropTypes.string,

  /** The text that is displayed in the chip */
  label: PropTypes.string.isRequired,

  /**
   * Path to the route.
   * Example: to="/frontier/app/react".
   * See https://reacttraining.com/react-router/web/api/Link for all options.
   */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),

  /** For using Link outside of the Router. This prop is not needed for full urls. */
  external: PropTypes.bool,

  /** Name for analytics tracking. */
  linkName: PropTypes.string,

  /** Target of the anchor tag. */
  target: PropTypes.oneOf(['_self', '_blank', '_parent', '_top']),

  /** The callback for when the user clicks on the chip */
  onClick: PropTypes.func,

  /** Show if the chip is clickable or not */
  disabled: PropTypes.bool,

  /** Use this property if you need a chip that is more diminutive that the standard chip. */
  emphasis: PropTypes.oneOf(['low', 'high'] as const),

  /** Turn the chip blue (because the user has selected it) */
  selected: PropTypes.bool,

  /** Optional icon displayed to the left of the label. */
  Icon: PropTypes.func,

  /** Show a smaller chip, to be used inline with text. */
  inline: PropTypes.bool,

  /** All ActionChip clicks are throttled automatically to once every 300ms. Set this to 0 if your onClick callback is _truly_ volatile. */
  debounce: PropTypes.number,

  /** A config object for the Avatar (You may not change the size) */
  avatarProps: PropTypes.shape({
    /** Copied from avatar */
    src: PropTypes.string,
    monogram: PropTypes.string,
    presence: PropTypes.oneOf(['online', 'offline'] as const),
    sex: PropTypes.oneOf(['female', 'male', 'unknown'] as const),
    gray: PropTypes.bool,
    imageFailedCallback: PropTypes.func,
  }),

  /** Whether to center the Chip horizontally */
  centered: PropTypes.bool,
}

ActionChip.propTypes = propTypes
export default ActionChip
