import React, { useState, useEffect } from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { trackEvent } from '@fs/zion-analytics'
import Row from '../row'
import ChoiceChip, { propTypes as choiceChipPropTypes } from './ChoiceChip'
import { colors } from '../theme'
import InputLabel from '../input-label'

const containerCss = css`
  margin-bottom: 12px;
`

const activeChips = css`
  outline: none;
  &:focus-within label[active] {
    background: ${colors.transparent.blue10};
    border-color: ${colors.transparent.blue10};
    color: ${colors.blue90};
  }
`

const inactiveChips = css`
  &:focus-within label[clickable] {
    background: ${colors.transparent.gray10};
    border-color: ${colors.transparent.gray10};
    color: ${colors.gray100};
  }
`

const labelCss = css`
  margin-bottom: 4px;
`

type ChoiceChipsProps = PropTypes.InferProps<typeof propTypes> & {
  isInForm?: boolean
}

export default function ChoiceChips({
  chips,
  name,
  onSelectionChange,
  disabled: groupDisabled,
  label: groupLabel,
  linkName,
  debounce = 200,
  throttle, // deprecated - remove in v10

  /** [HIDDEN]: For internal Zion-UI use only */
  isInForm, // used by @fs/zion-form

  ...props
}: ChoiceChipsProps): JSX.Element {
  const [checked, setChecked] = useState(() => {
    const defaultSelectedChip = chips.find((c) => c.selected)
    return defaultSelectedChip || null
  })

  useEffect(() => {
    setChecked(chips.find((c) => c.selected))
  }, [chips])

  function handleChange(chip): void {
    setChecked(chip)
    onSelectionChange && onSelectionChange(chip)

    // If linkName was supplied and the chip is being activated, track a click event
    if ((chip.linkName || linkName) && !chip.checked) {
      trackEvent({
        event_name: 'click_action',
        link_name: chip.linkName || linkName,
      })
    }
  }

  return (
    <div {...sanitizeProps(props)} className={containerCss}>
      {groupLabel && (
        <div className={labelCss}>
          <InputLabel disabled={groupDisabled}>{groupLabel}</InputLabel>
        </div>
      )}
      <Row wrap className={checked ? activeChips : inactiveChips} gutters="xxs">
        {chips.map((chip) => {
          // eslint-disable-next-line @typescript-eslint/no-unused-vars -- do not pass in linkName since it's actually used in this component and not the ChoiceChip component
          const { value, label, disabled, onChange, linkName: ignored, ...chipProps } = chip

          return (
            <ChoiceChip
              {...sanitizeProps(chipProps)}
              key={label}
              debounce={throttle ?? debounce}
              selected={!!(checked && checked.value === chip.value)}
              label={label}
              value={value}
              isInForm={isInForm}
              onChange={(evt) => {
                onChange && onChange(evt)
                return handleChange(chip)
              }}
              name={name}
              disabled={groupDisabled || disabled}
            />
          )
        })}
      </Row>
    </div>
  )
}

export const meta = {
  name: 'ChoiceChips',
  noValidation: true,
}

ChoiceChips.meta = meta

const propTypes = {
  /** The data to generate individual Chips from. */
  chips: PropTypes.arrayOf(
    PropTypes.shape({
      ...choiceChipPropTypes,
      value: PropTypes.string.isRequired,
    })
  ).isRequired,

  /** Debounce time in ms. */
  debounce: PropTypes.number,

  /** Optional. Name for analytics tracking. */
  linkName: PropTypes.string,

  /** The callback for when the user changes selections from the list of chips. */
  onSelectionChange: PropTypes.func,

  /** The group name. */
  name: PropTypes.string.isRequired,

  /** Disables all of the choice chips if true. */
  disabled: PropTypes.bool,

  /** The label placed above the choice chips. */
  label: PropTypes.string,

  /** The throttle to place on the ChoiceChip props. - deprecated when remove in v10 */
  throttle: PropTypes.number,
}

ChoiceChips.propTypes = propTypes
