import type { MutableRefObject, ElementType } from 'react'
import React from 'react'
import { useRandomId, boolAttr } from '@fs/zion-frontend-friends'
import { css, cx } from '@linaria/core'
import PropTypes from 'prop-types'
import _debounce from 'lodash.debounce'
import colorThemes from '../theme/themeSubsets'
import Ellipsis from '../ellipsis'
import BaseChip, { ChipLeftSide } from './BaseChip'
import { chipCss } from './Chip'
import { colorCss, highChipCss } from './colorStyles'
import type { AvatarProps } from '../avatar/Avatar'
import { textAcss } from '../typography/typographyStyles'

const containerCss = css`
  display: flex;
`

const radioCss = css`
  cursor: inherit;
  opacity: 0;
  // Hide visually, without absolute positioning (which caused a scrolled page to jump on ChoiceChip click)
  width: 1px;
  margin: 0;
  margin-inline-end: -1px;
`

const labelCss = css`
  cursor: pointer;
  height: 32px;
  padding: 8px 11px;
`

type ChoiceChipProps = {
  /** Tooltip description.  If present, a DescriptionTooltip is placed on the chip with this description. */
  description?: string

  /** The label shown on the chip. */
  label: string

  /** Optional. Name for analytics tracking. */
  linkName?: string

  /** Debounce time in ms. */
  debounce?: number

  /** ChoiceChip clicks are throttled automatically to once every 300ms. Set this to 0 if your onClick callback is _truly_ volatile. */
  throttle?: number

  /** Whether or not this chip is currently selected. */
  selected: boolean

  chipRef?: MutableRefObject<HTMLInputElement>
  isInForm?: boolean

  avatarProps?: AvatarProps

  Icon?: ElementType
} & React.InputHTMLAttributes<HTMLInputElement>

export default function ChoiceChip({
  debounce = 200,
  description,
  disabled,
  label,
  onChange,
  selected,
  chipRef, // used by @fs/zion-form
  isInForm, // used by @fs/zion-form
  avatarProps,
  Icon,
  ...props
}: ChoiceChipProps): JSX.Element {
  const id = useRandomId()

  const colorTheme = selected ? colorThemes.blue : colorThemes.gray

  return (
    <BaseChip
      className={cx(chipCss, containerCss, highChipCss, colorTheme, colorCss)}
      data-selected={boolAttr(selected)}
      aria-disabled={disabled}
    >
      <input
        checked={isInForm ? undefined : selected}
        className={radioCss}
        disabled={disabled}
        id={id}
        onChange={onChange ? _debounce(onChange, debounce, { leading: true, trailing: false }) : undefined}
        ref={chipRef}
        type="radio"
        {...props}
      />
      <Ellipsis
        as="label"
        htmlFor={id}
        className={cx(labelCss, textAcss)}
        data-selected={boolAttr(selected)}
        aria-disabled={disabled}
        description={description}
      >
        <ChipLeftSide avatarProps={avatarProps} Icon={Icon} />
        {label}
      </Ellipsis>
    </BaseChip>
  )
}

export const propTypes = {
  /** Tooltip description.  If present, a DescriptionTooltip is placed on the chip with this description. */
  description: PropTypes.string,

  /** Disables the chip. If disabled is passed to the ChoiceChips parent, it overrules this. */
  disabled: PropTypes.bool,

  /** The label shown on the chip. */
  label: PropTypes.string.isRequired,

  /** Optional. Name for analytics tracking. */
  linkName: PropTypes.string,

  /** The name used to associate this chip with other choice chips (like a radio button). */
  name: PropTypes.string,

  /** Handler ran when this chip is selected/deselected. */
  onChange: PropTypes.func,

  /** Function for using onBlur attribute in input tag. */
  onBlur: PropTypes.func,

  /** Debounce time in ms. */
  debounce: PropTypes.number,

  /** ChoiceChip clicks are throttled automatically to once every 300ms. Set this to 0 if your onClick callback is _truly_ volatile. */
  throttle: PropTypes.number,

  /** Whether or not this chip is currently selected. */
  selected: PropTypes.bool,

  /** Add custom props to the choice chip's radio input element. */
  inputProps: PropTypes.object,

  /** A config object for the Avatar (You may not change the size) */
  avatarProps: PropTypes.shape({
    /** Copied from avatar */
    src: PropTypes.string,
    monogram: PropTypes.string,
    presence: PropTypes.oneOf(['online', 'offline'] as const),
    sex: PropTypes.oneOf(['female', 'male', 'unknown'] as const),
    gray: PropTypes.bool,
    imageFailedCallback: PropTypes.func,
  }),

  /** Optional icon displayed to the left of the label. */
  Icon: PropTypes.func,
}
