import React, { useEffect } from 'react'
import PropTypes from 'prop-types'
import disableBodyScroll from './bodyScrollLock'

export default function useBodyScrollLock(locked, ref) {
  useEffect(() => {
    const target = ref?.current
    if (target && locked) {
      return disableBodyScroll(target, {
        reserveScrollBarGap: true,
      })
    }
    return () => {}
  }, [locked, ref])
}

// This is just a dummy component so that we can use propTypes to make things easier to document
export const HookParameters = (props) => <div {...props} />

const DomElement = typeof Element === 'undefined' ? () => {} : Element

HookParameters.propTypes = {
  /** If true, then scrolling will be locked on the body. */
  locked: PropTypes.bool,

  /** Ref to the container that will still be scrollable, even when scroll-lock is enabled. */
  ref: PropTypes.oneOfType([
    // Either a function
    PropTypes.func,
    // Or the instance of a DOM native element
    PropTypes.shape({ current: PropTypes.instanceOf(DomElement) }),
  ]),
}
