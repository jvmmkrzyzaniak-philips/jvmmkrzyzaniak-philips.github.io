// Adopted and modified solution from Will Po (2018)
// https://github.com/willmcpo/body-scroll-lock/blob/master/LICENSE

type BodyScrollOptions = {
  reserveScrollBarGap?: boolean
}

type Lock = {
  targetElement: HTMLElement
  options: BodyScrollOptions
}

type Handlers = {
  preventDefault: (rawEvent: TouchEvent) => boolean
  preventScroll: () => void
}

// Older browsers don't support event options, so we feature detect it here.
let hasPassiveEvents = false
if (typeof window !== 'undefined') {
  const passiveTestOptions = {
    get passive() {
      hasPassiveEvents = true
      return undefined
    },
  }
  window.addEventListener('testPassive', null, passiveTestOptions)
  window.removeEventListener('testPassive', null)
}

let locks: Lock[] = []
let previousBodyOverflowSetting: string
let previousBodyPaddingRight: string

// returns true if `el` should be allowed to receive touchmove events.
const allowTouchMove = (el: EventTarget): boolean => {
  if (el !== document.body && el !== document.getElementById('app-content-scroller')) return true
  return false
}

const getHandlers = (): Handlers => {
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop
  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft
  const preventScroll = (): void => window.scrollTo(scrollLeft, scrollTop)
  const preventDefault = (rawEvent: TouchEvent): boolean => {
    const e = rawEvent || (window.event as TouchEvent)
    if (allowTouchMove(e.target)) return true
    // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).
    if (e.touches?.length > 1) return true
    e.preventDefault?.()
    return false
  }
  return { preventDefault, preventScroll }
}

const addEventListeners = ({ preventDefault, preventScroll }: Handlers): void => {
  document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined)
  document.addEventListener('scroll', preventScroll, hasPassiveEvents ? { passive: false } : undefined)
  document
    .getElementById('app-content-scroller')
    ?.addEventListener('scroll', preventScroll, hasPassiveEvents ? { passive: false } : undefined)
}

const removeEventListeners = ({ preventDefault, preventScroll }: Handlers): void => {
  document.removeEventListener('touchmove', preventDefault)
  document.removeEventListener('scroll', preventScroll)
  document.getElementById('app-content-scroller')?.removeEventListener('scroll', preventScroll)
}

const setOverflowHidden = (options?: BodyScrollOptions): void => {
  const reserveScrollBarGap = !!options && options.reserveScrollBarGap === true
  const scrollBarGap = window.innerWidth - document.documentElement.clientWidth
  if (reserveScrollBarGap && scrollBarGap > 0) {
    const contentScroller = document.getElementById('app-content-scroller')
    if (contentScroller) {
      const computedBodyPaddingRight = parseInt(
        window.getComputedStyle(contentScroller).getPropertyValue('padding-inline-end'),
        10
      )
      previousBodyPaddingRight = contentScroller.style.paddingInlineEnd
      contentScroller.style.paddingInlineEnd = `${computedBodyPaddingRight + scrollBarGap}px`
    }
  }

  previousBodyOverflowSetting = document.body.style.overflow
  document.body.style.overflow = 'hidden'
}

const restoreOverflowSetting = (): void => {
  const contentScroller = document.getElementById('app-content-scroller')
  if (contentScroller) {
    contentScroller.style.paddingInlineEnd = previousBodyPaddingRight
  }
  document.body.style.overflow = previousBodyOverflowSetting
}

const disableBodyScroll = (targetElement: HTMLElement, options?: BodyScrollOptions): (() => void) => {
  if (!targetElement) {
    throw new Error('disableBodyScroll must be given a targetElement')
  }

  locks.push({
    targetElement,
    options: options || {},
  })

  // only set body.overflow once
  if (locks.length === 1) setOverflowHidden(options)

  const { preventDefault, preventScroll } = getHandlers()
  addEventListeners({ preventDefault, preventScroll })

  return () => {
    removeEventListeners({ preventDefault, preventScroll })
    locks = locks.filter((lock) => lock.targetElement !== targetElement)
    if (locks.length === 0) restoreOverflowSetting()
  }
}

export default disableBodyScroll
