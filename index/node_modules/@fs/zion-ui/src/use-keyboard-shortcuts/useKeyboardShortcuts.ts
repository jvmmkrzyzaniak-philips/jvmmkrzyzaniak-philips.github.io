import { useRef, useEffect } from 'react'
import useEventStack from '../use-event-stack'
import { KeyboardShortcutsContext } from './KeyboardShortcutsProvider'

type ReturnsBoolSometimes = ((e?: KeyboardEvent) => boolean) | ((e?: KeyboardEvent) => void)

export type Handler = {
  /* The title that shows up when a user types '?' to get the list of shortcuts */
  title: string

  /* The code you want to run when the given key is pressed */
  action: ReturnsBoolSometimes
}

type ModifiersHandlerType = {
  /* The handler to use if a user is presing the ctrl key or the cmd key when the key is pressed */
  ctrl?: Handler

  /* The handler to use if a user is presing the shift key when the key is pressed */
  shift?: Handler

  /* The handler to use if a user is presing the shift key and (either the ctrl key or the cmd keys) when the key is pressed */
  ctrlAndShift?: Handler
}

export type HandlerType = (Handler & ModifiersHandlerType) | ModifiersHandlerType

type PossibleKeys =
  | 'AltLeft'
  | 'AltRight'
  | 'ArrowDown'
  | 'ArrowLeft'
  | 'ArrowRight'
  | 'ArrowUp'
  | 'Backspace'
  | 'Comma'
  | 'ControlLeft'
  | 'ControlRight'
  | 'CtrlLeft'
  | 'CtrlRight'
  | 'Digit0'
  | 'Digit1'
  | 'Digit2'
  | 'Digit3'
  | 'Digit4'
  | 'Digit5'
  | 'Digit6'
  | 'Digit7'
  | 'Digit8'
  | 'Digit9'
  | 'Enter'
  | 'Equal'
  | 'Escape'
  | 'F1'
  | 'F2'
  | 'F3'
  | 'F4'
  | 'F5'
  | 'F6'
  | 'F7'
  | 'F8'
  | 'F9'
  | 'F10'
  | 'F11'
  | 'F12'
  | 'KeyA'
  | 'KeyB'
  | 'KeyC'
  | 'KeyD'
  | 'KeyE'
  | 'KeyF'
  | 'KeyG'
  | 'KeyH'
  | 'KeyI'
  | 'KeyJ'
  | 'KeyK'
  | 'KeyL'
  | 'KeyM'
  | 'KeyN'
  | 'KeyO'
  | 'KeyP'
  | 'KeyQ'
  | 'KeyR'
  | 'KeyS'
  | 'KeyT'
  | 'KeyU'
  | 'KeyV'
  | 'KeyW'
  | 'KeyX'
  | 'KeyY'
  | 'KeyZ'
  | 'MetaLeft'
  | 'MetaRight'
  | 'Minus'
  | 'Period'
  | 'ShiftLeft'
  | 'ShiftRight'
  | 'Slash'
  | 'Space'
  | 'Tab'

export type HandlersType = {
  [Key in PossibleKeys | 'wildCard']?: Key extends 'wildCard'
    ? {
        action: ReturnsBoolSometimes
      }
    : HandlerType
}

const checkHandlerTitles = (handlers: HandlersType | HandlerType, prefix = ''): void => {
  if (typeof handlers !== 'object') return
  Object.keys(handlers).forEach((key) => {
    if (['wildCard', 'Escape', 'title', 'action'].includes(key)) {
      return
    }

    const handler = handlers[key] as Handler

    checkHandlerTitles(handler, `${prefix}${key}-`)

    if (handler.action && !handler.title) {
      throw new Error(`All Keyboard Shortcuts need to have a title. Title was missing for ${prefix}${key}`)
    }
    if (handler.title && !handler.action) {
      throw new Error(`Missing action for keyboard shortcut: ${prefix}${key}`)
    }
  })
}

type UseKeyboardShortcutsType = {
  handlers: HandlersType
  enabled: boolean
}

const getEquivalentKey = (code: string): PossibleKeys => {
  // I'm certain no one will ever want to support a different action for the numpad enter key
  // than the regular enter key. That would be foolish and confusing.
  if (code === 'NumpadEnter') return 'Enter'

  return code as PossibleKeys
}

export default function useKeyboardShortcuts({ handlers, enabled }: UseKeyboardShortcutsType): void {
  checkHandlerTitles(handlers)
  const handlerRef = useRef<ReturnsBoolSometimes>()

  useEffect(() => {
    const keyHandler: ReturnsBoolSometimes = (e: KeyboardEvent) => {
      // if wasIgnored ever becomes false, i.e, a handler handled the shortcut, then the handler will stop propagation, prevent defaults, and stop the eventStack from running other handlers
      let wasIgnored: boolean | void = true
      let preventDefault: boolean | void = true

      // run the wildCard handler first to determine if the other handlers should run
      if (handlers.wildCard) {
        wasIgnored = handlers.wildCard.action(e)
        // we do not prevent default when the shortcut was handled by the wildCard handler because inputs need to print characters
        preventDefault = wasIgnored
      }

      const handler = handlers[getEquivalentKey(e.code)]
      // do not run the other handlers if wildCard handler handled the shortcut
      if (wasIgnored && handler) {
        const { shift, ctrl, ctrlAndShift } = handler
        const action = (handler as Handler).action
        // basic key with no modifiers
        if (!e.ctrlKey && !e.metaKey && !e.shiftKey) {
          if (!action) return true

          // Boolean(action()) should always return false unless someone deliberately wants to run more than one keyboard shortcut
          wasIgnored = Boolean(action(e))
        }
        // ctrl modifier
        if (ctrl && (e.ctrlKey || e.metaKey) && !e.shiftKey) {
          wasIgnored = Boolean(ctrl.action(e))
        }
        // shift modifier
        if (shift && !e.ctrlKey && !e.metaKey && e.shiftKey) {
          wasIgnored = Boolean(shift.action(e))
        }
        // ctrl + shift modifier
        if (ctrlAndShift && (e.ctrlKey || e.metaKey) && e.shiftKey) {
          wasIgnored = Boolean(ctrlAndShift.action(e))
        }
      }

      if (!wasIgnored && preventDefault) {
        e.preventDefault()
      }

      // if wasIgnored is true, tell EventStackProvider to run the next handler in the stack
      return wasIgnored
    }
    handlerRef.current = keyHandler
  }, [handlers])

  useEventStack({
    Context: KeyboardShortcutsContext,
    enabled,
    handlerRef,
  })
}
