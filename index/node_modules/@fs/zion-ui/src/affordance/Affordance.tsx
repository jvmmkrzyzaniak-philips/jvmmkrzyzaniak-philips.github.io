import React, { forwardRef } from 'react'
import { css, cx } from '@linaria/core'
import { colors } from '../theme'
import BaseButton from '../buttons/BaseButton'
import type { BaseButtonProps } from '../buttons/types'

const affordanceCss = css`
  color: currentColor;
  transition: background 0.3s;
  border-radius: 4px;

  padding: 0 var(--affordance-margin);
  margin: 0 calc(var(--affordance-margin) * -1);

  /* Adds on whatever negative margin we have x2 to the width to make it the proper width */
  width: calc(100% + var(--affordance-margin) * 2);

  /* Get rid of default button styling */
  -webkit-tap-highlight-color: transparent;
  background: transparent;
  outline: none;
  border: none;
  font-size: inherit;
  display: block;

  &:not([aria-disabled='true']) {
    cursor: pointer;

    &:focus-visible,
    &:hover {
      background: ${colors.transparent.gray03};
    }

    &:active {
      background: ${colors.transparent.gray05};
    }
  }
`

type AffordanceProps = BaseButtonProps & {
  /** Horizontal margins for the highlighted area when hovered.  */
  margin?: 'none' | 'nano' | 'xxs' | 'xs' | 'sm' | 'md'
}

const Affordance = forwardRef<Element, AffordanceProps>(
  ({ children, className, style, margin = 'xs', disabled, ...buttonProps }: AffordanceProps, ref): JSX.Element => {
    return (
      <BaseButton
        {...buttonProps}
        ref={ref}
        className={cx(className, affordanceCss)}
        style={{
          // Unlike MarginBox, these values are _not_ responsive (except when using 'bleed' and the bleed css vars happens to be responsive).
          '--affordance-margin': `var(--spacer-${margin})`,
          ...style,
        }}
        disabled={disabled}
      >
        {children}
      </BaseButton>
    )
  }
)

export default Affordance
