import React from 'react'
import { trackEvent } from '@fs/zion-analytics'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { ArrowCaret } from '@fs/zion-icon'
import PropTypes from 'prop-types'
import { Row } from '../index'
import { useExpanderContext } from './Expander'
import Affordance from '../affordance'
import MarginBox from '../margin-box'

export default function ExpanderHeader({
  children,
  openedTitle,
  closedTitle,
  gutters = 'xs',
  marginY = 'nano',
  'aria-label': ariaLabel,
  ...props
}) {
  const { linkName, open, setOpen, ariaControlsId } = useExpanderContext()

  const label = ariaLabel || (open ? openedTitle : closedTitle)

  return (
    <Affordance
      aria-label={label}
      aria-expanded={open ? 'true' : 'false'}
      aria-controls={ariaControlsId}
      margin={gutters}
      onClick={() => {
        setOpen(!open)

        // If linkName was supplied, track a click event on open
        linkName &&
          trackEvent({
            event_name: 'click_action',
            link_name: `${linkName}:${open ? 'Collapse' : 'Expand'}`,
          })
      }}
      {...sanitizeProps(props)}
    >
      <Row alignY="middle" gutters={gutters}>
        <MarginBox growX marginY={marginY}>
          {children}
        </MarginBox>
        <ArrowCaret noShrinkX dense direction={open ? 'up' : 'down'} />
      </Row>
    </Affordance>
  )
}

ExpanderHeader.propTypes = {
  /** The contents of the expander header. */
  children: PropTypes.node,

  /** String used as the aria-label when the expander is open. */
  openedTitle: PropTypes.string,

  /** String used as the aria-label when the expander is closed. */
  closedTitle: PropTypes.string,

  /** How much vertical margin to add */
  marginY: PropTypes.oneOf(['nano', 'xxs', 'xs', 'sm', 'md']),
}
