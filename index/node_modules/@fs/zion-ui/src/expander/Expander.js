import React, { createContext, useContext, useMemo, useState } from 'react'
import PropTypes from 'prop-types'
import { useRandomId } from '@fs/zion-frontend-friends'

const ExpanderContext = createContext({ missingContext: true, open: false, setOpen: () => {}, ariaControlsId: '' })
export const useExpanderContext = () => {
  const { missingContext, ...expanderContext } = useContext(ExpanderContext)
  if (missingContext && process.env.NODE_ENV === 'development')
    console.error(
      'useExpanderContext must be used within an Expander. This typically means you have an ExpanderContent without an Expander around it.'
    )
  return expanderContext
}

function ControlledExpander({ children, linkName, open, setOpen, ariaControlsId }) {
  const value = useMemo(() => ({ linkName, open, setOpen, ariaControlsId }), [ariaControlsId, linkName, open, setOpen])
  return <ExpanderContext.Provider value={value}>{children}</ExpanderContext.Provider>
}

function UncontrolledExpander({ initiallyOpen = false, ...props }) {
  const [open, setOpen] = useState(initiallyOpen)
  return <ControlledExpander {...{ ...props, initiallyOpen, open, setOpen }} />
}

export default function Expander({ ariaControlsId, ...props }) {
  const controlsId = useRandomId(ariaControlsId)
  const { setOpen } = props
  return setOpen ? (
    <ControlledExpander {...props} ariaControlsId={controlsId} />
  ) : (
    <UncontrolledExpander {...props} ariaControlsId={controlsId} />
  )
}

Expander.propTypes = {
  /** Optional. Name for analytics tracking. */
  linkName: PropTypes.string,
  /** Optional. State for whether or not the expander is open. */
  open: PropTypes.bool,
  /** Optional. State setter for whether or not the expander is open. Required if the "open" prop is provided. */
  setOpen: PropTypes.func,
  /** If "open" and "setOpen" are not provided, this can be used to set the expander to be open by default. */
  initiallyOpen: PropTypes.bool,
  /** Must use this if you are not using ExpanderHeader. Assign the same value here that you set on a custom control button's aria-controls */
  ariaControlsId: PropTypes.string,
}
