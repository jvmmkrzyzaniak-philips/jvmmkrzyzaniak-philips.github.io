import type { ElementType, ReactNode } from 'react'
import React, { forwardRef, useState } from 'react'
import type { DialogOverlayBaseProps } from './DialogOverlayBase'
import DialogOverlayBase from './DialogOverlayBase'
import DialogOverlayContent from './DialogOverlayContent'
import { DialogFooterWrapper as FooterWrapper, DialogFooterContext } from './DialogOverlayFooter'
import DialogHeader from './DialogOverlayHeader'
import type { PolymorphicComponentPropsWithRef, PolymorphicRef } from '../polymorphic-prop-types'
import useA11yLabelRef from '../use-a11y-ref-label'

type DialogOverlayProps = Omit<DialogOverlayBaseProps, 'header' | 'ContentWrapper'> & {
  /**
   * the text that goes in the sub heading - should usually be a string, but JSX is allowed,
   * as long as it's not interactive, because this is part of a draggable header.
   */
  title?: ReactNode

  /**
   * the text that goes in the sub heading - should usually be a string, but JSX is allowed,
   * as long as it's not interactive, because this is part of a draggable header.
   */
  subtitle?: ReactNode

  /**
   * The text that will display in the tool tip when hovering over the close button and what
   * the screen reader will read when focusing on the close button
   */
  closeLabel?: string

  /** Content to go inside the body of the overlay. */
  children: ReactNode

  /** Content to go inside the footer of the overlay. */
  footer?: ReactNode

  /**
   * This is a flag designed to set aria-busy inside the overlay.
   *
   * Set to `true` when fetching data to help indicate to screen readers that the app is in
   * an intermediate state
   */
  busy?: boolean
}

const DialogOverlay = forwardRef(
  <C extends ElementType = 'div'>(
    {
      title,
      subtitle,
      children,
      footer,
      busy,
      'aria-label': ariaLabel,
      ...props
    }: PolymorphicComponentPropsWithRef<C, DialogOverlayProps>,
    ref: PolymorphicRef<C>
  ): JSX.Element => {
    const [extractedFooter, setExtractedFooter] = useState<ReactNode>(null)
    const [a11yLabel, labelRef] = useA11yLabelRef(ariaLabel)

    return (
      <DialogOverlayBase
        header={<DialogHeader title={title} subtitle={subtitle} ref={labelRef} />}
        footer={footer || extractedFooter ? <FooterWrapper>{footer || extractedFooter}</FooterWrapper> : undefined}
        ref={ref}
        aria-label={a11yLabel}
        {...props}
      >
        <DialogFooterContext.Provider value={setExtractedFooter}>
          <DialogOverlayContent aria-busy={Boolean(busy)}>{children}</DialogOverlayContent>
        </DialogFooterContext.Provider>
      </DialogOverlayBase>
    )
  }
)

export default DialogOverlay

/** ### _A Modal window that can be used to gather input from a user._
 *
 * Because Dialog Overlay is a modal window, it is, by its nature, an interruption to the user
 * and demands their focus. As such, designers should avoid over-using this pattern. Generally,
 * it should be used for the following purposes:
 *
 * 1. When the system is awaiting short input or command in order to proceed or when the system
 *    requires the user to make a mission-critical decision.
 * 2. As a quick portal to pick something from somewhere else and bring it back to do their job.
 *
 * > Note: Dialog Overlay is not meant to be used simply as an alternative to a page. It cannot be
 * > opened in a new tab/window (i.e. `<CTRL>/<CMD>+<click>`) like a regular web page.
 *
 */
export const DialogOverlayPropsTableComponent = (props: Partial<DialogOverlayProps>): JSX.Element => <div>{props}</div>
