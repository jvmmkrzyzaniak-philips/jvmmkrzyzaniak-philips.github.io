import type { ReactNode, PropsWithChildren } from 'react'
import React, { forwardRef } from 'react'
import { css } from '@linaria/core'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { ResponsiveProvider } from '../responsive'

import MarginBox from '../margin-box'
import { GridStart } from '../grid'
import BorderScroller from '../border-scroller'

type DialogContentProps = PropsWithChildren<{
  children: ReactNode
}>

const contentWrapperCss = css`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
`

export default forwardRef<HTMLElement, DialogContentProps>(({ children, ...props }, ref) => (
  // The ResponsiveProvider needs to be outside of the BorderScroller or else content that has width-based heights (i.e. using --cell-width or --grid-width
  // values to determine height) will cause stroby resize loops at certain sizes due to the scrollbar changing the width of the ResponsiveProvider when it appears/disappears. (ZIONUI-1398)
  // NOTE: We have tried other methods (mainly trying to keep --cell-width and --grid-width consistent) to counteract this, but they both came with caveats.
  //  1. using negative margins makes the scrollbar overlap the content if there isn't enough margin.
  //  2. Adding the width of the scrollbar to the overlays is doable, but it is complicated, hard to maintain, can still behave a bit wonky sometimes.
  <ResponsiveProvider className={contentWrapperCss} style={{ overflow: 'hidden' }}>
    <BorderScroller>
      <MarginBox marginX="sm" marginY="xs" className={contentWrapperCss}>
        <GridStart ref={ref} {...sanitizeProps(props)} className={contentWrapperCss}>
          {children}
        </GridStart>
      </MarginBox>
    </BorderScroller>
  </ResponsiveProvider>
))
