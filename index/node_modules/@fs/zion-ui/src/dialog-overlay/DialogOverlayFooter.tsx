import type { ReactNode } from 'react'
import React, { useContext, createContext, useEffect } from 'react'
import { ResponsiveProvider } from '../responsive'
import { GridStart } from '../grid'
import MarginBox from '../margin-box'

export const DialogFooterContext = createContext<(node: ReactNode) => void>(null)

export const DialogFooterWrapper = ({ children }: { children?: ReactNode }): JSX.Element => (
  <MarginBox marginX="sm" marginY="xs">
    <ResponsiveProvider>
      <GridStart>{children}</GridStart>
    </ResponsiveProvider>
  </MarginBox>
)

export default function DialogOverlayFooter({ children }: { children?: ReactNode }): null {
  const updateFooter = useContext(DialogFooterContext)

  if (!updateFooter) {
    throw new Error(
      `DialogOverlayFooter can only be used inside the children of a DialogOverlay or TransitioningDialogOverlay. NOTE: the footer props on these overlays should not wrap their contents in a DialogOverlayFooter. DialogOverlayFooter and the footer prop are equivalents.`
    )
  }

  useEffect(() => {
    updateFooter(children)
  }, [updateFooter, children])

  return null
}
