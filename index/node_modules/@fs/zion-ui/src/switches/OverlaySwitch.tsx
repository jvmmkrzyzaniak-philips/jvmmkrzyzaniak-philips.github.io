import type { ReactNode, MutableRefObject } from 'react'
import React, { createContext, useContext, useMemo } from 'react'
import type {
  BroadcastStateContextType,
  BroadcastingSwitchProps,
  BroadcastUpdateContextType,
  UpdateHookType,
} from './BroadcastingSwitch'
import { BroadcastingSwitch, BroadcastSwitchProvider, initialState, useSwitchStateUpdate } from './BroadcastingSwitch'

export type OverlaySwitchState = {
  /** The overlay's title, at the top */
  title?: ReactNode

  /** Subtitle Text */
  subtitle?: ReactNode

  /** Footer information, below the shadow scroller */
  footer?: ReactNode

  /** Target for autoFocus */
  focusRef?: MutableRefObject<HTMLElement>

  /** flag to indicate that the app is loading data. used to add aria-busy where the screen reader will care */
  busy?: boolean
}

const dummyUpdater = (): void => undefined

export const OverlayStateContext = createContext<BroadcastStateContextType<OverlaySwitchState>>(initialState)
export const OverlayUpdateContext = createContext<BroadcastUpdateContextType<OverlaySwitchState>>(dummyUpdater)

export const OverlaySwitchProvider = ({ children }: { children: ReactNode }): JSX.Element => (
  <BroadcastSwitchProvider SwitchStateContext={OverlayStateContext} SwitchDispatchContext={OverlayUpdateContext}>
    {children}
  </BroadcastSwitchProvider>
)

export const OverlaySwitch = (
  props: Omit<BroadcastingSwitchProps<OverlaySwitchState>, 'updateContext'>
): JSX.Element => <BroadcastingSwitch updateContext={OverlayUpdateContext} {...props} />

// WE GONNA CHANGE THIS. MAYBE.
export const useOverlayUpdate = <K extends keyof OverlaySwitchState>(key: K): UpdateHookType<OverlaySwitchState[K]> =>
  useSwitchStateUpdate<OverlaySwitchState, K>(OverlayUpdateContext, key)

export const useOverlayState = (): OverlaySwitchState => {
  const { defaults, base, updates } = useContext(OverlayStateContext)
  return useMemo(() => ({ ...defaults, ...base, ...updates }), [defaults, base, updates])
}
