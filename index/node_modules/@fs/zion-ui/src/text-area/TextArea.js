import React, { forwardRef, useState } from 'react'
import { css, cx } from '@linaria/core'
import { useRandomId, boolAttr, sanitizeProps, deprecatedPropType, useForwardRef } from '@fs/zion-frontend-friends'
import PropTypes from 'prop-types'
import InputBase from '../input-base'
import { colors } from '../theme'
import { textBcss } from '../typography/typographyStyles'
import { useInputGroupContext } from '../input-group/InputGroupProvider'

export const lineHeight = 28 /* Keep this a multiple of 4 so it lines up with the grid */

const containerCss = css`
  max-width: 100%;
  min-width: 80px;
`
const textareaCss = css`
  border-radius: 4px;
  font-family: inherit;
  line-height: ${lineHeight}px;
  padding: 4px 8px; /* 5px padding offsets the text so it lines up with the grid */
  width: 100%;
  border: none;
  background: transparent;
  resize: vertical;
  color: ${colors.gray100};
  min-height: 36px;

  &::placeholder {
    color: ${colors.transparent.gray30};
    opacity: 1; /* Firefox */
  }

  &:disabled {
    resize: none;
    cursor: not-allowed;
  }

  &:focus {
    outline: none;
  }

  &[is-multiline] {
    height: 36px; /* Height is 40 when adding the borders from the container in InputBase */
    overflow-y: auto;
  }

  &[disable-resize] {
    resize: none;
  }
`

const TextArea = forwardRef(function TextArea(
  {
    id,
    disableResize,
    textAreaRef, // Deprecated
    validateAtGroupLevel,
    value = '',
    placeholder,
    autoComplete = 'chrome-off',
    rows = 4,
    onEnterKey,
    onChange = () => {},
    'aria-describedby': ariaDescribedBy, // we provide a smart default below

    // Extracted InputBase props
    dense,
    disabled,
    maxLength,
    status,
    label,
    largerLabel = false,
    allowLabelWrapping = false,
    description,
    helpMessage,
    validMessage,
    errorMessage,
    warningValidate,

    /** [HIDDEN]: For internal Zion-UI use only */
    multiline,
    isInForm, // used by @fs/zion-form
    charactersRemainingLevel, // used by @fs/conversation (provides it's own affordance)

    ...props
  },
  ref
) {
  const textAreaId = useRandomId(id)
  const inputRef = useForwardRef(ref || textAreaRef)
  const [defaultAriaDescribedBy, setDefaultAriaDescribedBy] = useState()
  const inputBaseProps = {
    dense,
    disabled,
    maxLength,
    status,
    label,
    largerLabel,
    allowLabelWrapping,
    description,
    validateAtGroupLevel,
    value,
    helpMessage,
    validMessage,
    errorMessage,
    warningValidate,
    id: textAreaId,
    charactersRemainingLevel: charactersRemainingLevel || (multiline ? 'dynamic' : 'always'),
    'data-full-width': props['data-full-width'],
    'aria-hidden': props['aria-hidden'], // used by Skeletons
    inputRef,
    setDefaultAriaDescribedBy,
  }

  const isInInputGroup = useInputGroupContext()
  // for convenience, we allow the placeholder to become the field label IFF it is inside an InputGroup
  const ariaLabel = isInInputGroup ? placeholder : undefined

  const ariaErrorMessage = errorMessage && !ariaDescribedBy ? `${textAreaId}_description` : undefined

  function handleEnter(e) {
    const { keyCode } = e
    if (keyCode === 13) {
      onEnterKey && onEnterKey(e)
    }
  }

  return (
    <div className={containerCss}>
      <InputBase {...inputBaseProps}>
        <textarea
          aria-label={ariaLabel}
          {...sanitizeProps(props)} // Includes any textarea standard attributes
          disabled={disabled}
          maxLength={maxLength}
          ref={inputRef}
          rows={rows}
          id={textAreaId}
          placeholder={placeholder}
          autoComplete={autoComplete}
          disable-resize={boolAttr(disableResize)}
          is-multiline={boolAttr(multiline)}
          className={cx(textareaCss, textBcss)}
          onChange={onChange}
          value={isInForm ? undefined : value || ''}
          onKeyUp={handleEnter}
          aria-describedby={ariaDescribedBy || defaultAriaDescribedBy}
          aria-invalid={errorMessage ? 'true' : undefined}
          aria-errormessage={ariaErrorMessage}
        />
      </InputBase>
    </div>
  )
})

export default TextArea
export const meta = {
  name: 'TextArea',
  isZionFormComponent: true,
}

TextArea.meta = meta

TextArea.propTypes = {
  /** Disables the resize functionality. */
  disableResize: PropTypes.bool,

  /** Max number of characters allowed. */
  maxLength: PropTypes.number,

  /** Deprecated option for providing a ref to this component. Use ref instead. */
  textAreaRef: deprecatedPropType('TextArea: `textAreaRef` has been deprecated. Please use ref instead.'),

  /** Descriptor for a11y. */
  name: PropTypes.string,

  /** Increases label size when set to true */
  largerLabel: PropTypes.bool,

  /** Allows label to wrap when set to true */
  allowLabelWrapping: PropTypes.bool,

  /** [REQUIRED OUTSIDE OF ZIONFORM] - Handler that fires each time the textarea's value changes. */
  onChange: PropTypes.func,

  /** Handler run every time the user presses enter while the input has focus. */
  onEnterKey: PropTypes.func,

  /** Placeholder text. */
  placeholder: PropTypes.string,

  /** Number of rows. */
  rows: PropTypes.number,

  /**  [REQUIRED OUTSIDE OF ZIONFORM] - The input value */
  value: PropTypes.string,
}
