import { useContext } from 'react'
import { SizeContext, WidthContext } from './ResponsiveProvider'
import type { BreakpointName } from './breakpoints'
import breakpoints from './breakpoints'

// We need to know whether a `default` value was provided, because it's the final fallback
// When not provided, we need to stub in a literal `undefined` value.
type AtWidthParamsWithoutDefault<Value> = Partial<Record<Exclude<BreakpointName, 'default'>, Value>>
type AtWidthParams<Value> = AtWidthParamsWithoutDefault<Value> & { default: Value }
type Params<Value> = AtWidthParamsWithoutDefault<Value> | AtWidthParams<Value>

// If no default has been passed into atWidth, undefined can be returned even if not specifying
// undefined, otherwise the return type will be what is given
type AtWidthReturn<P extends Params<P[keyof P]>> =
  P extends AtWidthParams<P[keyof P]> ? P[keyof P] : P[keyof P] | undefined

/**
 * Type-narrowing helper function to allow us to properly cast between
 * AtWidthParams and AtWidthParamsWithoutDefault */
function defaultWasProvided<Value>(params: Params<Value>): params is AtWidthParams<Value> {
  // Using hasOwnProperty instead of Object.hasOwn to support older browsers (ZIONUIV13-53)
  // This can be replaced when we no longer support iOS 15.3
  return Object.prototype.hasOwnProperty.call(params, 'default')
}

/**
 * When given a breakpoint size and an object of params, This function will pick
 * the proper value out of that object and return it.
 */
export function atWidth<P extends Params<P[keyof P]>>(
  size: BreakpointName,
  params: Params<P[keyof P]>
): AtWidthReturn<P> {
  let result: AtWidthReturn<P>
  let resultWasSet = false

  // Iterating over each breakpoint, and overriding what we find, up until we land
  // on the matching breakpoint.
  breakpoints.some(({ name }) => {
    // This must use `Object.hasOwn` because we want to allow consumers to wipe-out
    // any value they set in a lower breakpoint.

    // Using hasOwnProperty instead of Object.hasOwn to support older browsers (ZIONUIV13-53)
    // This can be replaced when we no longer support iOS 15.3
    if (Object.prototype.hasOwnProperty.call(params, name)) {
      result = params[name]
      resultWasSet = true
    }
    return name === size
  })

  if (defaultWasProvided(params)) {
    return (
      resultWasSet
        ? result! // Allowing the `!` here because we know it was set at this point
        : params.default
    ) as AtWidthReturn<P>
  }

  return result! // Allowing the `!` here because we're ok with returning undefined at this point.
}

/** The return type of useContainerWidth */
export type AtWidthFunction = <const P extends Params<P[keyof P]>>(atWidthConditions: P) => AtWidthReturn<P>

/**
 * This allows any application to benefit from dynamic size functionality.
 * @returns {Function} atSize
 */
export default function useContainerWidth(): AtWidthFunction {
  const size = useContext(SizeContext)
  return <P extends Params<P[keyof P]>>(atWidthConditions: P) => atWidth<P>(size, atWidthConditions)
}

/**
 * This is the default function used for `ResponsiveProvider` when a function is not provided.
 */
export const defaultAtWidthFunction: AtWidthFunction = <P extends Params<P[keyof P]>>(atWidthConditions: P) =>
  atWidth<P>('default', atWidthConditions)

/**
 * This is intended for use within Zion-UI - not by applications.
 * @returns {number} width - the pixel count width of the component.
 */
export const useWidth = (): number => useContext(WidthContext)
