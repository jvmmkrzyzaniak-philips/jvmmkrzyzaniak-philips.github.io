/*
 * This is the file that monitors the animation frame to determine what the size of the component is. This gets the width
 * pushed to the components using the provider and allows it to respond to size changes.
 */

import type { HTMLAttributes } from 'react'
import React, { useCallback, useState, createContext, forwardRef } from 'react'
import { useResizeObserver, useForwardRef } from '@fs/zion-frontend-friends'
import type { Breakpoint, BreakpointName } from './breakpoints'
import breakpoints from './breakpoints'

export const getBreakpoint = (width: number): Breakpoint => {
  let result = breakpoints[0]
  breakpoints.some((breakpoint) => {
    if (breakpoint.width <= width) {
      result = breakpoint
      return false
    }
    return true
  })
  return result
}

export const SizeContext = createContext<BreakpointName>('default')
SizeContext.displayName = 'SizeContext'
export const WidthContext = createContext(0)
WidthContext.displayName = 'WidthContext'

const hasWindow = typeof window !== 'undefined'
const defaultInitialWidth = hasWindow ? window.innerWidth : Number(process.env.REACT_APP_WINDOW_INNERWIDTH)

type ResponsiveProviderProps = {
  initialWidth?: number
} & HTMLAttributes<HTMLDivElement>

const ResponsiveProvider = forwardRef<HTMLDivElement, ResponsiveProviderProps>(
  ({ initialWidth = defaultInitialWidth, children, ...props }, ref) => {
    const [width, setWidth] = useState(initialWidth)

    // We still need this ref for testing purposes (See usePageWidth.test.js)
    const responsiveRef = useForwardRef(ref)

    const updateWidth = useCallback(() => {
      setWidth((prev) => responsiveRef.current?.clientWidth ?? prev)
    }, [responsiveRef])

    // We need a callback ref here that updates width because if we just use a normal ref,
    // ResponsiveProvider does not update with the container width until after its first render,
    // which causes blowout on some components such as ResponsiveTable. (ZIONUI-1072)
    const responsiveCallbackRef = useCallback(
      (node: HTMLDivElement) => {
        responsiveRef.current = node
        updateWidth()
      },
      [updateWidth, responsiveRef]
    )

    useResizeObserver(responsiveRef, updateWidth)

    const breakpoint = getBreakpoint(width)

    return (
      <SizeContext.Provider value={breakpoint.name}>
        <WidthContext.Provider value={width}>
          <div {...props} ref={responsiveCallbackRef}>
            {children}
          </div>
        </WidthContext.Provider>
      </SizeContext.Provider>
    )
  }
)

ResponsiveProvider.displayName = 'ResponsiveProvider'

export default ResponsiveProvider
