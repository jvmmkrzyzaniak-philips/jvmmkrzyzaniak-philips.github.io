import React, { forwardRef, useState } from 'react'
import { css } from '@linaria/core'
import { useRandomId, sanitizeProps } from '@fs/zion-frontend-friends'
import PropTypes from 'prop-types'
import InputLabel from '../input-label'
import { colors } from '../theme'
import useKeyboardShortcuts from '../use-keyboard-shortcuts'

const containerCss = css`
  display: grid;
  grid-template-columns: min-content 1fr;
  align-items: center;
  min-height: 36px;
  cursor: pointer;

  &[disabled] {
    cursor: not-allowed;
  }
`

const radioCss = css`
  position: relative;
  appearance: none;
  box-shadow: inset 0 0 0 1px ${colors.gray100};
  background: ${colors.gray00};
  border-radius: 50%;
  cursor: inherit;
  height: 20px;
  margin: 0;
  margin-inline-end: 8px;
  width: 20px;
  transition: all 0.2s;

  &:checked {
    box-shadow: inset 0 0 0 7px ${colors.blue50};
  }

  &:focus {
    outline: none;
  }

  /* HALO */
  &::before {
    content: '';
    position: absolute;
    width: 32px;
    height: 32px;
    border-radius: 100%;
    top: -6px;
    inset-inline-start: -6px;
    border: 8px solid ${colors.transparent.gray00};
    transition: border-color 0.4s;
  }

  &:hover::before {
    border-color: ${colors.transparent.blue03};
  }

  &:focus::before {
    border-color: ${colors.transparent.blue05};
  }

  &:disabled {
    box-shadow: inset 0 0 0 1px ${colors.gray20};
  }

  &:checked:disabled {
    box-shadow: inset 0 0 0 7px ${colors.gray20};
  }

  /* DISABLED */
  &:disabled {
    cursor: not-allowed;
  }
  &:disabled:hover {
    background: transparent;
  }
  &:disabled::before {
    opacity: 0;
  }
`

const labelContainerCss = css`
  cursor: pointer;
  min-width: 0;
  line-height: 20px;

  [disabled] > & {
    pointer-events: none;
  }

  & label {
    padding: 0;
  }
`

const Radio = forwardRef(function Radio(
  {
    checked = false,
    onChange,
    value,
    label,
    disabled,
    id,
    name,
    wrapLabel,

    /** ARIA */
    'aria-label': ariaLabel,
    'aria-describedby': ariaDescribedBy,
    'aria-labelledby': ariaLabelledBy,

    /** [HIDDEN]: For internal Zion-UI use only */
    isInForm, // used by @fs/zion-form

    inputProps,
    ...props
  },
  ref
) {
  const radioId = useRandomId(id)
  const [isFocused, setIsFocused] = useState(false)

  useKeyboardShortcuts({
    handlers: {
      wildCard: {
        action: (e) => {
          // All arrow key events should advance to the prev/next radio elements
          // while we are focused on Radio Buttons. This is similar to what we do in
          // InputBase (but different enough that it needs to be it's own implementation)
          if (['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'].includes(e.key)) return false
          return true
        },
      },
    },
    enabled: isFocused,
  })

  return (
    <div
      {...sanitizeProps(props)}
      className={containerCss}
      disabled={disabled}
      onFocus={(evt) => {
        props.onFocus?.(evt)
        setIsFocused(true)
      }}
      onBlur={(evt) => {
        props.onBlur?.(evt)
        setIsFocused(false)
      }}
    >
      <input
        {...sanitizeProps(inputProps)}
        data-interactive="true"
        onChange={onChange}
        name={name}
        type="radio"
        checked={isInForm ? undefined : checked || false}
        id={radioId}
        disabled={disabled}
        className={radioCss}
        value={value}
        aria-describedby={ariaDescribedBy}
        aria-labelledby={ariaLabelledBy}
        aria-label={ariaLabel}
        ref={ref}
      />

      {/* LABEL */}
      {label && (
        <div className={labelContainerCss}>
          <InputLabel disabled={disabled} htmlFor={radioId} ellipses={!wrapLabel} nextToInput>
            {label}
          </InputLabel>
        </div>
      )}
    </div>
  )
})
export default Radio
export const meta = {
  name: 'Radio',
  isZionFormComponent: true,
  noValidation: true,
}

Radio.meta = meta

Radio.propTypes = {
  /** [REQUIRED OUTSIDE OF ZIONFORM] - Whether or not the checkbox is currently checked. */
  checked: PropTypes.bool,

  /** Disables the checkbox. */
  disabled: PropTypes.bool,

  /** Very optional - ID for the checkbox. One is generated if not supplied. */
  id: PropTypes.string,

  /** The label text for the checkbox.  JSX is allowed, but please don't use for anything except links. */
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),

  /** False by default. If set to true, label text will wrap instead of being truncated with an ellipsis. */
  wrapLabel: PropTypes.bool,

  /** [REQUIRED IN ZIONFORM] - Descriptor for the checkbox. This is the key used to identify the checkbox value in forms. */
  name: PropTypes.string.isRequired,

  /** [REQUIRED OUTSIDE OF ZIONFORM] - Handler function that runs each time the checkbox is checked/unchecked. */
  onChange: PropTypes.func,

  /** Value associated with the radio option. */
  value: PropTypes.string.isRequired,

  /** Add custom props to the radio input. */
  inputProps: PropTypes.object,
}
