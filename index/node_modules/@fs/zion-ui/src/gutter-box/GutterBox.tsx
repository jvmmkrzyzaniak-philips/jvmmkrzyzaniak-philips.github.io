import type { ElementType, CSSProperties, ReactNode, ReactElement } from 'react'
import React, { forwardRef } from 'react'
import { cx, css } from '@linaria/core'
import type { TShirtSizes } from '../types'
import type { PolymorphicRef, PolymorphicComponentPropsWithRef } from '../polymorphic-prop-types'

const gutterBoxCss = css`
  /** Make content move to edge of GutterBox, instead of being pushed in by padding */
  margin: calc(var(--gutters-y) * -1) calc(var(--gutters-x) * -1);
`

export const gutterChildCss = css`
  padding: var(--gutters-y) var(--gutters-x);

  /* In the case the component that this gets wrapped around doesn't return anything (e.g. it returns null),
   * we need this element to not take up any space or columns. We don't allow free-loaders.
   */
  &:empty {
    display: none;
  }
`

type Props = {
  /** Horizontal item gutters. Determines horizontal gutter size. */
  guttersX?: TShirtSizes

  /** Vertical item gutters. Determines vertical gutter size. */
  guttersY?: TShirtSizes

  /** Optional classname for additional styling. */
  className?: string

  /** Optional style tag for additional styling. */
  style?: CSSProperties

  /** Children */
  children?: ReactNode
}

type GutterBoxProps<C extends ElementType> = PolymorphicComponentPropsWithRef<C, Props>
type GutterBoxComponent = <C extends ElementType = 'div'>(props: GutterBoxProps<C>) => ReactElement

const GutterBox: GutterBoxComponent = forwardRef(
  <C extends ElementType = 'div'>(
    { guttersX = 'sm', guttersY = 'sm', style, className, as, children, ...props }: GutterBoxProps<C>,
    ref: PolymorphicRef<C>
  ): JSX.Element => {
    const TagName = as || 'div'
    // If there are no children, this tag is weird, because it's an empty thing with negative margins.
    // This causes things to stack together in weird ways.
    return children ? (
      <TagName
        {...props}
        ref={ref}
        className={cx(className, gutterBoxCss)}
        style={{
          '--gutters-x': `calc(var(--spacer-${guttersX}) / 2)`, // used by destiny's children to determine their padding
          '--gutters-y': `calc(var(--spacer-${guttersY}) / 2)`, // used by destiny's children to determine their padding

          ...style,
        }}
      >
        {children}
      </TagName>
    ) : null
  }
)

export default GutterBox
