import React from 'react'
import { css, cx } from '@linaria/core'
import { DocumentBasic } from '@fs/zion-icon'
import type { InferProps } from 'prop-types'
import PropTypes from 'prop-types'
import { Image, Overline, Subheading, Row } from '../index'
import { GenericHeading } from '../typography/Headings'
import day from '../theme/day.theme'
import Affordance from '../affordance/AffordableAffordance'

import type { BaseButtonProps } from '../buttons/types'

const thumbnailBaseCss = css`
  /* NOTE: We're using day colors instead of regular theme colors because we want the thumbs
  to look the same in both day and night modes. */
  color: ${day.gray[40]};
  background: ${day.gray['05']};
  height: var(--thumb-size);
  width: var(--thumb-size);
  margin: calc(var(--thumb-size) * 0.09) 0;

  [data-block-size='sm'] & {
    --thumb-size: 40px;
  }
  [data-block-size='md'] & {
    --thumb-size: 64px;
  }
  [data-block-size='lg'] & {
    --thumb-size: 64px;
  }
  [data-block-size='xl'] & {
    --thumb-size: 88px;
  }
`

const emptyThumbnailCss = css`
  display: flex;
  align-items: center;
  justify-content: center;
`

const iconCss = css`
  background: transparent;
  color: currentcolor;
  width: fit-content;
`

const propTypes = {
  /** The name of the person. */
  name: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,

  /** The text to display below the person's name. */
  details: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,

  /** The text to display above the person's name as an overline. The type of record. */
  type: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /** The text to display next to the record type as an overline. The role of the person. */
  personRole: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /** The source of the image. Set this to null to show a placeholder image. */
  thumbnail: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([true as const])]),

  /**
   * The size of the component.
   * @default md
   */
  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl'] as const),

  /** Define a custom tag-name to use. */
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),

  /** Dense mode: Normally when you add a `to` or `onclick`, more padding is added for hover zone.
   *  Dense mode allows you to tuck that padding away in tight spaces.
   *
   * **NOTICE** This property doesn't do anything if `to` or `onclick` are not provided. */
  dense: PropTypes.bool,
}

type RecordBlockBaseProps = InferProps<typeof propTypes>
type RecordBlockProps = Omit<
  Omit<BaseButtonProps, keyof RecordBlockBaseProps> & RecordBlockBaseProps,
  'children' | 'className'
>

const typeMap = {
  xl: {
    gutter: 'sm',
    iconGutter: 'xs',
    icon: 'lg',
    size: 'H4',
  },
  lg: {
    gutter: 'sm',
    iconGutter: 'xs',
    icon: 'md',
    size: 'H5',
  },
  md: {
    gutter: 'xs',
    iconGutter: 'xxs',
    icon: 'sm',
    size: 'H6',
  },
  sm: {
    gutter: 'xs',
    iconGutter: 'nano',
    icon: 'sm',
    size: 'H6',
  },
} as const

function RecordBlockBase({
  name,
  details,
  type,
  personRole,
  thumbnail,
  size = 'md',
  ...props
}: RecordBlockBaseProps): JSX.Element {
  const { gutter, iconGutter, icon, size: headingSize } = typeMap[size]
  const thumbnailCss = cx(
    thumbnailBaseCss,
    (thumbnail === true || !thumbnail?.length) && emptyThumbnailCss,
    !thumbnail && iconCss
  )

  return (
    <Row guttersX={thumbnail ? gutter : iconGutter} guttersY="none" data-block-size={size} {...props}>
      <div className={thumbnailCss} noShrinkX>
        {thumbnail && thumbnail !== true ? <Image src={thumbnail} alt="" /> : <DocumentBasic size={icon} />}
      </div>
      <GenericHeading as="div" size={headingSize} alignY="middle">
        <Overline as="div">
          {/* Do not string interpolate the `|` character with personRole or type, it messes with the Skeleton */}
          {type}
          {type && personRole ? ' | ' : null}
          {personRole}
        </Overline>
        {name}
        <Subheading as="div">{details}</Subheading>
      </GenericHeading>
    </Row>
  )
}

export default function RecordBlock({
  to,
  linkName,
  onClick,
  disabled,
  dense = false,
  debounce,
  ...props
}: RecordBlockProps): JSX.Element {
  if (to || onClick) {
    const affordanceProps = { to, linkName, onClick, disabled, debounce, dense }
    return (
      <Affordance margin="xxs" {...affordanceProps}>
        <RecordBlockBase {...props} />
      </Affordance>
    )
  }
  return <RecordBlockBase {...props} />
}

RecordBlock.propTypes = propTypes
