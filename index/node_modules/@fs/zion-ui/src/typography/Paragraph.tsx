import type { ElementType, PropsWithChildren } from 'react'
import React, { forwardRef } from 'react'
import type { InferProps } from 'prop-types'
import PropTypes from 'prop-types'
import { cx } from '@linaria/core'
import { boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'

import type { PolymorphicRef, PolymorphicComponentPropsWithRef } from '../polymorphic-prop-types'

import { textAcss, textBcss, textCcss, textDcss, textEcss, textBaseCss, paragraphBaseCss } from './typographyStyles'

type ParaSizes = 'xs' | 'sm' | 'md' | 'lg' | 'xl'

const sizeMapping: Record<ParaSizes, string> = {
  xs: textAcss,
  sm: textBcss,
  md: textCcss,
  lg: textDcss,
  xl: textEcss,
}

const propTypes = {
  /** The size of the paragraph */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'] as const),

  /**
   * We allow you to insert React components so that you can utilize
   * ZionUI builtins like Ellipsis, Icon, Link, etc. Keep this simple.
   * It's better to use small Paragraphs inline, than one Paragraph
   * with a bunch of stuff shoved into it.
   */
  children: PropTypes.node,

  /**
   * Centers the text (horizontally). To center vertically, use a
   * layout component.
   */
  centered: PropTypes.bool,

  /** Lighten the text slightly, to give it lower significance. This will take on the same color as a Subheading component. */
  secondary: PropTypes.bool,

  /**
   * Balance out the way text lines will wrap.
   *
   * Normally, browsers try to put as many words as possible on a line of text. Often look visually awkward,
   * because the last line of a paragraph could end up having just word on it. This property will balance each
   * line of text so that each line has roughly the same length.
   */
  balanced: PropTypes.bool,

  /**
   * Whether to tighten the line-spacing of the paragraph for more tightness. Or, use this to tighten the line-spacing in the paragraph.
   * If you want the paragraph to be more sparse, don't use this prop.
   */
  dense: PropTypes.bool,

  /**
   * Dom Node to use
   */
  as: PropTypes.string as unknown as keyof JSX.IntrinsicElements,
}

type Props = PropsWithChildren<InferProps<Omit<typeof propTypes, 'as' | 'children'>>>

type ParagraphProps<C extends ElementType> = PolymorphicComponentPropsWithRef<C, Props>
type ParagraphComponent = {
  <C extends ElementType = 'p'>(props: ParagraphProps<C>): JSX.Element
  displayName?: string
  propTypes?: Record<string, unknown>
}

const Paragraph: ParagraphComponent = forwardRef(
  <C extends ElementType = 'p'>(
    { size = 'md', children, centered, secondary, balanced, as, dense, ...props }: ParagraphProps<C>,
    ref: PolymorphicRef<C>
  ) => {
    const TagName = (as || 'p') as ElementType
    return (
      <TagName
        {...sanitizeProps(props)}
        className={cx(textBaseCss, paragraphBaseCss, sizeMapping[size])}
        ref={ref}
        data-balanced={boolAttr(balanced)}
        data-centered={boolAttr(centered)}
        data-secondary={boolAttr(secondary)}
        data-dense={boolAttr(dense)}
      >
        {children}
      </TagName>
    )
  }
)

Paragraph.propTypes = propTypes
Paragraph.displayName = 'Paragraph'

export default Paragraph

/**
 * ### _Provides styling for body text_
 *
 * Paragraph displays body text in various sizes (xs - xl). This component is designed so you can add other React components as children. However, less is more and we do not recommend over stuffing Paragraphs.
 *
 * > **Please consult with your designer about which of the Paragraph styling to use.**
 * >
 * > **Do not use raw `<p>` (paragraph) tags** as they will not adhere to the proper
 * typographic rhythm provided by these components.
 */
export const ParagraphPropsTableComponent = (props: InferProps<typeof propTypes>): JSX.Element => <div>{props}</div>
