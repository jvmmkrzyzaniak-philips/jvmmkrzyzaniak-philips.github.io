import type { ElementType, HTMLAttributes } from 'react'
import { useContext, forwardRef, useEffect } from 'react'
import type { InferProps } from 'prop-types'
import PropTypes from 'prop-types'
import type { PolymorphicComponentPropsWithRef, PolymorphicRef } from '../polymorphic-prop-types'
import HeadingContext from './HeadingContext'

const propTypes = {
  /**
   * We allow you to insert React components so that you can utilize
   * ZionUI builtins like Ellipsis, Icon, Link, etc. Keep this simple.
   * It's better to use small Paragraphs inline, than one Paragraph
   * with a bunch of stuff shoved into it.
   */
  children: PropTypes.node,

  /**
   * Visually lower the contrast of the text.
   */
  secondary: PropTypes.bool,

  /**
   * Dom Node to use
   */
  as: PropTypes.string,
}

const Overline = forwardRef(
  <C extends ElementType = 'small'>(
    {
      children,
      secondary = true,
      as,
      ...props
    }: PolymorphicComponentPropsWithRef<C, Omit<InferProps<typeof propTypes>, 'as'>>,
    ref: PolymorphicRef<C>
  ) => {
    const context = useContext(HeadingContext)
    if (!context) throw new Error('Do not use <Overline> outside of an Heading element like <H1>')

    const { setOverlineContent } = context

    useEffect(() => {
      setOverlineContent({
        children,
        secondary,
        ref,
        // setOverlineContent expects the props to only be the attributes of HTMLSpanElement, but props can still be other attributes. TODO filter the props
        props: props as unknown as HTMLAttributes<HTMLSpanElement>,
        as,
      })
      return () => setOverlineContent(null)
    }, [children, secondary, ref, props, setOverlineContent, as])

    return null
  }
)

Overline.propTypes = propTypes
Overline.displayName = 'Paragraph'

export default Overline
