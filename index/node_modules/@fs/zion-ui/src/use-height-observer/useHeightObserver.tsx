import type { RefObject } from 'react'
import React, { useState, useEffect } from 'react'
import type { ResizeListener } from '@fs/zion-frontend-friends'
import { useEvent, useResizeObserver } from '@fs/zion-frontend-friends'

type RefHeight = number | undefined

/**
 * Observes the height of a DOMNode and updates on resize
 *
 * @param ref The ref of the DOMNode whose height will be observed
 * @param enabled Tells the observer when the ref is ready to be observed. If the ref is ever attached to an unmounted component, this prop must be false when the component is unmounted.
 * @returns {number} The height of the observed ref
 */
export default function useHeightObserver<T extends HTMLElement>(ref: RefObject<T>, enabled = true): RefHeight {
  // Height starts as "undefined" so the element using it will start with 'auto'
  const [height, setHeight] = useState<number | undefined>(undefined)

  useEffect(() => {
    if (!enabled) setHeight(undefined)
  }, [enabled, setHeight])

  const handleResize = useEvent<ResizeListener>((entry) => {
    const newHeight = entry.target.clientHeight
    setHeight(newHeight)
  })

  useResizeObserver(ref, handleResize, enabled)

  return height
}

type HookReturnType = {
  /** The current height of the element. */
  height: RefHeight
}
// @ts-expect-error -- This component isn't actually used. Just for documentation.
export const HookReturnProps = (props: HookReturnType): JSX.Element => <div {...props} />
