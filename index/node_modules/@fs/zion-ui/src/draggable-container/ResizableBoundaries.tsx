import type { RefObject } from 'react'
import { useContext, useEffect } from 'react'
import { useResizeObserver } from '@fs/zion-frontend-friends'
import { DraggableContext } from './DraggableContainer'
import type { Bounds, Rect } from './types'
import { minMax } from './limiters'

type ResizableBoundariesProps = {
  boundaryRef: RefObject<HTMLElement>
  enabled?: boolean
}

const maxMin = (val: number, min: number, max: number): number => Math.max(min, Math.min(val, max))

/**
 * @returns A rectangle that fits within the DraggableContainer's boundaries
 */
export const transformOverflow = (current: Rect, { boundary, minWidth, minHeight }: Bounds): Rect => ({
  // minMax will prioritize the max boundary when the min boundary is greater than the max. I.e. The DraggableContainer will continue to shrink past the min boundaries if it doesn't fit
  width: minMax(current.width, minWidth, boundary.width),
  height: minMax(current.height, minHeight, boundary.height),
  // maxMin will prioritize the min boundary when the max boundary is less than the min. I.e. The DraggableContainer will move towards the top-left corner of the boundary to fit, but never past that
  x: maxMin(current.x, boundary.x, boundary.x + boundary.width - current.width),
  y: maxMin(current.y, boundary.y, boundary.y + boundary.height - current.height),
})

export const ResizableBoundaries = ({ boundaryRef, enabled = true }: ResizableBoundariesProps): null => {
  const context = useContext(DraggableContext)
  if (!context) throw new Error('Missing DraggableContext Provider')
  const { handleOverflow } = context

  useResizeObserver(boundaryRef, () => handleOverflow(transformOverflow), enabled)

  return null
}

export const ResizableWindowBoundaries = (): null => {
  const context = useContext(DraggableContext)
  if (!context) throw new Error('Missing DraggableContext Provider')
  const { handleOverflow } = context

  useEffect(() => {
    const handleResize = (): unknown => handleOverflow(transformOverflow)
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [handleOverflow])

  return null
}
