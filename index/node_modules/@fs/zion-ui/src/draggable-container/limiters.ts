const { round, log, sin, PI } = Math
type Clamper = (val: number, limit: number, strength: number) => number

type ClamperOptions = {
  minClamper?: Clamper
  maxClamper?: Clamper
  minStrength?: number
  maxStrength?: number
}
/**
 * Apply a logarithmic curve to an input value, such that the further it is
 * from the limit, the further the output is from the input
 *
 * @param val The input value
 * @param limit The maximum or minimum value allowed
 * @param strength The strength of the curvature
 */
const stretchyPants: Clamper = (val, limit, strength) => log(strength * (val - limit) + 1) / strength + limit

/**
 * Apply an inverse-curve to an input value, such that the further it is from
 * the limit, the further the output is from the input...
 * Except: Never allow the output to reach or go below zero
 *
 * @param val The input value
 * @param limit The minimum value allowed
 */
export const insideOutStretchyPants: Clamper = (val: number, limit: number): number => -limit / ((1 / limit) * val - 2)

export const makeStretchyMinMax =
  ({ minClamper = stretchyPants, maxClamper = stretchyPants, minStrength = 5, maxStrength = 5 }: ClamperOptions = {}) =>
  (val: number, min = -Infinity, max = Infinity): number => {
    if (val > max) return maxClamper(val, max, maxStrength)
    if (val < min) return minClamper(val, min, -minStrength)
    return val
  }

export const stretchyRotation = (val: number): number => val - sin(4 * val) / 4

export const minMax = (val: number, min: number, max: number): number => Math.min(Math.max(val, min), max)
export const limitRotation = (val: number): number => (round((val / PI) * 2) * PI) / 2
