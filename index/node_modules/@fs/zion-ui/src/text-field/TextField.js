import React, { forwardRef, useState } from 'react'
import { css, cx } from '@linaria/core'
import PropTypes from 'prop-types'
import { MenuClose, ContentUndo, ControlView, ControlHide } from '@fs/zion-icon'
import { useRandomId, boolAttr, sanitizeProps, useForwardRef } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import { IconButton } from '../buttons/icon-button'
import InputBase, { childrenContainerCss } from '../input-base'
import { colors } from '../theme'
import { textBcss } from '../typography/typographyStyles'
import { useInputGroupContext } from '../input-group/InputGroupProvider'

const containerCss = css`
  max-width: 100%;
  flex-grow: 1; /* When used in Row (or other flex containers), this should stretch to fit its container */

  &[pageno] {
    min-width: 52px;
    flex-grow: 0;

    input {
      min-width: 48px;
      text-align: center;
      flex-grow: 0;
    }
  }
`

const inputCss = css`
  padding: 0 8px 1px;
  display: block;
  font-family: inherit;
  flex-grow: 2;
  border: none;
  background: transparent;
  color: ${colors.gray100};
  height: 36px; /* Height is 40 when adding the borders from the container in InputBase */
  max-width: 100%;

  &:disabled {
    cursor: not-allowed;
  }

  &::placeholder {
    color: ${colors.transparent.gray30};
    opacity: 1; /* Firefox */
  }

  &:focus {
    outline: none;
  }

  /* Hide arrows on number input */
  /* Chrome, Safari, Edge, Opera */
  &[type='number']::-webkit-outer-spin-button,
  &[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  /* Firefox */
  &[type='number'] {
    -moz-appearance: textfield;
  }

  /* Hide default clear button (x) on search input */
  /* Chrome, Edge, Opera, Safari (not needed on Firefox) */
  &[type='search']::-webkit-search-decoration,
  &[type='search']::-webkit-search-cancel-button,
  &[type='search']::-webkit-search-results-button,
  &[type='search']::-webkit-search-results-decoration {
    display: none;
  }

  /* Hide default password eye icon in Edge and IE */
  &[type='password']::-ms-reveal,
  &[type='password']::-ms-clear {
    display: none;
  }

  &[has-icon],
  &[has-right-action] {
    width: calc(100% - 32px);
  }

  &[has-icon][has-right-action] {
    width: calc(100% - 64px);
  }
`
const iconContainerCss = css`
  padding-inline-start: 8px;
  display: inline-flex;

  color: ${colors.transparent.gray30};
  .${childrenContainerCss}:focus-within & {
    color: ${colors.gray100};
  }
`

const rightActionContainerCss = css`
  padding: 0 8px;
  display: inline-flex;

  /* Handle the coloring of the SVG */
  & svg {
    transition: fill 0.2s ease-in-out;
    fill: ${colors.transparent.gray30};
  }
  .${childrenContainerCss}:focus-within & svg,
  &:hover svg {
    fill: ${colors.gray100};
  }

  &[isdisabled] {
    visibility: hidden;
  }
`

/** Text input used in forms */
const TextField = forwardRef(function TextField(
  {
    id,
    placeholder,
    billboard,
    dense,
    disabled,
    type = 'text',
    Icon,
    clearable,
    resettable,
    secondaryChildren,
    label,
    largerLabel = false,
    allowLabelWrapping = false,
    description,
    name,
    onClear,
    onReset,
    onEnterKey,
    onChange = () => {},
    onBlur,
    validateAtGroupLevel,
    value = '', // This must have a default of empty or formik's resetForm will not clear values
    maxLength,
    helpMessage,
    validMessage,
    errorMessage,
    warningValidate,
    status,
    inputContainerRef,

    /** ARIA We supply smart defaults below */
    'aria-describedby': ariaDescribedBy,

    /** [HIDDEN]: For internal Zion-UI use only */
    pageNumber = false,
    isInForm, // used by @fs/zion-form

    ...props
  },
  ref
) {
  const inputId = useRandomId(id)
  const inputRef = useForwardRef(ref)
  const [t] = useTranslation()
  const [currentType, setCurrentType] = useState(type)
  const [defaultAriaDescribedBy, setDefaultAriaDescribedBy] = useState()
  const inputBaseProps = {
    id: inputId,
    label,
    largerLabel,
    allowLabelWrapping,
    billboard,
    description,
    dense,
    name,
    maxLength,
    helpMessage,
    validMessage,
    errorMessage,
    warningValidate,
    validateAtGroupLevel,
    value,
    disabled,
    status,
    charactersRemainingLevel: 'dynamic',
    inputContainerRef,
    inputRef,
    'data-full-width': props['data-full-width'],
    'aria-hidden': props['aria-hidden'], // used by Skeletons
    setDefaultAriaDescribedBy,
  }

  const isInInputGroup = useInputGroupContext()
  // for convenience, we allow the placeholder to become the field label IFF it is inside an InputGroup
  const ariaLabel = isInInputGroup ? placeholder : undefined

  function handleEnter(e) {
    const { keyCode } = e
    if (keyCode === 13) {
      onEnterKey && onEnterKey(e)
    }
  }

  const onShowPasswordClick = () => {
    const toggledType = currentType === 'password' ? 'text' : 'password'
    setCurrentType(toggledType)
  }

  const clearHandler = (evt) => {
    if (onClear) {
      onClear(evt)
      inputRef.current?.focus()
    }
  }

  const resetHandler = (evt) => {
    onReset?.(evt)
    inputRef.current?.focus()
  }

  const ariaErrorMessage = errorMessage && !ariaDescribedBy ? `${inputId}_description` : undefined

  return (
    <div className={containerCss} pageno={boolAttr(pageNumber)}>
      <InputBase {...inputBaseProps}>
        {Icon && (
          <div className={iconContainerCss} aria-hidden>
            <Icon size="sm" />
          </div>
        )}

        <input
          aria-label={ariaLabel}
          {...sanitizeProps(props)}
          type={currentType}
          name={name}
          className={cx(inputCss, textBcss)}
          id={inputId}
          disabled={disabled}
          onChange={onChange}
          onBlur={onBlur}
          onKeyUp={handleEnter}
          value={isInForm ? undefined : value || ''} // This must have a default of empty or formik's resetForm will not clear values
          ref={inputRef}
          maxLength={maxLength}
          placeholder={placeholder}
          has-icon={boolAttr(Icon)}
          has-right-action={boolAttr(clearable || resettable || type === 'password')}
          aria-describedby={ariaDescribedBy || defaultAriaDescribedBy}
          aria-invalid={errorMessage ? 'true' : undefined}
          aria-errormessage={ariaErrorMessage}
        />

        {type === 'password' && (
          <div isdisabled={boolAttr(disabled)} className={rightActionContainerCss}>
            <IconButton
              Icon={currentType === 'password' ? ControlView : ControlHide}
              onClick={onShowPasswordClick}
              disabled={disabled}
              title={t('textfield.password.text.action', 'Show/Hide the password')}
              size="xs"
            />
          </div>
        )}
        {/* CLEAR BUTTON trumped when type === 'password' */}
        {clearable && type !== 'password' && (
          <div isdisabled={boolAttr(disabled || !value)} className={rightActionContainerCss}>
            <IconButton
              tooltipProps={{
                placement: ['bottom', 'top'],
              }}
              Icon={MenuClose}
              onClick={clearHandler}
              disabled={disabled || !value}
              title={t('textfield.clear.text.action', 'Clear text entered in this field')}
              size="xs"
            />
          </div>
        )}
        {/* Clearable and type === password take precedence over resettable */}
        {resettable && !clearable && type !== 'password' && (
          <div isdisabled={boolAttr(disabled)} className={rightActionContainerCss}>
            <IconButton
              Icon={ContentUndo}
              onClick={resetHandler}
              disabled={disabled}
              title={t('textfield.reset.text.action', 'Undo my recent edits')}
              size="xs"
            />
          </div>
        )}

        {secondaryChildren}
      </InputBase>
    </div>
  )
})

export default TextField
export const meta = {
  name: 'TextField',
  isZionFormComponent: true,
}

TextField.meta = meta

TextField.propTypes = {
  /** Increases the padding around the input for landing page type experiences */
  billboard: PropTypes.bool,

  /** Allows the field to be cleared. Adds a "clear" button for any type but 'password' - if this is set outside of a ZionForm, then onClear is required */
  clearable: PropTypes.bool,

  /** Adds a button to reset changes in the field. Will not be shown if type is 'password' or clearable is also provided. If this is set outside of a ZionForm, then onReset is required. */
  resettable: PropTypes.bool,

  /** Max number of characters allowed. */
  maxLength: PropTypes.number,

  /** Identifier for the input. */
  name: PropTypes.string,

  /** Increases label size when set to true */
  largerLabel: PropTypes.bool,

  /** Allows label to wrap when set to true */
  allowLabelWrapping: PropTypes.bool,

  /** [REQUIRED OUTSIDE OF ZIONFORM] - Handler run every time the value of the input changes. */
  onChange: PropTypes.func,

  /** Handler run when the field is cleared. */
  onClear: PropTypes.func,

  /** Handler run when the reset button is pressed. */
  onReset: PropTypes.func,

  /** Handler run every time the user presses enter while the input has focus. */
  onEnterKey: PropTypes.func,

  /** Placeholder text to display to the user. */
  placeholder: PropTypes.string,

  /** Determines if native browser autofill is disabled */
  autoComplete: PropTypes.string,

  /** Type of the input. */
  type: PropTypes.oneOf([
    'text',
    'number',
    'email',
    'tel',
    'password',
    'search',
    'url',
    'color',
    'date',
    'datetime-local',
    'time',
  ]),

  /**  [REQUIRED OUTSIDE OF ZIONFORM] - The input value */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Optional icon displayed to the left of the label. */
  Icon: PropTypes.elementType,
}
