import { css } from '@linaria/core'
import React from 'react'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import type { AvatarProps } from './Avatar'
import Avatar, { sizes } from './Avatar'

const wrapperCss = css`
  position: relative;

  /* min-width|height needed to prevent squishing the avatar */
  width: var(--avatar-size);
  min-width: var(--avatar-size);
  height: var(--avatar-size);
  min-height: var(--avatar-size);
`

const leftAvatarCss = css`
  clip-path: polygon(
    100% 55.6%,
    100% 0,
    0 0,
    0 100%,
    55.6% 100%,
    56.4% 95.8%,
    57.5% 91.7%,
    59% 87.7%,
    60.8% 83.9%,
    62.8% 80.3%,
    65.1% 76.8%,
    67.7% 73.5%,
    70.5% 70.5%,
    73.5% 67.7%,
    76.8% 65.1%,
    80.3% 62.8%,
    83.9% 60.8%,
    87.7% 59%,
    91.7% 57.5%,
    95.8% 56.4%,
    100% 55.6%
  );
  inset-inline-start: 0px;
  position: absolute;
  top: 0px;
  transform-origin: top left;
  transform: scale(0.63);
`
const rightAvatarCss = css`
  bottom: 0px;
  position: absolute;
  inset-inline-end: 0px;
  transform-origin: bottom right;
  transform: scale(0.63);
`
export type MultiAvatarProps = {
  /** Defines the size of the avatar. */
  size?: keyof typeof sizes

  /** Displays the avatar on the left side. */
  avatar1: Omit<AvatarProps, 'size'>

  /**
   * Displays the avatar on the right side.
   */
  avatar2: Omit<AvatarProps, 'size'>
}

const MultiAvatar = ({ size = 'sm', avatar1, avatar2, ...props }: MultiAvatarProps): JSX.Element => {
  return (
    // Aria-hidden, since the component consuming Avatar should provide aria information about the person (i.e. PersonBlock).
    <div
      {...sanitizeProps(props)}
      className={wrapperCss}
      style={{ '--avatar-size': `${sizes[size].avatarSize}px` }}
      aria-hidden
    >
      <span className={leftAvatarCss}>
        <Avatar {...avatar1} size={size} />
      </span>
      <span className={rightAvatarCss}>
        <Avatar {...avatar2} size={size} />
      </span>
    </div>
  )
}

export default MultiAvatar
