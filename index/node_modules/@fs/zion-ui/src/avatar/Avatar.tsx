import { css } from '@linaria/core'
import React, { useCallback, useEffect, useState } from 'react'
import { sanitizeProps, boolAttr } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import PersonMale from './PersonMale'
import PersonFemale from './PersonFemale'
import Person from './Person'
import { colors, fonts, useTheme } from '../theme'

export const sizes = {
  xs: { avatarSize: 24, presenceSize: 12, presenceBorderSize: 2 },
  sm: { avatarSize: 40, presenceSize: 16, presenceBorderSize: 2 },
  md: { avatarSize: 64, presenceSize: 18, presenceBorderSize: 2 },
  lg: { avatarSize: 88, presenceSize: 22, presenceBorderSize: 2 },
  xl: { avatarSize: 136, presenceSize: 32, presenceBorderSize: 3 },
  xxl: { avatarSize: 180, presenceSize: 40, presenceBorderSize: 4 },
}

export type AvatarProps = {
  /** Defines the size of the avatar. */
  size?: keyof typeof sizes

  /**
   * Where the image comes from
   *
   * ### Getting portrait images for users
   * **Hint:** If you need to get a good url from a cis ID,
   * `zion-portrait-service` is a good place to be!
   */
  src?: string

  /** 1-character to use when no image is provided/available. */
  monogram?: string

  /** Online chat presence */
  presence?: 'online' | 'offline'

  /** Gender-icon of the Avatar when no image is provided/available AND no monogram is provided. */
  sex?: 'male' | 'female' | 'unknown'

  /** Whether to show the avatar in grayscale */
  gray?: boolean

  /** callback for if image fails to load */
  imageFailedCallback?: () => void
}

const avatarCss = css`
  position: relative; // So the presence indicator is properly placed
  width: var(--avatar-size);
  height: var(--avatar-size);
  flex-shrink: 0; // To Prevent squishing when placed in a Row
`

const avatarCircleCss = css`
  position: relative;
  border-radius: 500px;
  width: 100%;
  height: 100%;
  overflow: hidden;
  background-color: ${colors.transparent.gray03};
`

const monogramCss = css`
  text-align: center;
  text-transform: uppercase;
  font-family: ${fonts.headings};
  font-size: calc(var(--avatar-size) * 0.5);
  line-height: 2.2;
`

const imageCss = css`
  height: 100%;
  width: 100%;
  object-fit: cover;
  object-position: center;
`

const presenceCss = css`
  --presence-pos: calc((var(--avatar-size) * 0.17) - (var(--presence-size) + var(--presence-border-size) * 2) / 2);
  height: var(--presence-size);
  width: var(--presence-size);
  background: ${colors.gray20};
  position: absolute;
  border-radius: 500px;
  border: var(--presence-border-size) solid ${colors.gray00};
  bottom: var(--presence-pos);
  inset-inline-end: var(--presence-pos);

  [data-presence='online']& {
    background: ${colors.green30};
  }
`

// Avoid re-requesting the same image URLs for failed sources
const failedSourcesCache = new Set<string>()
const noOp = (): void => undefined

const Avatar = ({
  size = 'sm',
  src,
  monogram = '',
  presence,
  sex = 'unknown',
  gray = false,
  imageFailedCallback = noOp,
  ...props
}: AvatarProps): JSX.Element => {
  const theme = useTheme()
  const { t } = useTranslation()
  let Icon = Person
  if (sex === 'female') Icon = PersonFemale
  else if (sex === 'male') Icon = PersonMale

  const [goodSrc, setGoodSrc] = useState('')
  useEffect(() => setGoodSrc(failedSourcesCache.has(src) ? '' : src), [src])

  const handleImageFailed = useCallback(() => {
    setGoodSrc((prevSrc) => {
      failedSourcesCache.add(prevSrc)
      return ''
    })
    imageFailedCallback()
  }, [imageFailedCallback])

  const ariaLabel = presence ? t(`avatar.${presence}.aria-label`, `User is ${presence}`) : undefined
  const { avatarSize, presenceSize, presenceBorderSize } = sizes[size]
  return (
    // Aria-hidden, since the component consuming Avatar should provide aria information about the person (i.e. PersonBlock).
    <div
      aria-label={ariaLabel}
      {...sanitizeProps(props)}
      className={avatarCss}
      style={{
        '--avatar-size': `${avatarSize}px`,
        '--presence-size': `${presenceSize}px`,
        '--presence-border-size': `${presenceBorderSize}px`,
      }}
      aria-hidden={!presence}
    >
      <div className={avatarCircleCss}>
        {goodSrc && <img className={imageCss} src={src} alt={monogram} onError={handleImageFailed} />}
        {!goodSrc &&
          (monogram ? (
            <div className={monogramCss}>{monogram.substring(0, 1)}</div>
          ) : (
            <Icon size={size} data-gray-avatar={boolAttr(gray)} data-night={boolAttr(theme === 'night')} />
          ))}
      </div>
      {presence && <span data-presence={presence} className={presenceCss} />}
    </div>
  )
}

export default Avatar
