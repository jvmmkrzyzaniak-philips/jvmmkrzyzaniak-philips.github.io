import React, { forwardRef } from 'react'
import { css, cx } from '@linaria/core'
import type { TShirtSizes } from '../types'
import type { PolymorphicRef, PolymorphicComponentPropsWithRef } from '../polymorphic-prop-types'

const marginBoxCss = css`
  padding: var(--margin-box-y) var(--margin-box-x);
  --bleedable-top: var(--margin-box-y);
  --bleedable-sides: var(--margin-box-x);
  --bleedable-bottom: var(--margin-box-y);

  --parent-cell-width: var(--cell-width);
  & > * {
    --cell-width: calc(var(--parent-cell-width) - var(--margin-box-x) * 2);
  }
`

type Props = {
  /** Horizontal margins. */
  marginX?: TShirtSizes

  /** Vertical margins. */
  marginY?: TShirtSizes

  /** Optional classname for additional styling. */
  className?: string

  /** Optional style tag for additional styling. */
  style?: React.CSSProperties
}

type MarginBoxProps<C extends React.ElementType> = PolymorphicComponentPropsWithRef<C, Props>
type MarginBoxComponent = <C extends React.ElementType = 'div'>(props: MarginBoxProps<C>) => React.ReactElement | null

const MarginBox: MarginBoxComponent = forwardRef(
  <C extends React.ElementType = 'div'>(
    { marginX = 'none', marginY = 'none', as, style, className, ...props }: MarginBoxProps<C>,
    ref: PolymorphicRef<C>
  ): JSX.Element => {
    const TagName = as || 'div'
    return (
      <TagName
        {...props}
        ref={ref}
        className={cx(className, marginBoxCss)}
        style={{
          '--margin-box-x': `var(--spacer-${marginX})`,
          '--margin-box-y': `var(--spacer-${marginY})`,
          ...style,
        }}
      />
    )
  }
)

export default MarginBox
