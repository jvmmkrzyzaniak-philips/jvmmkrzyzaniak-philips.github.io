import React, { useState, useMemo } from 'react'
import PropTypes from 'prop-types'
import { Button, DialogOverlay, DialogOverlayFooter, DialogOverlayActions } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { i18n, appLocales, setLocalePreference } from '@fs/zion-locale'
import RecentLangList from './RecentLangList'
import LangList from './LangList'
import useRecentLangs from './useRecentLangs'
import { getLangsToDisplay } from './langFunctions'

export default function LangPicker({ coreLangs, additionalLangs = appLocales, overlay }) {
  const { t } = useTranslation()
  const [selectedLocale, setSelectedLocale] = useState(i18n.language)
  const orderedLangs = useMemo(() => getLangsToDisplay(coreLangs, additionalLangs), [additionalLangs, coreLangs])
  const { recentLangs, setRecentLang } = useRecentLangs(orderedLangs)

  const langListProps = {
    orderedLangs,
    selectedLocale,
    setSelectedLocale,
  }
  const onOverlayClose = () => {
    setSelectedLocale(i18n.language)
    overlay.close()
  }
  return (
    <DialogOverlay
      name="changeLanguageWindow"
      data-testid="languagePickerPopUp"
      title={t('lang-picker.select-language.title', 'Change Language')}
      {...overlay} /* autoWidth */
    >
      {/* TODO: The 'autoWidth' prop on DialogOverlay has been removed in zion-ui v11. Please remove it here and use the new 'size' prop in its place. */}

      <RecentLangList recentLangs={recentLangs} selectedLocale={selectedLocale} setSelectedLocale={setSelectedLocale} />
      <LangList {...langListProps} />

      <DialogOverlayFooter>
        <DialogOverlayActions>
          <Button name="changeLanguageCancelBtn" data-testid="languagePickerCancel" onClick={onOverlayClose}>
            {t('common-ui:cancel.action', 'Cancel')}
          </Button>
          <Button
            name="changeLanguageApplyBtn"
            data-testid="languagePickerApply"
            emphasis="high"
            onClick={() => {
              setRecentLang(selectedLocale)
              setLocalePreference(selectedLocale)
            }}
            disabled={selectedLocale === i18n.language}
          >
            {t('lang-picker.apply.action', 'Apply')}
          </Button>
        </DialogOverlayActions>
      </DialogOverlayFooter>
    </DialogOverlay>
  )
}

LangPicker.propTypes = {
  /** useOverlay hook used to open the dialog */
  overlay: PropTypes.object.isRequired,

  /** List of additional supported language codes */
  additionalLangs: PropTypes.arrayOf(PropTypes.string),
}
