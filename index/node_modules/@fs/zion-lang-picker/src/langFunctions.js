import { langText as availableLangs } from '@fs/zion-locale'

function sortLanguages({ text: codeA }, { text: codeB }) {
  return codeA?.localeCompare(codeB)
}

export function getLangsToDisplay(coreLangs = [], additionalLangs) {
  const additionalLangsToShow = availableLangs.additional.filter((al) => additionalLangs.includes(al.code))
  // If at least one core language is selected, only show the core languages specified.
  // Otherwise, show all core languages.
  const coreLangsToShow =
    coreLangs.length === 0 ? availableLangs.core : availableLangs.core.filter((cl) => coreLangs.includes(cl.code))
  const langs = [...coreLangsToShow, ...additionalLangsToShow]
  const CJKLangList = []
  const newLangList = []
  langs.forEach((locale) => {
    const { code } = locale
    if (['zh', 'zh-hans', 'ja', 'ko'].includes(code)) {
      CJKLangList.push(locale)
    } else {
      newLangList.push(locale)
    }
  })
  newLangList.sort(sortLanguages)
  CJKLangList.sort(sortLanguages)
  return newLangList.concat(CJKLangList)
}

function getMatchingLangFromCode(langCode) {
  const isMatchingCode = ({ code }) => langCode === code
  return availableLangs.core.find(isMatchingCode) || availableLangs.additional.find(isMatchingCode)
}

export function getLangDisplayForCodes(langCodes) {
  return langCodes.map((langCode) => {
    return getMatchingLangFromCode(langCode)
  })
}
