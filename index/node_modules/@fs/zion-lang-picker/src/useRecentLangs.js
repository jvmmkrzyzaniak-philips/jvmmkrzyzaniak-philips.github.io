import { useState, useCallback } from 'react'
import Cookies from 'js-cookie'
import { i18n } from '@fs/zion-locale'

const recentLangsCookieKey = 'fs_recent_languages'

function createNewRecentLangArray({ newLang, recentLangs: oldRecentLangs }) {
  const recentLangsMaxLength = 5
  const newRecentLangs = oldRecentLangs.filter((lang) => lang !== newLang)
  newRecentLangs.unshift(newLang)
  return newRecentLangs.slice(0, recentLangsMaxLength)
}

function getRecentLangsArray() {
  const storedRecentLangs = Cookies.get(recentLangsCookieKey)
  return storedRecentLangs?.split(',') || []
}

function getCurrentRecentLangs() {
  const storedRecentLangsArray = getRecentLangsArray()
  if (i18n.language !== [storedRecentLangsArray[0]]) {
    const currentRecentLangs = createNewRecentLangArray({ newLang: i18n.language, recentLangs: storedRecentLangsArray })
    Cookies.set(recentLangsCookieKey, currentRecentLangs.join(','))
    return currentRecentLangs
  }
  return storedRecentLangsArray
}

export default function useRecentLangs(availableLangs = []) {
  const [recentLangs] = useState(getCurrentRecentLangs)
  const availableRecentLangs = recentLangs.filter((languageCode) =>
    availableLangs.some(({ code }) => code === languageCode)
  )

  const setRecentLang = useCallback(
    (newLang) => {
      if (newLang) {
        const newRecentLangs = createNewRecentLangArray({ newLang, recentLangs })
        Cookies.set(recentLangsCookieKey, newRecentLangs.join(','))
      }
    },
    [recentLangs]
  )

  return { recentLangs: availableRecentLangs, setRecentLang }
}
