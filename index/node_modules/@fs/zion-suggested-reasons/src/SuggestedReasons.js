import React from 'react'
import { useTranslation } from 'react-i18next'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { colors, Separator, Row, Paragraph } from '@fs/zion-ui'
import { Affordance, GenericHeading } from '@fs/zion-ui/quarks-authorized-use-only'
import { trackEvent } from '@fs/zion-analytics'
import { getByPath } from '@fs/zion-form'

// For clarity on what translation keys we use, full translation keys are in comments. We dynamically create these keys.
const suggestionTypeDetailMap = {
  addOrChangeCoupleEvent: {
    // suggested-reasons.add-or-change-couple-event.1
    // suggested-reasons.add-or-change-couple-event.2
    // suggested-reasons.add-or-change-couple-event.3
    translationKey: 'suggested-reasons.add-or-change-couple-event',
    translationCount: 3,
  },
  addOrChangeCoupleFact: {
    // suggested-reasons.add-or-change-couple-fact.1
    // suggested-reasons.add-or-change-couple-fact.2
    // suggested-reasons.add-or-change-couple-fact.3
    translationKey: 'suggested-reasons.add-or-change-couple-fact',
    translationCount: 3,
  },
  addOrChangeParentEvent: {
    // suggested-reasons.add-or-change-parent-child-event.1
    // suggested-reasons.add-or-change-parent-child-event.2
    // suggested-reasons.add-or-change-parent-child-event.3
    translationKey: 'suggested-reasons.add-or-change-parent-child-event',
    translationCount: 3,
  },
  addOrChangePersonConclusion: {
    // suggested-reasons.add-or-change-person-conclusion.1
    // suggested-reasons.add-or-change-person-conclusion.2
    // suggested-reasons.add-or-change-person-conclusion.3
    translationKey: 'suggested-reasons.add-or-change-person-conclusion',
    translationCount: 3,
  },
  addOrChangeSex: {
    // Index 1-3 come from addOrChangePersonConclusion
    // suggested-reasons.add-or-change-sex.4
    translationKey: 'suggested-reasons.add-or-change-sex',
    translationCount: 4,
  },
  attachASourceToANewPersonBeingAddedUsingSourceLinker: {
    // suggested-reasons.attach-a-source-to-a-new-person-being-added-using-source-linker.1
    // suggested-reasons.attach-a-source-to-a-new-person-being-added-using-source-linker.2
    translationKey: 'suggested-reasons.attach-a-source-to-a-new-person-being-added-using-source-linker',
    translationCount: 2,
  },
  attachASourceToSomeoneAlreadyInFamilyTree: {
    // suggested-reasons.attach-a-source-to-someone-already-in-family-tree.1
    // suggested-reasons.attach-a-source-to-someone-already-in-family-tree.2
    // suggested-reasons.attach-a-source-to-someone-already-in-family-tree.3
    translationKey: 'suggested-reasons.attach-a-source-to-someone-already-in-family-tree',
    translationCount: 3,
  },
  attachSource: {
    // suggested-reasons.attach-source.1
    // suggested-reasons.attach-source.2
    // suggested-reasons.attach-source.3
    // suggested-reasons.attach-source.4
    translationKey: 'suggested-reasons.attach-source',
    translationCount: 4,
  },
  deleteCoupleEvent: {
    // suggested-reasons.delete-couple-event.1
    // suggested-reasons.delete-couple-event.2
    // suggested-reasons.delete-couple-event.3
    // suggested-reasons.delete-couple-event.4
    translationKey: 'suggested-reasons.delete-couple-event',
    translationCount: 4,
  },
  deleteNonVital: {
    // suggested-reasons.delete-non-vital.1
    // suggested-reasons.delete-non-vital.2
    // suggested-reasons.delete-non-vital.3
    translationKey: 'suggested-reasons.delete-non-vital',
    translationCount: 3,
  },
  deleteVital: {
    // suggested-reasons.delete-vital.1
    // suggested-reasons.delete-vital.2
    // suggested-reasons.delete-vital.3
    translationKey: 'suggested-reasons.delete-vital',
    translationCount: 3,
  },
  deletePerson: {
    // suggested-reasons.delete-person.1
    // suggested-reasons.delete-person.2
    // suggested-reasons.delete-person.3
    translationKey: 'suggested-reasons.delete-person',
    translationCount: 3,
  },
  detachSource: {
    // suggested-reasons.detach-source.1
    // suggested-reasons.detach-source.2
    translationKey: 'suggested-reasons.detach-source',
    translationCount: 2,
  },
  dismissDataProblem: {
    // suggested-reasons.dismiss-data-problem.1
    // suggested-reasons.dismiss-data-problem.2
    translationKey: 'suggested-reasons.dismiss-data-problem',
    translationCount: 2,
  },
  dismissRecordHint: {
    // suggested-reasons.dismiss-record-hint.1
    // suggested-reasons.dismiss-record-hint.2
    // suggested-reasons.dismiss-record-hint.3
    translationKey: 'suggested-reasons.dismiss-record-hint',
    translationCount: 3,
  },
  dismissResearchHelp: {
    // suggested-reasons.dismiss-research-help.1
    // suggested-reasons.dismiss-research-help.2
    translationKey: 'suggested-reasons.dismiss-research-help',
    translationCount: 2,
  },
  merge: {
    // suggested-reasons.merge.1
    // suggested-reasons.merge.2
    // suggested-reasons.merge.3
    // suggested-reasons.merge.4
    translationKey: 'suggested-reasons.merge',
    translationCount: 4,
  },
  deleteCoupleRelationship: {
    // suggested-reasons.remove-replace.delete-couple-relationship.1
    // suggested-reasons.remove-replace.delete-couple-relationship.2
    // suggested-reasons.remove-replace.delete-couple-relationship.3
    translationKey: 'suggested-reasons.remove-replace.delete-couple-relationship',
    translationCount: 3,
  },
  deleteParentChildRelationship: {
    // suggested-reasons.remove-replace.delete-parent-child-relationship.1
    // suggested-reasons.remove-replace.delete-parent-child-relationship.2
    // suggested-reasons.remove-replace.delete-parent-child-relationship.3
    translationKey: 'suggested-reasons.remove-replace.delete-parent-child-relationship',
    translationCount: 3,
  },
  removeReplaceChild: {
    // suggested-reasons.remove-replace.remove-replace-child.1
    // suggested-reasons.remove-replace.remove-replace-child.2
    // suggested-reasons.remove-replace.remove-replace-child.3
    translationKey: 'suggested-reasons.remove-replace.remove-replace-child',
    translationCount: 3,
  },
  removeReplaceParent: {
    // suggested-reasons.remove-replace.remove-replace-parent.1
    // suggested-reasons.remove-replace.remove-replace-parent.2
    // suggested-reasons.remove-replace.remove-replace-parent.3
    translationKey: 'suggested-reasons.remove-replace.remove-replace-parent',
    translationCount: 3,
  },
  removeReplaceSpouse: {
    // suggested-reasons.remove-replace.remove-replace-spouse.1
    // suggested-reasons.remove-replace.remove-replace-spouse.2
    // suggested-reasons.remove-replace.remove-replace-spouse.3
    translationKey: 'suggested-reasons.remove-replace.remove-replace-spouse',
    translationCount: 3,
  },
  restorePerson: {
    // suggested-reasons.restore-person.1
    // suggested-reasons.restore-person.2
    // suggested-reasons.restore-person.3
    translationKey: 'suggested-reasons.restore-person',
    translationCount: 3,
  },
  deleteOtherRelationship: {
    // suggested-reasons.delete-other-relationship.1
    // suggested-reasons.delete-other-relationship.2
    // suggested-reasons.delete-other-relationship.3
    translationKey: 'suggested-reasons.delete-other-relationship',
    translationCount: 3,
  },
  changeOtherRelationship: {
    // suggested-reasons.change-other-relationship.1
    // suggested-reasons.change-other-relationship.2
    // suggested-reasons.change-other-relationship.3
    translationKey: 'suggested-reasons.change-other-relationship',
    translationCount: 3,
  },
  addOtherRelationship: {
    // suggested-reasons.add-other-relationship.1
    // suggested-reasons.add-other-relationship.2
    // suggested-reasons.add-other-relationship.3
    translationKey: 'suggested-reasons.add-other-relationship',
    translationCount: 3,
  },
}

export const validTypes = Object.keys(suggestionTypeDetailMap)

const suggestionItemCss = css`
  border: 1px solid;
  border-radius: 4px;
  border-color: ${colors.gray40};
  padding: 2px 10px 8px 10px;
  & p {
    padding-bottom: 2px;
    color: ${colors.blue60};
  }
`

/**
 * Displays a block of suggested reason statements, which, when clicked, add their text to the provided ref.
 * @param {object} props - The props passed into the element, that become destructured into their respective destinations.
 * @param {object} [props.type] - The type of change to suggest reason statements for.
 * @returns {JSX} - A block of suggested reason statements, based on the passed-in change type.
 */
export default function SuggestedReasons({
  type,
  onAddReason,
  personId,
  duplicatePersonId,
  survivorPersonId,
  spouse1Id,
  spouse2Id,
  parentId,
  childId,
  person1Id,
  person2Id,
  headingLevel = 'div',
}) {
  const [t] = useTranslation()

  const translationVariables = {
    personId,
    duplicatePersonId,
    survivorPersonId,
    spouse1Id,
    spouse2Id,
    parentId,
    childId,
    person1Id,
    person2Id,
  }

  const suggestedReasonList = Array.from(new Array(suggestionTypeDetailMap[type].translationCount)).map((_, index) => {
    const translationKey =
      type === 'addOrChangeSex' && index < 3
        ? suggestionTypeDetailMap.addOrChangePersonConclusion.translationKey
        : suggestionTypeDetailMap[type].translationKey

    return {
      analyticsKey: `${translationKey}.${index + 1}`,
      translation: t(`${translationKey}.${index + 1}`, translationVariables),
    }
  })

  const handleClick = (inputText, analyticsKey) => {
    trackEvent({ event_name: `${analyticsKey}:Click` })
    onAddReason(inputText)
  }

  return (
    <>
      <GenericHeading size="H6" as={headingLevel}>
        {t('suggested-reasons.suggested-reason-statement-heading')}
      </GenericHeading>
      <Separator size="xxs" />
      <div data-testid="suggested-reasons-block">
        {suggestedReasonList.map((suggestion, index) => {
          const key = `add-suggested-reason:${index + 1}`
          return (
            <Row guttersY="xs" key={key}>
              <Affordance
                onClick={() => handleClick(suggestion.translation, suggestion.analyticsKey)}
                data-testid={key}
                margin="none"
              >
                <div className={suggestionItemCss} key={suggestion.translation}>
                  <Paragraph id={suggestion.analyticsKey} size="xs">
                    {suggestion.translation}
                  </Paragraph>
                </div>
              </Affordance>
            </Row>
          )
        })}
      </div>
    </>
  )
}

export const zionFormOnAddReason = ({
  name,
  setValue,
  getValues,
  setValueOptions = { shouldValidate: true, shouldDirty: true },
}) => {
  return (reason) => {
    const values = getValues()
    const currentValue = getByPath(name, values)
    setValue(name, currentValue ? `${currentValue} ${reason}` : reason, setValueOptions)
  }
}

// Stryker disable all
SuggestedReasons.propTypes = {
  /** Required to specify which set of reason statement suggestions to display. */
  type: PropTypes.oneOf(validTypes).isRequired,
  /** Required, because otherwise you will get no benefit out of using this component. */
  onAddReason: PropTypes.func.isRequired,
  /** Heading level for the Suggested Reason Statement heading block */
  headingLevel: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'div']),
  // The ID Props below are for adding the appropriate IDs to the translations that require them
  personId: PropTypes.string,
  duplicatePersonId: PropTypes.string,
  survivorPersonId: PropTypes.string,
  spouse1Id: PropTypes.string,
  spouse2Id: PropTypes.string,
  parentId: PropTypes.string,
  childId: PropTypes.string,
  person1Id: PropTypes.string,
  person2Id: PropTypes.string,
}
