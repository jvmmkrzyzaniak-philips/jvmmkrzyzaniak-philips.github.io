import { useState, useEffect } from 'react'

import { i18n } from '@fs/zion-locale'
import { getPreference, setPreference } from '@fs/zion-preferences'
import { localeIsASupportedTemplate } from './NameTemplateUtils'

/**
 * Determine the highest supported language that should be used as the default name template.
 * @param {string} userPreferredTemplateLang - The most-recently-selected name template by the user.
 * @returns {string} - The highest supported language to use as the default name template.
 */
export function defaultTemplateCascade(userPreferredTemplateLang) {
  if (localeIsASupportedTemplate(userPreferredTemplateLang)) {
    return userPreferredTemplateLang
  }

  if (localeIsASupportedTemplate(i18n.language)) {
    return i18n.language
  }
  return 'en'
}

export const setPreferredNameTemplate = (template) => setPreference('tree.nameTemplate', template)

/**
 * This hook is _designed_ to never update when setPreferredNameTemplate() is called
 * this way, we can know what the _initial_ defaultNameTemplate was when the user
 * opened the form, not a live update of when it changes.
 * @param {string} initialTemplate - to bypass fetching the preference
 * @param {boolean} disable - stop the function from making the call to get the default name template preference - this should be used only when the hook must be present but isn't always applicable
 * @returns {string} defaultTemplate or null
 */
export function useDefaultNameTemplate(initialTemplate, disable) {
  const validInitialValue = localeIsASupportedTemplate(initialTemplate) ? initialTemplate : null
  const [defaultNameTemplate, setDefaultNameTemplate] = useState(validInitialValue)

  // eslint-disable-next-line consistent-return
  useEffect(() => {
    if (!disable && !validInitialValue) {
      let isCurrent = true
      getPreference('tree.nameTemplate')
        // eslint-disable-next-line consistent-return
        .then((template) => {
          if (isCurrent) {
            return setDefaultNameTemplate(defaultTemplateCascade(template))
          }
        })
        .catch((err) => {
          if (isCurrent) {
            console.error(err)
            setDefaultNameTemplate(defaultTemplateCascade())
          }
        })
      return () => {
        isCurrent = false
      }
    }
  }, [validInitialValue, disable])

  return defaultNameTemplate
}
