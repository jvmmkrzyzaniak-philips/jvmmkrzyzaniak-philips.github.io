import React, { forwardRef, useEffect, useRef, useState } from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { IconButton, Grid, Cell, useContainerWidth, H3, Separator } from '@fs/zion-ui'
import { FormInputGroup, getByPath, useFormState, useWatch } from '@fs/zion-form'
import { MenuClose } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'
import { fieldNames, nameTemplateNamespace, useLanguageTitle } from './NameTemplateUtils'
import { GivenNameField, SuffixField, SurnameField, TitleField } from './FieldFormInputs'

const styles = {
  headerCSS: css`
    display: flex;
    justify-content: space-between;
  `,
}

/**
 * React name form: the canonical source of truth for displaying a set of name form fields within a name template.
 * Used directly by NameTemplate, not exported for external consumption.
 * The lang passed in to the NameForm is the unique identifier used to retrieve data from Form for display.
 *
 * @param {object} props - The props passed into the element, that become destructured into their respective destinations.
 * @param {string} [props.lang] - The language .
 * @param {string} [props.removeNameForm] - A reference to the removeNameForm function from NameTemplate, because we need to affect other NameForms.
 * @param {string} [props.lastNameDescription] - Optional help text to display underneath the last name.
 * @param {string} [props.isEurotypicNameOrder] - Whether the name form should be displayed in the order firstName, lastName.
 * @param {string} [props.title] - What is being done with the title field (i.e. nothing, hiding, or disabling).
 * @param {string} [props.suffix] - What is being done with the suffix field (i.e. nothing, hiding, or disabling).
 * @param {string} [props.isStandard] - Whether this name form is part of a standard name template.
 * @param {string} [props.callTransliterate] - A reference to the callTransliterate function from NameTemplate, because we need to affect other NameForms.
 * @param {string} [props.hideHeading=false] - Whether we should hide the language heading for the nameform (only if displayed by itself).
 * @param {string} [props.reserveCloseBtnSpace=false] - Whether we should save space in the display grid for the remove button.
 * @param {array} [props.languagesList=[]] - Array of all the language tags (scripts) for the lang
 * @returns {HTMLElement} - The React element itself.
 */
const NameForm = forwardRef(
  (
    {
      lang,
      removeNameForm,
      lastNameDescription,
      isEurotypicNameOrder,
      title,
      suffix,
      isStandard,
      callTransliterate,
      hideHeading = false,
      reserveCloseBtnSpace = false,
      simple,
      validateNameAtGroupLevel = true,
      warningObj,
      updateWarningObj,
      languagesList,
    },
    ref
  ) => {
    const atWidth = useContainerWidth()
    const [t] = useTranslation()
    const isDesktop = atWidth({ default: false, sm: true })
    const languageTitle = useLanguageTitle(lang)

    const showTitleAndSuffix = title !== 'hide' && suffix !== 'hide'
    const widthOffset = reserveCloseBtnSpace ? 0 : 1
    const givenNameFieldWidth = showTitleAndSuffix ? 3 + widthOffset : 4 + widthOffset
    const surnameFieldWidth = showTitleAndSuffix ? 4 : 5

    const fullFieldNames = {
      givenNameField: `${nameTemplateNamespace}.${lang}.${fieldNames.given}`,
      surnameField: `${nameTemplateNamespace}.${lang}.${fieldNames.surname}`,
      titleField: `${nameTemplateNamespace}.${lang}.${fieldNames.title}`,
      suffixField: `${nameTemplateNamespace}.${lang}.${fieldNames.suffix}`,
    }
    const partiallyTransliterated = useWatch('partiallyTransliterated')
    const { errors } = useFormState()
    const nameFormHasGroupError = Object.values(fullFieldNames).some((name) => Boolean(getByPath(name, errors)))
    const nameFormHasWarning = lang.includes('-Latn') && partiallyTransliterated
    const validateAtGroupLevel = Boolean(nameFormHasGroupError || nameFormHasWarning)
    const givenNameFieldProps = {
      callTransliterate,
      fieldNames,
      fullFieldNames,
      lang,
      validateAtGroupLevel: validateNameAtGroupLevel && validateAtGroupLevel,
      warningObj,
      updateWarningObj,
      languagesList,
    }

    const surnameFieldProps = {
      callTransliterate,
      fieldNames,
      fullFieldNames,
      lastNameDescription,
      lang,
      validateAtGroupLevel: validateNameAtGroupLevel && validateAtGroupLevel,
      warningObj,
      updateWarningObj,
      languagesList,
    }

    const titleFieldProps = {
      callTransliterate,
      fieldNames,
      fullFieldNames,
      title,
      lang,
      validateAtGroupLevel: validateNameAtGroupLevel && validateAtGroupLevel,
      warningObj,
      updateWarningObj,
    }

    const suffixFieldProps = {
      callTransliterate,
      fieldNames,
      fullFieldNames,
      suffix,
      lang,
      validateAtGroupLevel: validateNameAtGroupLevel && validateAtGroupLevel,
      warningObj,
      updateWarningObj,
    }

    const removeButton = (
      <IconButton
        Icon={MenuClose}
        onClick={removeNameForm}
        data-testid="remove-name-form"
        lang={lang}
        title={t('name-template.remove-name-form', { lang: languageTitle })}
      />
    )
    const namesOfFieldsToValidate = [...Object.values(fullFieldNames), 'partiallyTransliterated']
    if (!validateNameAtGroupLevel) {
      namesOfFieldsToValidate.splice(namesOfFieldsToValidate.indexOf(fullFieldNames.givenNameField), 2)
    }

    // This gets the current width of NameForm. The reason for `nameFormWidth` is to be able to determine when NameForm needs to wrap. useContainerWidth is not sufficient when NameForm is rendered in SplitDialogContent because useContainerWidth draws from a scope too high. And AtContainerWidth only works inside of certain components. https://familysearch.slack.com/archives/CMLL2NGUF/p1687883281379889?thread_ts=1687799811.267919&cid=CMLL2NGUF
    // TODO: When Zion updates Grid to be aware of AtContainerWidth this should be refactored. (Should be released in Zion UI v13)
    const [nameFormWidth, setNameFormWidth] = useState()
    const nameFormRef = useRef({})
    useEffect(() => {
      setNameFormWidth(nameFormRef.current.offsetWidth)
    }, [nameFormRef.current.offsetWidth])

    const simpleColumns = nameFormWidth < 480 || simple // 480 because that's roughly when the input boxes get too small to be useful.

    return (
      <div ref={nameFormRef}>
        {!hideHeading && (
          <div className={styles.headerCSS} data-testid={`nameform:${lang}:heading`}>
            <H3 size="H6">{languageTitle}</H3>
            {!isStandard && !isDesktop && !simple && removeButton}
          </div>
        )}

        <div data-testid={`nameform:${lang}`}>
          <FormInputGroup
            ignoreTouchedForWarnings
            namesOfFieldsToValidate={namesOfFieldsToValidate}
            warningValidate={
              lang.includes('-Latn')
                ? // eslint-disable-next-line consistent-return
                  (values) => {
                    if (values.partiallyTransliterated) {
                      return t('name-template.warning.partial-transliteration')
                    }
                  }
                : undefined
            }
          >
            <Grid guttersY="none" gutters="nano">
              {/* TODO: The Grid-aware AtContainerWidth component (supposed to be released with Zion UI v13) will go inside this Grid. See above TODO and comments for more details. */}
              {/* TODO: talk to ZionUI as to why setting columns to `1` makes the whole row odd. */}
              {title !== 'hide' && !simple && (
                <Cell columns={simpleColumns ? 4 : atWidth({ default: 4, sm: 2 })}>
                  <TitleField {...titleFieldProps} />
                </Cell>
              )}
              <Cell
                columns={
                  simpleColumns
                    ? 12
                    : atWidth({
                        default: title !== 'hide' ? 8 : 12,
                        sm: isEurotypicNameOrder ? givenNameFieldWidth : surnameFieldWidth,
                      })
                }
              >
                {isEurotypicNameOrder ? (
                  <GivenNameField {...givenNameFieldProps} ref={ref} />
                ) : (
                  <SurnameField {...surnameFieldProps} ref={ref} />
                )}
              </Cell>
              <Cell
                columns={
                  simpleColumns
                    ? 12
                    : atWidth({
                        default: suffix !== 'hide' ? 8 : 12,
                        sm: isEurotypicNameOrder ? surnameFieldWidth : givenNameFieldWidth,
                      })
                }
              >
                {isEurotypicNameOrder ? (
                  <SurnameField {...surnameFieldProps} />
                ) : (
                  <GivenNameField {...givenNameFieldProps} />
                )}
              </Cell>
              {suffix !== 'hide' && !simple && (
                <Cell columns={simpleColumns ? 4 : atWidth({ default: 3, sm: 2 })}>
                  <SuffixField {...suffixFieldProps} />
                </Cell>
              )}
              {!isStandard && isDesktop && !simple && (
                <Cell alignY="nextToInput" columns={1}>
                  {removeButton}
                </Cell>
              )}
            </Grid>
            <Separator size="xxs" />
          </FormInputGroup>
        </div>
      </div>
    )
  }
)

export default NameForm

// Stryker disable all
NameForm.propTypes = {
  lang: PropTypes.string.isRequired,
  removeNameForm: PropTypes.func,
  lastNameDescription: PropTypes.string,
  isEurotypicNameOrder: PropTypes.bool,
  title: PropTypes.oneOf(['show', 'hide', 'disabled']),
  suffix: PropTypes.oneOf(['show', 'hide', 'disabled']),
  isStandard: PropTypes.bool,
  simple: PropTypes.bool,
  callTransliterate: PropTypes.func,
  hideHeading: PropTypes.bool,
  reserveCloseBtnSpace: PropTypes.bool,
  languagesList: PropTypes.array,
}

NameForm.defaultProps = {
  removeNameForm: undefined,
  lastNameDescription: undefined,
  isEurotypicNameOrder: undefined,
  title: undefined,
  suffix: undefined,
  isStandard: undefined,
  simple: undefined,
  callTransliterate: undefined,
  hideHeading: false,
  reserveCloseBtnSpace: false,
}
