import React, { useEffect, useMemo } from 'react'
import { Tabs, Tab, Row, Button, useOverlayUpdate } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { useHistory } from '@fs/zion-router'
import { useDefaultNameTemplate } from '@fs/zion-name-template'
import ZionForm, { useZionForm } from '@fs/zion-form'
import { isValidPid } from '@fs/zion-pid'
import { getPersonObj } from '@fs/zion-person-service'
import { PrivatePersonsProvider, useGroupsContext } from '@fs/zion-tree-groups'
import FindByID from '../components/FindByID'
import CopyFromMyTree from '../components/CopyFromMyTree'
import FindByName, { findByNameIsValid } from '../components/FindByName'
import { useAddFindFlowContext } from '../hooks/AddFindFlowContext'
import { getGenderAutoSelect } from '../utils'
import { useCreateRelationship } from '../components/ResultsAction'
import { createNewPerson, createStage2, valuesToPersonObj } from '../services/creationService'
import {
  COPY_FROM_MY_TREE,
  createSearchObject,
  findByNameCall,
  FIND_BY_ID,
  FIND_BY_NAME,
  FIND_FLOW,
  setFormError,
} from '../services/AddFindFlowService'
import useCustomEscHandler from '../hooks/useCustomEsc'

function calculateIsValid(values, { stage }) {
  let errors = {}
  switch (stage) {
    case FIND_BY_NAME:
      errors = findByNameIsValid(values).errors
      break
    case FIND_BY_ID:
      if (!isValidPid(values[FIND_BY_ID])) {
        errors.pidNotValid = { message: '' }
      }
      break
    default:
      break
  }
  return { values, errors }
}

export default function SearchView({
  relatedParent1,
  relatedParent2,
  relatedChildOrSpouse,
  spouseToReplace,
  operationType,
  existingRelationshipHasTwoParents,
  initialValues = {},
  hideTabs = false,
  deceasedOnly = false,
  livingOnly = false,
  hideAdditionalSearchFields,
  noMatch,
  position,
  onSuccess,
  simpleMode,
  memoriesPrivacyPath,
  addFindFlowResultsPath,
  updateInfoSheetFooter,
}) {
  const [t] = useTranslation()
  const updateDialogFooter = useOverlayUpdate('footer')
  const history = useHistory()
  useCustomEscHandler()
  const {
    treeId,
    noGroupTabs,
    mode,
    setFormValues,
    setSearchResults,
    setLoading,
    abortController,
    tabIndex,
    handleTabChange,
    loading,
    setError,
    clearErrors,
    resetAbortController,
    close,
    setIsCopying,
    isReady,
    values: defaultVals,
    inInfoSheet,
    recordInfo,
    recordData,
  } = useAddFindFlowContext()

  const updateFooter = inInfoSheet ? updateInfoSheetFooter : updateDialogFooter

  const { isResearcherGroup } = useGroupsContext()

  const defaultNameTemplate = useDefaultNameTemplate()
  const genderAutoSelect = getGenderAutoSelect({
    operationType,
    relatedParent1,
    relatedParent2,
    relatedChildOrSpouse,
    position,
  })
  let status = null
  if (livingOnly) status = 'living'
  else if (deceasedOnly) status = 'deceased'

  const defaultValues = {
    ...(defaultVals || {
      sex: genderAutoSelect || null,
      status,
      birthDate: null,
      deathDate: null,
      burialDate: null,
      birthPlace: null,
      deathPlace: null,
      burialPlace: null,
      'find-by-id': '',
      defaultNameTemplate,
    }),
    ...initialValues,
  }
  if (simpleMode) {
    defaultValues.status = 'living'
  }

  const methods = useZionForm({
    mode: 'all',
    reValidateMode: 'onChange',
    resolver: calculateIsValid,
    context: { stage: mode },
    defaultValues,
  })

  const {
    formState: { isValid },
  } = methods
  const createRelationshipHandler = useCreateRelationship('createPerson')

  const handleSubmit = async (values) => {
    // This is to prevent that burial values get added to a new search if a previous search was done with
    // the template in Chinese
    if (values?.template !== 'zh') {
      values.burialDate = null
      values.burialPlace = null
    }

    setFormValues(values)

    let newAbortController
    if (abortController.signal.aborted) {
      newAbortController = new AbortController()
      resetAbortController(newAbortController)
    }
    const actionContext = 'searchByName'

    try {
      if ((noMatch && mode === FIND_BY_NAME) || (simpleMode && values?.status === 'living')) {
        const readTf =
          operationType === 'addUnconnectedCustom' ||
          operationType === 'addFirstAncestor' ||
          operationType === 'addAssociation'

        setLoading(true)
        const personObj = valuesToPersonObj(values)
        const createdPersonObj = await createNewPerson(personObj, readTf, treeId, recordInfo, recordData)
        if (!readTf) {
          await createRelationshipHandler(createdPersonObj)
        } else {
          // put this in an else because createRelationshipHandler already calls `onSuccess`, and we don't want to be firing that twice
          onSuccess?.(createdPersonObj?.id, createdPersonObj)
        }
        return
      }
      const searchObj = createSearchObject(
        {
          operationType,
          isForFindByName: mode === FIND_BY_NAME,
          existingRelationshipHasTwoParents,
          relatedParent1,
          relatedParent2,
          relatedChildOrSpouse,
          spouseToReplace,
        },
        values
      )
      setSearchResults(null)
      if (mode === FIND_BY_NAME) {
        history.push(addFindFlowResultsPath)
        if (values?.status !== 'living') {
          setLoading(true)
          const { data } = await findByNameCall({
            searchObj,
            abortController: newAbortController || abortController,
            cetTreeId: isResearcherGroup ? treeId : undefined,
          })

          setSearchResults(data)
          // setTimeout(() => {
          setLoading(false)
          // }, 1000)
        }
      }
    } catch (err) {
      // We go to addFindFlowResultsPath because errors are rendered on that page.
      history.push(addFindFlowResultsPath)
      setFormError({ err, setError, clearErrors, actionContext })
      setLoading(false)
    }
    if (mode === FIND_BY_ID) {
      setLoading(true)

      const personId = values[FIND_BY_ID]

      try {
        const [serverPromise] = await getPersonObj(personId, 'full')
        const person = await serverPromise

        // if not adding to a group and person has treeId, disallow
        const isAddingToPrivateSpaceAndPersonIsFromGroup = Boolean(!treeId && person?.treeId)

        // If adding to a family group or CET and person has a treeId from a different group, disallow
        const isAddingToGroupAndPersonIsFromDifferentGroup = Boolean(
          treeId && person?.treeId && person.treeId !== treeId
        )
        // If adding to a CET and person is not in that same CET, disallow
        const isAddingToResearcherAndPersonIsNotInResearcherTree =
          isResearcherGroup && Boolean(treeId !== person.treeId)

        // If adding to a group and person has no treeId, put them in copy flow
        const isAddingToGroupAndPersonIsFromPrivateSpace = Boolean(
          treeId && !isResearcherGroup && !person?.visibleToAllWhenUsingFamilySearchApps && !person?.treeId
        )

        if (
          isAddingToPrivateSpaceAndPersonIsFromGroup ||
          isAddingToGroupAndPersonIsFromDifferentGroup ||
          isAddingToResearcherAndPersonIsNotInResearcherTree
        ) {
          // disallow
          history.push(addFindFlowResultsPath)
          setError(FIND_FLOW, {
            messageKey: 'add-find-flow.cannot-copy',
          })
          setLoading(false)
          return
        }
        if (isAddingToGroupAndPersonIsFromPrivateSpace) {
          // If we are copying, show the privacy notice
          history.push(memoriesPrivacyPath)

          setIsCopying(true)
        } else {
          history.push(addFindFlowResultsPath)
        }
        const results = createStage2(person)
        setSearchResults(results)
        setLoading(false)
      } catch (err) {
        history.push(addFindFlowResultsPath)
        if (err?.response?.status >= 400 && err?.response?.status < 500) {
          setError(FIND_FLOW, {
            messageKey: 'add-find-flow.error.id-not-found',
          })
        } else {
          setError(FIND_FLOW, {
            messageKey: 'add-find-flow.error.general',
          })
        }

        setLoading(false)
      }
    }
  }

  const disabledBtnReason = useMemo(
    () => [t('add-find-flow.info.why-next-button-is-disabled'), t('add-find-flow.info.required-data-for-find-by-id')],
    [t]
  )

  useEffect(() => {
    updateFooter(
      mode === COPY_FROM_MY_TREE && !simpleMode ? null : (
        // Not using DialogOverlayActions, because sometimes this will be a sidesheet
        // This implementation is identical, we just don't want to get any patch updates that do not work with a sidesheet
        <Row data-testid="find-footer" alignX="end">
          <Button emphasis="low" data-testid="cancel-button" onClick={close}>
            {t('common-ui:cancel.action')}
          </Button>
          <Button
            emphasis="high"
            data-testid="next-button"
            type="submit"
            form="find-form"
            disabled={mode === FIND_BY_ID && !isValid}
            aria-label={mode === FIND_BY_ID && !isValid ? disabledBtnReason[tabIndex] : undefined}
          >
            {(noMatch && mode === FIND_BY_NAME) || simpleMode
              ? t('add-find-flow.find-results.button.create-new')
              : t('common-ui:next.action')}
          </Button>
        </Row>
      )
    )
  }, [
    disabledBtnReason,
    isValid,
    t,
    tabIndex,
    updateFooter,
    loading,
    close,
    mode,
    noMatch,
    simpleMode,
    isResearcherGroup,
  ])

  return (
    <ZionForm id="find-form" onSubmit={handleSubmit} methods={methods} data-testid="add-find-flow:search">
      {!hideTabs && !simpleMode && isReady && (
        // if you want to reorder these tabs, then then you must also reorder the corresponding array in the AddFindFlowContext reducer
        <Tabs onChange={handleTabChange} index={tabIndex} data-testid="find-by-tabs" fullWidth>
          <Tab title={t('add-find-flow.button.find-by-name')} data-testid="find-by-name-tab">
            <FindByName
              defaultNameTemplate={defaultNameTemplate}
              hideAdditionalSearchFields={hideAdditionalSearchFields}
              deceasedOnly={deceasedOnly}
              livingOnly={livingOnly}
            />
          </Tab>
          {treeId && !noGroupTabs && !isResearcherGroup && (
            <Tab title={t('add-find-flow.button.copy-from-my-tree')} data-testid="copy-from-my-tree-tab">
              <PrivatePersonsProvider treeId="PRIVATE">
                <CopyFromMyTree nextRoutePath={memoriesPrivacyPath} />
              </PrivatePersonsProvider>
            </Tab>
          )}
          <Tab title={t('add-find-flow.button.find-by-id')} data-testid="find-by-id-tab">
            <FindByID />
          </Tab>
        </Tabs>
      )}
      {(hideTabs || simpleMode) && (
        <FindByName
          defaultNameTemplate={defaultNameTemplate}
          hideAdditionalSearchFields={hideAdditionalSearchFields}
          simpleMode={simpleMode}
          livingOnly={livingOnly}
        />
      )}
    </ZionForm>
  )
}
