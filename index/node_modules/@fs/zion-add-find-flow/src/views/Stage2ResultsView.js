import React, { useRef, useEffect } from 'react'
import { colors, Separator, Card, Bleed, H2 } from '@fs/zion-ui'
import { Person } from '@fs/zion-person'
import { useTranslation } from 'react-i18next'
import { css } from '@linaria/core'
import { getStage2ResultAction } from '../components/ResultsAction'
import { useAddFindFlowContext } from '../hooks/AddFindFlowContext'
import useCustomEscHandler from '../hooks/useCustomEsc'

// Styles
const wrapperCss = css`
  padding: 0 16px;
  background-color: ${colors.gray05};
`
/**
 * JSX add/find flow find-by-name form content and validation.
 * @returns {HTMLElement} - JSX.
 */
export default function Stage2Results() {
  const [t] = useTranslation()
  const { stage2Result = { stage2Results: [] }, operationType, isCopying } = useAddFindFlowContext()

  const wrapperRef = useRef()
  useCustomEscHandler()

  useEffect(() => {
    const personElement = wrapperRef.current?.querySelector('[tabindex="0"]')

    // Wait for transition to finish before focusing
    const timeout = setTimeout(() => {
      // we want the focus to be on the first person. Person renders it's outer div with an explicit tabindex which we can use.
      if (personElement) {
        personElement.focus()
      }
    }, 400)

    return () => {
      clearTimeout(timeout)
    }
  }, [])
  return (
    <Bleed all>
      <section ref={wrapperRef} data-testid="stage-2-results" className={wrapperCss}>
        <H2 size="H5">{t('add-find-flow.title.select-couple')}</H2>
        <Separator size="xs" />
        {stage2Result.stage2Results.map((result, index) => {
          const key = `${stage2Result?.person?.id}_${index}`
          return <FindResult key={key} result={result} operationType={operationType} isCopying={isCopying} />
        })}
      </section>
    </Bleed>
  )
}

/**
 * A single result from the search.
 * @param {object} props - props.
 * @param {object} props.result - the stage 2 search result to display.
 * @returns {HTMLElement} - JSX.
 */
function FindResult({ result, isCopying }) {
  const ResultAction = getStage2ResultAction(result, isCopying)
  let topPerson = result.person
  let bottomPerson
  if (result.type === 'COUPLE') {
    topPerson = result.personOfFocusIsSpouse1 ? result.spouse1 : result.spouse2
    bottomPerson = result.personOfFocusIsSpouse1 ? result.spouse2 : result.spouse1
  }

  return (
    <>
      <Card>
        <Person avatarSize="smaller" personObj={topPerson} openPersonOverlay linksOpenNewTab />
        {bottomPerson && <Person avatarSize="smaller" personObj={bottomPerson} openPersonOverlay linksOpenNewTab />}
        <ResultAction stage2Result={result} />
      </Card>
      <Separator size="xs" />
    </>
  )
}
