import React, { useCallback, useRef } from 'react'
import type { UseOverlayReturnOptions } from '@fs/zion-ui'
import { Bleed, Button, DialogOverlay, DialogOverlayFooter, DialogOverlayActions, Paragraph } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import ZionForm, { FormTextArea, useZionForm } from '@fs/zion-form'
import SuggestedReasons, { zionFormOnAddReason } from '@fs/zion-suggested-reasons'
import { useSyncFieldToStorage } from '@fs/zion-storage-sync'
import { useFeatureFlag } from '@fs/zion-flags'

const suggestedReasonsValidTypes = [
  'addOrChangeCoupleEvent',
  'addOrChangeCoupleFact',
  'addOrChangeParentEvent',
  'addOrChangePersonConclusion',
  'addOrChangeSex',
  'attachASourceToANewPersonBeingAddedUsingSourceLinker',
  'attachASourceToSomeoneAlreadyInFamilyTree',
  'attachSource',
  'deleteCoupleEvent',
  'deleteNonVital',
  'deleteVital',
  'deletePerson',
  'detachSource',
  'dismissDataProblem',
  'dismissRecordHint',
  'dismissResearchHelp',
  'merge',
  'deleteCoupleRelationship',
  'deleteParentChildRelationship',
  'removeReplaceChild',
  'removeReplaceParent',
  'removeReplaceSpouse',
  'restorePerson',
] as const

export type SuggestedReasonsProps = {
  type: (typeof suggestedReasonsValidTypes)[number]
  personId?: string
  duplicatePersonId?: string
  survivorPersonId?: string
  spouse1Id?: string
  spouse2Id?: string
  parentId?: string
  childId?: string
}

type Props = {
  /** Needs to throw on error for onErrorCallback and closing to work correctly */
  submitFunction: (reason: string) => Promise<unknown[]> | void
  /** Reason statement if editing it */
  justification?: string
  /** Unique database key for the storeName. Ex: KW39-ABCD:relationship:edit-reason:LM65-23AF:child */
  databaseKey: string
  /** Unique name for storing temp reason. Ex: treePersonR9RelationshipReason */
  storeName: string
  /** overlay from useOverlay() */
  overlay: UseOverlayReturnOptions
  /** Function to call when submitFunction throws an error */
  onErrorCallback?: (error: Error) => void
  /** Function to call when submitFunction is successful */
  onSuccessCallback?: (...data: unknown[]) => void
  /** Custom text for the save button. If not provided, defaults to SAVE. */
  submitButtonText?: string
  /** Props for Suggested Reasons if they are wanted. */
  suggestedReasonsProps?: SuggestedReasonsProps
}

export default function GatedReasonDialog({
  submitFunction,
  justification,
  databaseKey,
  storeName,
  overlay,
  onErrorCallback,
  submitButtonText,
  onSuccessCallback,
  suggestedReasonsProps,
}: Props): JSX.Element | null {
  if (overlay.isOpen || overlay.transitioning) {
    return (
      <ReasonDialog
        {...{
          submitFunction,
          justification,
          databaseKey,
          storeName,
          overlay,
          onErrorCallback,
          submitButtonText,
          onSuccessCallback,
          suggestedReasonsProps,
        }}
      />
    )
  }
  return null
}

function ReasonDialog({
  submitFunction,
  justification,
  databaseKey,
  storeName,
  overlay,
  onErrorCallback,
  submitButtonText,
  onSuccessCallback,
  suggestedReasonsProps,
}: Props): JSX.Element {
  const showSuggestedReasons = useFeatureFlag('treeWeb_suggestedReasons').isOn
  const [t] = useTranslation()
  const headingText = justification ? t('add-find-flow.reason.heading.edit') : t('add-find-flow.reason.heading.add')

  const methods = useZionForm({
    defaultValues: { reason: justification ?? '' },
  })

  const { setValue, getValues } = methods

  const textAreaRef = useRef<HTMLInputElement>()

  const removeStoredReason = useSyncFieldToStorage({
    fieldName: 'reason',
    databaseKey,
    storeName,
    methods,
  })

  const closeOverlay = (): void => {
    removeStoredReason()
    overlay.close()
  }

  async function onSubmit(values): Promise<void> {
    try {
      const response = await submitFunction(values.reason.trim())
      closeOverlay() // only close overlay on success
      onSuccessCallback?.(response)
    } catch (error) {
      if (error instanceof Error) {
        onErrorCallback?.(error)
      }
    }
  }

  const onAddReason = useCallback(
    (reason) => {
      zionFormOnAddReason({ name: 'reason', setValue, getValues })(reason)
      textAreaRef.current?.focus?.()
    },
    [setValue, getValues]
  )

  return (
    <DialogOverlay
      {...overlay}
      as={ZionForm}
      methods={methods}
      onSubmit={onSubmit}
      close={closeOverlay}
      title={headingText}
      closeOnClickAway={false}
      focusRef={textAreaRef}
    >
      <Bleed bottom>
        <Paragraph size="xs">{t('add-find-flow.reason.caption')}</Paragraph>
        <FormTextArea name="reason" maxLength={2000} ref={textAreaRef} />
        {suggestedReasonsProps?.type && showSuggestedReasons && (
          <SuggestedReasons {...suggestedReasonsProps} onAddReason={onAddReason} />
        )}
      </Bleed>
      <DialogOverlayFooter>
        <DialogOverlayActions>
          <Button onClick={closeOverlay} data-testid="reason-dialog-cancel-button">
            {t('common-ui:cancel.action')}
          </Button>
          <Button type="submit" emphasis="high" data-testid="reason-dialog-save-button">
            {submitButtonText ?? t('common-ui:save.action')}
          </Button>
        </DialogOverlayActions>
      </DialogOverlayFooter>
    </DialogOverlay>
  )
}
