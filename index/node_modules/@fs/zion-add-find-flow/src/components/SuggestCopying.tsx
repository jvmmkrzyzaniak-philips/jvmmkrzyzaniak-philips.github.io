import React, { useRef, useState, useEffect } from 'react'
import { usePreference, setPreference } from '@fs/zion-preferences'
import {
  Checkbox,
  DialogOverlay,
  DialogOverlayFooter,
  DialogOverlayActions,
  useOverlay,
  Button,
  Paragraph,
  Separator,
} from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { useAddFindFlowContext } from '../hooks/AddFindFlowContext'

const prefKey = 'tree.addFindsuggestedCopying'

type Props = {
  status?: 'living' | 'deceased'
}

export default function SuggestCopying({ status }: Props): JSX.Element {
  const pref = usePreference(prefKey)
  const { handleTabChange } = useAddFindFlowContext()
  const overlay = useOverlay()
  const prevStatus = useRef(status)
  const { open, close } = overlay
  const [value, setValue] = useState(false)
  const { t } = useTranslation()

  useEffect(() => {
    if (prevStatus.current !== 'living' && status === 'living' && pref === '') {
      open()
    }
    prevStatus.current = status
  }, [open, pref, status])

  const handleChangeToCopy = (): void => {
    // The pref isn't set before closing
    value && setPreference(prefKey, true)
    close()
    handleTabChange(1)
  }
  const handleCheckboxChange = (evt: React.ChangeEvent<HTMLInputElement>): void => {
    setValue(evt.target.checked)
  }
  return (
    <DialogOverlay
      title={t('add-find-flow.copy-from-tree.action')}
      closeOnClickAway={false}
      {...overlay}
      onClose={() => value && setPreference(prefKey, true)}
    >
      <Paragraph size="sm">{t('add-find-flow.suggest-copying.body')}</Paragraph>
      <Separator />
      <Checkbox label={t('add-find-flow.do-not-show-again')} checked={value} onChange={handleCheckboxChange} />
      <DialogOverlayFooter>
        <DialogOverlayActions>
          <Button onClick={close}>{t('add-find-flow.add-by-name.action')}</Button>
          <Button onClick={handleChangeToCopy}>{t('add-find-flow.copy-from-tree.action')}</Button>
        </DialogOverlayActions>
      </DialogOverlayFooter>
    </DialogOverlay>
  )
}
