import React, { useCallback, useEffect, useRef, useState } from 'react'
import { Row, ActionChip, IconButton, Grid, Cell, useContainerWidth, Separator } from '@fs/zion-ui'
import { FormTextField, FormInputGroup, useZionFormContext, useWatch } from '@fs/zion-form'
import { MenuClose } from '@fs/zion-icon'
import { css } from '@linaria/core'
import { useTranslation } from 'react-i18next'

const alignButtonCss = css`
  padding-top: 28px;
`
/**
 * The row for an additional find option person search fields.
 * @param {object} props - props.
 * @param {string} props.name - the prefix to apply to all the fields names
 * @param {string} props.givenNameLabel - translated text to use for the label of the given name
 * @param {string} props.surnameLabel - translated text to use for the label of the family name
 * @param {string} props.removeLabel - translated text to use for the title and aria-label of remove button
 * @param {string} props.sex - the sex of the person we are adding to the search
 * @param {Function} props.remove - the function to call when remove button is clicked
 * @returns {HTMLElement} - JSX.
 */
function PersonNameRow({ name, givenNameLabel, surnameLabel, removeLabel, sex, remove }) {
  const atWidth = useContainerWidth()
  const isSmWidth = atWidth({ default: false, sm: true })

  const { setValue, getValues } = useZionFormContext()
  // isEurotypicNameOrder gets set in NameTemplate
  const isEurotypicNameOrder = useWatch({
    name: 'isEurotypicNameOrder',
    defaultValue: getValues().isEurotypicNameOrder, // first time this runs, it'll return the default value from the useForm hook rather than the current value in the form. Therefore, we pass in the default value here of whatever the current value is so that we don't get undefined.
  })

  // store sex information for this person in the form values since it's a "hidden" value (e.g. we don't show a field for it)
  useEffect(() => {
    setValue(`${name}.sex`, sex)
  }, [name, sex, setValue])

  const givenNameField = (
    <FormTextField
      maxLength={256}
      data-testid={`${name}-givenName`}
      autoComplete="chrome-off"
      name={`${name}.givenName`}
      label={givenNameLabel}
      focusable
    />
  )
  const surnameField = (
    <FormTextField
      maxLength={256}
      data-testid={`${name}-surname`}
      autoComplete="chrome-off"
      name={`${name}.surname`}
      label={surnameLabel}
      focusable
    />
  )
  const closeBtn = (
    <Cell columns={1}>
      <div className={alignButtonCss}>
        <IconButton Icon={MenuClose} onClick={remove} data-testid={`remove-${name}`} title={removeLabel} />
      </div>
    </Cell>
  )

  return (
    <Grid guttersY="none">
      <Cell columns={atWidth({ default: 11, sm: isEurotypicNameOrder ? 5 : 6 })}>
        {isEurotypicNameOrder ? givenNameField : surnameField}
      </Cell>
      {!isSmWidth && closeBtn}
      <Cell columns={atWidth({ default: 11, sm: isEurotypicNameOrder ? 6 : 5 })}>
        {isEurotypicNameOrder ? surnameField : givenNameField}
      </Cell>
      {isSmWidth && closeBtn}
    </Grid>
  )
}

const FatherNameRow = (props) => {
  const [t] = useTranslation()
  return (
    <PersonNameRow
      {...props}
      givenNameLabel={t('add-find-flow.label.father-first-names')}
      surnameLabel={t('add-find-flow.label.father-last-names')}
      removeLabel={t('add-find-flow.button.remove-additional-find-option.father')}
      sex="male"
    />
  )
}

const MotherNameRow = (props) => {
  const [t] = useTranslation()
  return (
    <PersonNameRow
      {...props}
      givenNameLabel={t('add-find-flow.label.mother-first-names')}
      surnameLabel={t('add-find-flow.label.mother-last-names')}
      removeLabel={t('add-find-flow.button.remove-additional-find-option.mother')}
      sex="female"
    />
  )
}

const HusbandNameRow = (props) => {
  const [t] = useTranslation()
  return (
    <PersonNameRow
      {...props}
      givenNameLabel={t('add-find-flow.label.husband-first-names')}
      surnameLabel={t('add-find-flow.label.husband-last-names')}
      removeLabel={t('add-find-flow.button.remove-additional-find-option.husband')}
      sex="male"
    />
  )
}

const WifeNameRow = (props) => {
  const [t] = useTranslation()
  return (
    <PersonNameRow
      {...props}
      givenNameLabel={t('add-find-flow.label.wife-first-names')}
      surnameLabel={t('add-find-flow.label.wife-last-names')}
      removeLabel={t('add-find-flow.button.remove-additional-find-option.wife')}
      sex="female"
    />
  )
}

/**
 * Based on the form values, we want to re-display some of the additional find options when we go back to refine search.
 * @param {object} values - form values.
 * @returns {object} - the components to render in the additional find options
 */
function computeInitialComponents(values) {
  let Parent1 = null
  let Parent2 = null
  let Spouse = null

  if (values?.parent1?.sex) {
    Parent1 = values?.parent1.sex === 'male' ? FatherNameRow : MotherNameRow
  }
  if (values?.parent2?.sex) {
    Parent2 = values?.parent2.sex === 'male' ? FatherNameRow : MotherNameRow
  }
  if (values?.spouse?.sex) {
    Spouse = values?.spouse.sex === 'male' ? HusbandNameRow : WifeNameRow
  }

  return { Parent1, Parent2, Spouse }
}

// all the pre-template logic needed for additionalFindOptions to render - this custom hook is not reuseable
function useOptions(relationRef) {
  const { setValue, getValues } = useZionFormContext()
  const [components, setComponents] = useState(computeInitialComponents(getValues()))
  const { Parent1, Parent2, Spouse } = components

  // Focus the first name part whenever the set of relations changes
  const autofocus = useCallback(
    (componentKey) => {
      setTimeout(() => {
        if (componentKey) {
          const querySelectorPart = componentKey.toLowerCase()
          relationRef.current?.querySelector(`[name^='${querySelectorPart}'] [focusable]`)?.focus()
        } else {
          relationRef.current?.querySelector(':first-child [focusable]')?.focus()
        }
      }, 0)
    },
    [relationRef]
  )

  const removeValues = useCallback(
    (name) => {
      setValue(`${name}.givenName`, '')
      setValue(`${name}.surname`, '')
      setValue(`${name}.sex`, '')
    },
    [setValue]
  )

  const nextParentKey = Parent1 ? 'Parent2' : 'Parent1'

  const addFather = useCallback(() => {
    setComponents({ ...components, [nextParentKey]: FatherNameRow })
    autofocus(nextParentKey)
  }, [autofocus, components, setComponents, nextParentKey])

  const addMother = useCallback(() => {
    setComponents({ ...components, [nextParentKey]: MotherNameRow })
    autofocus(nextParentKey)
  }, [autofocus, components, setComponents, nextParentKey])

  const addHusband = useCallback(() => {
    setComponents({ ...components, Spouse: HusbandNameRow })
    autofocus('Spouse')
  }, [autofocus, components, setComponents])

  const addWife = useCallback(() => {
    setComponents({ ...components, Spouse: WifeNameRow })
    autofocus('Spouse')
  }, [autofocus, components, setComponents])

  // If there is a Parent2, then we want to move it's values over to Parent1
  // rather than just deleting Parent1 and keeping the other parent's values
  // in the secondary slot.
  const removeParent1 = () => {
    const values = getValues()
    setComponents({ ...components, Parent1: Parent2 || null, Parent2: null })
    setValue('parent1.givenName', values.parent2?.givenName || '')
    setValue('parent1.surname', values.parent2?.surname || '')
    setValue('parent1.sex', values.parent2?.sex || '')
    removeValues('parent2')
    autofocus()
  }

  const removeParent2 = useCallback(() => {
    setComponents({ ...components, Parent2: null })
    removeValues('parent2')
    autofocus()
  }, [autofocus, components, setComponents, removeValues])

  const removeSpouse = useCallback(() => {
    setComponents({ ...components, Spouse: null })
    removeValues('spouse')
    autofocus()
  }, [autofocus, components, setComponents, removeValues])

  return {
    Parent1,
    Parent2,
    Spouse,
    addFather,
    addMother,
    addHusband,
    addWife,
    removeParent1,
    removeParent2,
    removeSpouse,
  }
}

export default function AdditionalFindOptions() {
  const [t] = useTranslation()
  const relationRef = useRef()
  const {
    Parent1,
    Parent2,
    Spouse,
    addFather,
    addMother,
    addHusband,
    addWife,
    removeParent1,
    removeParent2,
    removeSpouse,
  } = useOptions(relationRef)
  return (
    <FormInputGroup label={t('add-find-flow.legend.additional-find-options')} data-testid="additional-find-options">
      <Row>
        <ActionChip
          data-testid="add-father"
          label={t('add-find-flow.button.father')}
          onClick={addFather}
          disabled={Boolean(Parent1 && Parent2)}
        />
        <ActionChip
          data-testid="add-mother"
          label={t('add-find-flow.button.mother')}
          onClick={addMother}
          disabled={Boolean(Parent1 && Parent2)}
        />
        <ActionChip
          data-testid="add-husband"
          label={t('add-find-flow.button.husband')}
          onClick={addHusband}
          disabled={Boolean(Spouse)}
        />
        <ActionChip
          data-testid="add-wife"
          label={t('add-find-flow.button.wife')}
          onClick={addWife}
          disabled={Boolean(Spouse)}
        />
      </Row>
      <div ref={relationRef}>
        {(Parent1 || Parent2 || Spouse) && <Separator size="sm" />}
        {Parent1 && <Parent1 name="parent1" remove={removeParent1} />}
        {Parent2 && <Parent2 name="parent2" remove={removeParent2} />}
        {Spouse && <Spouse name="spouse" remove={removeSpouse} />}
      </div>
    </FormInputGroup>
  )
}
