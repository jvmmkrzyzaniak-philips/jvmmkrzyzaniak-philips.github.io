import React, { useCallback, useContext, useState } from 'react'
import { Paragraph, Row, Expander, ExpanderContent, Separator, Grid, Cell, useContainerWidth } from '@fs/zion-ui'
import { FormRadioGroup, FormRadio, FormPlaceSuggest, FormDateSuggest, useWatch } from '@fs/zion-form'
import { useTranslation } from 'react-i18next'
import { useFeatureFlag } from '@fs/zion-flags'
import { useGroupsContext } from '@fs/zion-tree-groups'
import NameTemplate, { isValidAndDirtyNameForms } from '@fs/zion-name-template'
import { i18n } from '@fs/zion-locale'
import AdditionalFindOptions from './AdditionalFindOptions'
import { AddFindFlowContext } from '../hooks/AddFindFlowContext'
import { coupleOperationTypes } from '../services/AddFindFlowService'
import SuggestCopying from './SuggestCopying'

// only show same sex warning when we are adding someone to or replacing someone in a couple.
function SameSexRelationshipWarning() {
  const [t] = useTranslation()
  const { relationshipInfo = {}, operationType } = useContext(AddFindFlowContext)
  const { relatedParent1, relatedParent2, relatedChildOrSpouse } = relationshipInfo
  const sex = useWatch({ name: 'sex' })
  let show
  switch (operationType) {
    case 'addSpouse':
    case 'addSpouse1':
    case 'addSpouse2':
    case 'replaceSpouse1':
    case 'replaceSpouse2':
      show = relatedChildOrSpouse?.gender?.toLowerCase() === sex
      break

    case 'replaceParent1':
      show = relatedParent2?.gender?.toLowerCase() === sex
      break

    case 'replaceParent2':
      show = relatedParent1?.gender?.toLowerCase() === sex
      break

    default:
      show = false
      break
  }
  return (
    show && (
      <Expander open setOpen={() => {}}>
        <ExpanderContent>
          <Paragraph size="sm">{t('add-find-flow.warning.same-sex-relationships')}</Paragraph>
        </ExpanderContent>
      </Expander>
    )
  )
}

/**
 * JSX add/find flow find-by-name form content and validation.
 *
 * @returns {HTMLElement} - JSX.
 */
export default function FindByName({
  deceasedOnly,
  livingOnly,
  defaultNameTemplate,
  hideAdditionalSearchFields,
  simpleMode,
}) {
  const { operationType } = useContext(AddFindFlowContext)
  const { isOn: addBurialFields } = useFeatureFlag('ginkgo_addFindFlow_addBurialFields')
  const atWidth = useContainerWidth()
  const [t] = useTranslation()
  const status = useWatch({ name: 'status' })
  const [template, setTemplate] = useState(defaultNameTemplate)
  const disableUnknownInput = Boolean(coupleOperationTypes.includes(operationType))
  const updateLangTemplate = useCallback((lang) => {
    setTemplate(lang)
  }, [])
  const { currentTreeId, isResearcherGroup } = useGroupsContext()

  return (
    <section data-testid="find-by-name">
      <NameTemplate
        simple={simpleMode}
        defaultNameTemplate={defaultNameTemplate}
        lastNameDescription={t('add-find-flow.info.if-female-use-maiden-name')}
        languagePickerCallback={updateLangTemplate}
      />

      <FormRadioGroup label={t('add-find-flow.legend.sex')} namesOfFieldsToValidate={['sex']}>
        <Row>
          <FormRadio label={t('add-find-flow.label.sex.male')} name="sex" value="male" />
          <FormRadio label={t('add-find-flow.label.sex.female')} name="sex" value="female" />
          <FormRadio
            label={t('add-find-flow.label.sex.unknown')}
            name="sex"
            value="unknown"
            disabled={disableUnknownInput}
          />
        </Row>
      </FormRadioGroup>

      {/* to switch into controlled mode, Expander checks for setOpen to be defined, even if we do not use it */}

      <SameSexRelationshipWarning />
      <FormRadioGroup label={t('add-find-flow.legend.living-status')} namesOfFieldsToValidate={['status']}>
        <Row>
          <FormRadio
            label={t('add-find-flow.label.status.deceased')}
            name="status"
            value="deceased"
            disabled={livingOnly}
          />
          <FormRadio
            label={t('add-find-flow.label.status.living')}
            name="status"
            value="living"
            disabled={deceasedOnly}
          />
        </Row>
      </FormRadioGroup>

      {!isResearcherGroup && currentTreeId && <SuggestCopying status={status} />}

      {!hideAdditionalSearchFields && !simpleMode && (
        <>
          <Grid guttersY="none">
            <Cell columns={atWidth({ default: 12, sm: 5 })}>
              <FormDateSuggest label={t('add-find-flow.label.status.birth-date')} standardize name="birthDate" />
            </Cell>
            <Cell columns={atWidth({ default: 12, sm: 7 })}>
              <FormPlaceSuggest label={t('add-find-flow.label.status.birth-place')} standardize name="birthPlace" />
            </Cell>
          </Grid>
          {/* Expander has some issues with cutting off autosuggest overlay, so we can't use it here :( */}
          {status !== 'living' && (
            <>
              <Grid guttersY="none">
                <Cell columns={atWidth({ default: 12, sm: 5 })}>
                  <FormDateSuggest label={t('add-find-flow.label.status.death-date')} standardize name="deathDate" />
                </Cell>
                <Cell columns={atWidth({ default: 12, sm: 7 })}>
                  <FormPlaceSuggest label={t('add-find-flow.label.status.death-place')} standardize name="deathPlace" />
                </Cell>
              </Grid>

              {addBurialFields && template === 'zh' && (
                <Grid guttersY="none">
                  <Cell columns={atWidth({ default: 12, sm: 5 })}>
                    <FormDateSuggest
                      label={t('add-find-flow.label.status.burial-date')}
                      standardize
                      name="burialDate"
                      data-testid="burialDate"
                    />
                  </Cell>
                  <Cell columns={atWidth({ default: 12, sm: 7 })}>
                    <FormPlaceSuggest
                      label={t('add-find-flow.label.status.burial-place')}
                      standardize
                      name="burialPlace"
                      data-testid="burialPlace"
                    />
                  </Cell>
                </Grid>
              )}
              <Separator size="nano" />

              <AdditionalFindOptions />
            </>
          )}
        </>
      )}
    </section>
  )
}

/**
 * Whether the find by name form has all the required field filled out to do a search.
 * @param {object} values - the form values.
 * @returns {object} - Whether the data is valid and any associated errors.
 */
export const findByNameIsValid = (values) => {
  const { sex, status } = values
  const { isValid, errors } = isValidAndDirtyNameForms(values)

  if (!values.sex) errors.sex = { message: i18n.t('add-find-flow.info.indicate-gender') }
  if (!values.status) errors.status = { message: i18n.t('add-find-flow.info.indicate-living-or-deceased') }

  return {
    isValid: status && sex && isValid,
    errors,
  }
}
