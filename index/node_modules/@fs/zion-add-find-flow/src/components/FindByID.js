import React, { useRef, useEffect } from 'react'
import { FormTextField, useZionFormContext } from '@fs/zion-form'
import { formatPid, isValidPid } from '@fs/zion-pid'
import { useTranslation } from 'react-i18next'

const fieldId = 'find-by-id'

/**
 * JSX add/find flow find-by-id form content and validation.
 *
 * @returns {HTMLElement} - JSX.
 */
export default function FindByID() {
  const [t] = useTranslation()
  const { setValue, getValues } = useZionFormContext()
  const inputRef = useRef()

  const formatId = (evt) => {
    let cursorPosition = evt.target.selectionEnd
    const values = getValues()
    const originalValue = values[fieldId]
    const formattedValue = formatPid(originalValue)
    const originalValueHyphenCount = (originalValue.match(/-/g) || []).length
    const formattedValueHyphenCount = (formattedValue.match(/-/g) || []).length

    if (formattedValue !== originalValue) {
      // If user input contained invalid characters or a hyphen that were removed, move the insertion point back one slot
      if (
        formattedValue.length < originalValue.length &&
        !isValidPid(originalValue) &&
        originalValueHyphenCount === formattedValueHyphenCount
      ) {
        cursorPosition--
      }

      // If we just injected a hyphen or stepped over one (character and hyphen swapped places), move the insertion point forward one slot
      if (
        formattedValue[cursorPosition - 1] === '-' &&
        (formattedValue.length > originalValue.length ||
          (originalValue[cursorPosition - 1].match(RegExp(`${formattedValue[cursorPosition]}`, 'gi')) &&
            originalValue[cursorPosition].match(RegExp(`${formattedValue[cursorPosition - 1]}`, 'gi'))))
      ) {
        cursorPosition++
      }

      setValue(fieldId, formattedValue, { shouldValidate: true })
      // TW-4590 - Put that thing back where it came from, or so help me
      evt.target.setSelectionRange(cursorPosition, cursorPosition)
    }
  }

  // Autofocus on the field on first render
  useEffect(() => {
    // we have to set timeout because on refine search it just isn't rendered in the dom by the time this runs.
    setTimeout(() => {
      inputRef?.current?.focus()
    }, 0)
  }, [])

  // TODO: Flash border on bad input, instead of having a terrible error message, clearing on further entry
  return (
    <section data-testid={fieldId}>
      <FormTextField
        ref={inputRef}
        label={t('add-find-flow.label.id-number')}
        helpMessage={t('add-find-flow.info.id-explanation')}
        name={fieldId}
        onChange={formatId}
        maxLength={9}
        data-testid={`${fieldId}-field`}
      />
    </section>
  )
}
