import React, { useMemo } from 'react'
import { usePreference } from '@fs/zion-preferences'
import { useTranslation } from 'react-i18next'
import { Ellipsis } from '@fs/zion-ui'
import { computeHeadings } from '../utils'

export default function useUpdateTitle({
  heading,
  operationType,
  relatedParent1,
  relatedParent2,
  relatedChildOrSpouse,
  spouseToReplace,
}) {
  const showNameInRomanScriptPreference = usePreference('tree.showNamesInRomanScript')
  const [t] = useTranslation()
  const operationTypeTranslations = useMemo(
    () => ({
      addChild: t('add-find-flow.title.add-child'),
      addSpouse: t('add-find-flow.title.add-spouse'),
      addSpouse1: t('add-find-flow.title.add-spouse-1'),
      addSpouse2: t('add-find-flow.title.add-spouse-2'),
      replaceSpouse1: heading || t('add-find-flow.title.replace-person'),
      replaceSpouse2: heading || t('add-find-flow.title.replace-person'),
      addParents: t('add-find-flow.title.add-parents'),
      addParent1: t('add-find-flow.title.add-father'),
      addParent2: t('add-find-flow.title.add-mother'),
      replaceParents: heading || t('add-find-flow.title.replace-parents'),
      replaceParent1: heading || t('add-find-flow.title.replace-person'),
      replaceParent2: heading || t('add-find-flow.title.replace-person'),
      addUnconnected: t('add-find-flow.title.add-unconnected'),
      addUnconnectedCustom: heading || t('add-find-flow.title.add-unconnected'),
      addFirstAncestor: heading || t('add-find-flow.title.add-first-ancestor'),
      addAssociation: heading || t('add-find-flow.button.add-relationship'),
      replaceAssociatePerson1: heading || t('add-find-flow.title.replace-person'),
      replaceAssociatePerson2: heading || t('add-find-flow.title.replace-person'),
    }),
    [heading, t]
  )
  const { relatedParent1Subtitle, relatedParent2Subtitle, relatedChildOrSpouseSubtitle, spouseToReplaceSubtitle } =
    useMemo(
      () =>
        computeHeadings({
          relatedParent1,
          relatedParent2,
          relatedChildOrSpouse,
          spouseToReplace,
          operationType,
          showNameInRomanScriptPreference,
          t,
        }),
      [
        relatedParent1,
        relatedParent2,
        relatedChildOrSpouse,
        spouseToReplace,
        operationType,
        showNameInRomanScriptPreference,
        t,
      ]
    )

  return {
    title: operationTypeTranslations[operationType],
    subtitle: (
      <>
        {relatedParent1Subtitle && <Ellipsis>{relatedParent1Subtitle}</Ellipsis>}
        {relatedParent2Subtitle && <Ellipsis>{relatedParent2Subtitle}</Ellipsis>}
        {relatedChildOrSpouseSubtitle && <Ellipsis>{relatedChildOrSpouseSubtitle}</Ellipsis>}
        {spouseToReplaceSubtitle && <Ellipsis>{spouseToReplaceSubtitle}</Ellipsis>}
      </>
    ),
  }
}
