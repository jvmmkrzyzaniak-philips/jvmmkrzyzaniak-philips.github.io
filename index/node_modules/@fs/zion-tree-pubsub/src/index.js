import { useEffect } from 'react'
import PubSub from 'PubSub'

// This module needs to be truly singleton to work. In the odd event that there are two
// versions of this module in built code (which is plausible without diligent curation of
// the installed modules) we need to reference/hoist state to the window to ensure that
// there is only one pubsub.

// eslint-disable-next-line no-multi-assign, no-underscore-dangle -- Tyler Graf need not obey your silly rules
export const pubsub = (window.__fs_tree_pubsub__ = window.__fs_tree_pubsub__ || new PubSub())

export const events = {
  conclusion: 'conclusion', // whenever a conclusion is created/updated/deleted
  addPerson: 'addPerson', // whenever a person is added (created or found)
  ordinanceReserve: 'ordinanceReserve', // whenever an ordinance is reserved
  indicator: 'indicator', // whenever an indicator is dismissed
  discussion: 'discussion', // whenever a tree-discussion is created/updated/deleted
  source: 'source', // whenever a source is created/updated/deleted
}

export const createKey = ({ evt, id }) => {
  if (!(evt in events)) throw new Error('event must be in events object within this file')

  return id ? `${evt}.${id}` : evt
}

export const publish = (args) => {
  pubsub.publish(createKey(args), args.data)
}

export const subscribe = (args, cb) => {
  return pubsub.subscribe(createKey(args), cb)
}

export const unsubscribe = (token) => {
  return pubsub.unsubscribe(token)
}

export const useSubscribe = ({ evt, id }, cb) => {
  useEffect(() => {
    let token
    if (evt && cb) {
      token = subscribe({ evt, id }, cb)
    }
    return () => {
      unsubscribe(token)
    }
  }, [cb, id, evt])
}
