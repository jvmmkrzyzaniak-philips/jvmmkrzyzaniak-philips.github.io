import type {
  Ordinance,
  Ordinances,
  OrdinancesByType,
  TreeDataOrdinanceType,
  OrdinanceType,
  TempleOrdinanceType,
} from '@fs/zion-tree-types'

export const templeTypeMap = {
  baptism: 'BAPTISM',
  confirmation: 'CONFIRMATION',
  initiatory: 'INITIATORY',
  endowment: 'ENDOWMENT',
  sealingToParents: 'SEALING_TO_PARENTS',
  sealingToSpouse: 'SEALING_TO_SPOUSE',
} as const

export const typeMap = {
  Baptism: 'BAPTISM',
  Confirmation: 'CONFIRMATION',
  Initiatory: 'INITIATORY',
  Endowment: 'ENDOWMENT',
  SealingToParents: 'SEALING_TO_PARENTS',
  SealingToSpouse: 'SEALING_TO_SPOUSE',
} as const

export const reverseTypeMap = {
  BAPTISM: 'Baptism',
  CONFIRMATION: 'Confirmation',
  INITIATORY: 'Initiatory',
  ENDOWMENT: 'Endowment',
  SEALING_TO_PARENTS: 'SealingToParents',
  SEALING_TO_SPOUSE: 'SealingToSpouse',
} as const

export const reverseTempleTypeMap = {
  BAPTISM: 'baptism',
  CONFIRMATION: 'confirmation',
  INITIATORY: 'initiatory',
  ENDOWMENT: 'endowment',
  SEALING_TO_PARENTS: 'sealingToParents',
  SEALING_TO_SPOUSE: 'sealingToSpouse',
} as const

export const ordToLetterMap = {
  BAPTISM: 'B',
  CONFIRMATION: 'C',
  INITIATORY: 'I',
  ENDOWMENT: 'E',
  SEALING_TO_PARENTS: 'SP',
  SEALING_TO_SPOUSE: 'SS',
} as const

export function toOrdinanceType(type: TreeDataOrdinanceType | TempleOrdinanceType): OrdinanceType {
  return typeMap[type] || templeTypeMap[type]
}

export function toTreeDataOrdinanceType(type: OrdinanceType): TreeDataOrdinanceType {
  return reverseTypeMap[type]
}

export function ordinancesByType(ordinances: Ordinances | Ordinance[] | undefined): OrdinancesByType {
  let ords: Ordinance[] = []
  if (Array.isArray(ordinances)) ords = ordinances
  else if (ordinances) ords = ordinances.ordinances
  return ords.reduce<OrdinancesByType>(
    (acc, ord) => {
      switch (ord.type) {
        case 'SEALING_TO_PARENTS':
          acc.sealingsToParents.push(ord)
          break
        case 'SEALING_TO_SPOUSE':
          acc.sealingsToSpouses.push(ord)
          break
        case 'BAPTISM':
        case 'CONFIRMATION':
        case 'INITIATORY':
        case 'ENDOWMENT':
          acc.bcie.push(ord)
          break
        default: {
          const exhaustiveCheck: never = ord
          throw new Error(`Unknown ordinance type: ${exhaustiveCheck}`)
        }
      }
      return acc
    },
    { bcie: [], sealingsToParents: [], sealingsToSpouses: [] }
  )
}

/** Filters to ordinances that can be shared with temple */
export const getShareableWithTempleOrdinances = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => ordinance.canAssignTemple && !ordinance.canReserve)

/** Filters to ordinances that can be shared with groups */
export const getShareableWithGroupOrdinances = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => ordinance.canAssignFamilyGroup && !ordinance.canReserve)

/** Filters to ordinances that can be unshared with temple */
export const getUnshareableWithTempleOrdinances = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => ordinance.assignedToTemple && ordinance.canUnAssign)

/** Filters to ordinances that can be unshared with group */
export const getUnshareableWithGroupOrdinances = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => ordinance.groupId && ordinance.canUnAssign)

/** Filters to ordinances that can be reserved for later (either unshared with group or reserved secondarily from a group) */
export const getReserveForLaterOrdinances = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => ordinance.groupId && (ordinance.canUnAssign || ordinance.canReserve))

/** Filters to ordinances that can be printed */
export const getPrintableOrdinances = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => ordinance.canPrint)

export const getPrintNoUnreservedSPSS = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => {
    const isSealingOrdinance = ordinance.type === 'SEALING_TO_PARENTS' || ordinance.type === 'SEALING_TO_SPOUSE'
    return ordinance.canPrint && (!isSealingOrdinance || (isSealingOrdinance && ordinance.reserve))
  })

/** Filters to ordinances that can be unreserved */
export const getUnreservableOrdinances = (ordinances: Ordinance[]): Ordinance[] =>
  ordinances.filter((ordinance) => ordinance.canUnreserve)
