import type { ComponentProps } from 'react'
import React, { useCallback, useRef } from 'react'
import { IconButton, colors } from '@fs/zion-ui'
import { PlaceTemple, NoticeLoading } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'
import type { UseOverlayReturnOptions } from '@fs/zion-ui'
import { css } from '@linaria/core'
import { useGroupsContext } from '@fs/zion-tree-groups'
import type { TempleRollupStatus } from '@fs/zion-tree-types'
import TempleTimerIcon from './TempleTimerIcon'

const templeIconColorMap: Record<TempleRollupStatus, 'yellow' | 'blue' | 'green' | undefined> = {
  NEEDS_MORE_INFORMATION: 'yellow',
  IN_PROGRESS: 'blue',
  RESERVED: 'blue',
  READY: 'green',
  RESERVED_SHARED_READY: 'green',
  CALCULATING: undefined,
  COMPLETED: undefined,
  NOT_AVAILABLE: undefined,
}

const colorKeyMap = {
  green: 'ordinances-reserve.temple-status.green',
  blue: 'ordinances-reserve.temple-status.blue',
  yellow: 'ordinances-reserve.temple-status.yellow',
}

const emphasisMap = {
  NEEDS_MORE_INFORMATION: 'lightHigh',
  RESERVED: 'high',
  READY: 'high',
  RESERVED_SHARED_READY: 'high',
  CALCULATING: undefined,
  COMPLETED: undefined,
  NOT_AVAILABLE: undefined,
} as const

const greenTempleCss = css`
  position: relative;
  width: fit-content;
  & [data-testid='temple-indicator-button-green'] {
    /* Override normal green background */
    --button-background: ${colors.green30};
    color: ${colors.gray00};
  }
  & [data-testid='timer-icon'] {
    /* We need !important here because of css-ordering issues on the production app. */
    --icon-button-size: var(--timer-button-size) !important;
    --button-background: ${colors.green30};
    color: ${colors.gray00};
    padding: 0;
  }
`

const topMap = {
  xs: -8,
  sm: -8,
  md: -6,
  lg: -3,
  xl: -3,
} satisfies Record<Exclude<ComponentProps<typeof IconButton>['size'], undefined>, number>

const sizeMap = {
  xs: '12px',
  sm: '14px',
  md: '18px',
  lg: '24px',
  xl: '32px',
} satisfies Record<Exclude<ComponentProps<typeof IconButton>['size'], undefined>, string>

type Props = {
  templeRollupStatus: TempleRollupStatus
  overlay: UseOverlayReturnOptions
  size?: ComponentProps<typeof IconButton>['size']
}
export default function TempleIndicatorButton({ templeRollupStatus, overlay, size = 'sm' }: Props): JSX.Element | null {
  const [t] = useTranslation()
  const iconButtonRef = useRef<HTMLDivElement>(null)
  const { isResearcherGroup, loading: loadingGroups } = useGroupsContext()

  const loading = templeRollupStatus === 'CALCULATING'
  const color = templeIconColorMap[templeRollupStatus]
  const colorString = color ? `-${color}` : ''
  const iconEmphasis = emphasisMap[templeRollupStatus]

  const Icon = useCallback(() => <TempleTimerIcon size={sizeMap[size]} />, [size])

  if (isResearcherGroup || loadingGroups) return null

  if (color || loading) {
    return (
      <div className={greenTempleCss} style={{ '--timer-button-size': sizeMap[size] }}>
        <IconButton
          ref={iconButtonRef}
          data-testid={`temple-indicator-button${colorString}${loading ? '-loading' : ''}`}
          Icon={loading ? NoticeLoading : PlaceTemple}
          color={color}
          emphasis={loading ? ('low' as const) : iconEmphasis}
          title={color ? t(colorKeyMap[color]) : ''}
          onClick={overlay.handleClick}
          disabled={loading}
          size={size}
          linkName={`temple indicator:${color}: clicked`}
          aria-haspopup="dialog"
        />
        {templeRollupStatus === 'RESERVED_SHARED_READY' && (
          <div
            style={{
              color: colors.gray00,
              '--button-background': colors.green30,
              '--button-hover-background': colors.green50,
              top: topMap[size],
              insetInlineEnd: -3,
              position: 'absolute',
            }}
          >
            <IconButton
              title=""
              data-testid="timer-icon"
              emphasis="high"
              color={color}
              Icon={Icon}
              onClick={overlay.handleClick}
              aria-haspopup="dialog"
            />
          </div>
        )}
      </div>
    )
  }

  return null
}
