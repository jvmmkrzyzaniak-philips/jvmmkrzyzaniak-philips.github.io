import React, { type ComponentProps, lazy, Suspense } from 'react'
import { useOverlay } from '@fs/zion-ui'
import type { PID, TempleRollupStatus } from '@fs/zion-tree-types'
import { usePollRefetch } from '../reserve-dialog/helpers'
import TempleIndicatorButton from './TempleIndicatorButton'

const ReservePersonDialog = lazy(() => import('../reserve-dialog/ReservePersonDialog'))

type TempleFamilyIndicatorProps = {
  /** Button size */
  size?: ComponentProps<typeof TempleIndicatorButton>['size']

  /** refetchTempleRollupStatus is called when templeRollupStatus is CALCULATING or when ordinances
   *  have been reserved. pids are given when ordinances have been reserved, otherwise no pids
   *  are given.
   */
  refetchTempleRollupStatus: (pids?: string[]) => void | Promise<void>

  /** Temple Rollup Status for the couple */
  templeRollupStatus: TempleRollupStatus | undefined

  personId: PID

  preferredParentsIds?: { parent1Id?: PID; parent2Id?: PID }
}

/** TempleIndicator - Smart button and reserve overlay for a couple. */
export default function TemplePersonIndicator({
  personId,
  size,
  templeRollupStatus,
  refetchTempleRollupStatus,
  preferredParentsIds,
}: TempleFamilyIndicatorProps): JSX.Element | null {
  const overlay = useOverlay()

  usePollRefetch(templeRollupStatus === 'CALCULATING' || !templeRollupStatus, refetchTempleRollupStatus)
  if (templeRollupStatus === 'NOT_AVAILABLE') return null
  return (
    <>
      <TempleIndicatorButton templeRollupStatus={templeRollupStatus ?? 'CALCULATING'} overlay={overlay} size={size} />
      <Suspense fallback="">
        {(overlay.isOpen || overlay.transitioning) && (
          <ReservePersonDialog
            overlay={overlay}
            personId={personId}
            refetchTempleRollupStatus={refetchTempleRollupStatus}
            templeRollupStatus={templeRollupStatus ?? 'CALCULATING'}
            preferredParentsIds={preferredParentsIds}
          />
        )}
      </Suspense>
    </>
  )
}
