import React from 'react'
import { useTranslation } from 'react-i18next'
import { trackEvent } from '@fs/zion-analytics'
import { useStatusOverlay, ActionChip } from '@fs/zion-ui'
import PropTypes from 'prop-types'
import { copyToClipboard } from '@fs/zion-frontend-friends'

/**
 * React base export for click-to-copy functionality.
 * @param {object} props - The props passed into the element, that become destructured into their respective destinations.
 * @param {string} props.value - The value to copy to the clipboard. This can be used when a different value than what is shown needs to be copied. If it is not provided, the textContent of the children will be used as the value.
 * @param {string} props.analyticsEventName - The name of the analytics event to be tracked
 * @param {bool} props.inline - Whether the actionchip should be inline or not
 * @returns {HTMLElement} - The React element itself.
 */
export default function ClickToCopy({ value, copiedMessage, analyticsEventName = null, inline, ...props }) {
  const showStatusOverlay = useStatusOverlay()
  const [t] = useTranslation()

  /**
   * Copy the value provided into the clipboard.
   * @param {object} evt - The event passed into the function
   */
  function copyValue(evt) {
    evt.stopPropagation()

    copyToClipboard(value, 'text/plain', () => {
      if (analyticsEventName) {
        trackEvent({ event_name: analyticsEventName })
      }

      showStatusOverlay({
        message: copiedMessage || t('click-to-copy.person-id-copied.alert-message', 'ID copied.'),
        type: 'normal',
        transient: true,
      })
    })
  }

  return <ActionChip inline={inline} label={value} onClick={copyValue} data-testid="clickToCopy" {...props} />
}

ClickToCopy.propTypes = {
  analyticsEventName: PropTypes.string,
  copiedMessage: PropTypes.string,
  value: PropTypes.string.isRequired,
  inline: PropTypes.bool,
}
