import React, { Children, useState, useRef, useEffect } from 'react'
import { css, cx } from '@linaria/core'

import { ArrowCaret } from '@fs/zion-icon'
import PropTypes from 'prop-types'
import { useTranslation } from 'react-i18next'
import { colors, FlowGrid, H5, IconButton, MarginBox, Row } from '@fs/zion-ui'
import { DotNavigation } from '@fs/zion-ui/quarks-authorized-use-only'
import { boolAttr } from '@fs/zion-frontend-friends'

const billboardLayout = css`
  display: grid;
  grid-template-rows: auto 1fr auto;
  height: 100%;
`
const billboardContentCss = css`
  overflow-y: auto;
`
const controlsCss = css`
  padding: 12px 0px 32px 0px;
  width: 100%;
  z-index: 1;
  &[canscroll] {
    box-shadow: 0px -1px 10px rgba(0, 0, 0, 0.2);
  }
`

const endHeaderCss = css`
  width: 100%;
  top: 0;
  background-color: ${colors.gray00};
  box-shadow: 0px 1px 10px rgba(0, 0, 0, 0.2);
  border-bottom: 1px solid ${colors.gray03};
  position: sticky;
  z-index: 1;
`

const sliderButtonCss = css`
  border-radius: 50%;
  &[disabled] {
    background-color: ${colors.gray03};
    color: ${colors.gray05};
  }
  & button {
    margin: 0;
  }
`
const prevButtonCss = css`
  background-color: ${colors.gray03};
  &:focus,
  &:hover:not([disabled]) {
    background-color: ${colors.gray03};
  }
`
const nextButtonCss = css`
  background-color: ${colors.blue20};
  &:focus,
  &:hover:not([disabled]) {
    background-color: ${colors.blue30};
  }
`

const SliderButton = ({ direction, onClick, disabled, ...props }) => {
  const buttonCss = direction === 'backward' ? prevButtonCss : nextButtonCss
  const { t } = useTranslation()
  return (
    <div className={cx(sliderButtonCss, buttonCss)} disabled={disabled}>
      <IconButton
        title={
          direction === 'backward'
            ? t('paginator.previous-slide', 'Previous Slide')
            : t('paginator.next-slide', 'Next Slide')
        }
        Icon={ArrowCaret}
        iconColor={direction === 'backward' ? colors.gray90 : colors.gray00}
        onClick={onClick}
        iconDirection={direction}
        disabled={disabled}
        {...props}
      />
    </div>
  )
}
export default function BillboardPaginator({ children, endControl = null, endHeaderText = null }) {
  // Only render the current slide
  const slides = Children.toArray(children)
  const [currentSlideIndex, setCurrentSlideIndex] = useState(0)
  const increment = () => setCurrentSlideIndex((current) => current + 1)
  const decrement = () => setCurrentSlideIndex((current) => current - 1)
  const onEndSlide = currentSlideIndex === slides.length - 1

  const scrollRef = useRef()
  const [canScroll, setCanScroll] = useState(false)
  useEffect(() => {
    const isScrollable = scrollRef?.current?.scrollHeight > scrollRef?.current?.clientHeight
    setCanScroll(isScrollable)
  }, [currentSlideIndex])

  return (
    <div className={billboardLayout}>
      {onEndSlide && endHeaderText ? (
        <MarginBox className={endHeaderCss} marginX="xs" marginY="xxs">
          <H5>{endHeaderText}</H5>
        </MarginBox>
      ) : (
        // Returning an empty div to handle the grid styling correctly for a dynamic header
        <div />
      )}
      <div className={billboardContentCss} ref={scrollRef}>
        {slides[currentSlideIndex]}
      </div>
      <div className={controlsCss} canscroll={boolAttr(canScroll)}>
        <FlowGrid guttersY="xs">
          {onEndSlide && endControl}
          <Row alignX="center" alignItemsY="middle" gutters="xs">
            <SliderButton
              direction="backward"
              data-testid="prevSlide"
              onClick={decrement}
              disabled={currentSlideIndex === 0}
            />
            <DotNavigation index={currentSlideIndex} length={slides.length} featuredColor={colors.blue30} />
            <SliderButton
              direction="forward"
              data-testid="nextSlide"
              onClick={increment}
              disabled={currentSlideIndex === slides.length - 1}
            />
          </Row>
        </FlowGrid>
      </div>
    </div>
  )
}

BillboardPaginator.propTypes = {
  /** Put meaningful descriptions in for your propType comments */
  /** A React Node, such as a Button to be rendered above the navigation controls on the end slide.  This allows you to customize what actions are available to a user on the End Slide. */
  endControl: PropTypes.node,
  /** Text to show as a heading on the last slide. */
  endHeaderText: PropTypes.string,
}
