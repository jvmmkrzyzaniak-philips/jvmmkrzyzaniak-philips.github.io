import React, { lazy, Suspense, useCallback, useContext, useEffect, useRef, useState } from 'react'
import { css } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import { MenuClose, NoticeQuestion } from '@fs/zion-icon'
import { getPreference, setPreference } from '@fs/zion-preferences'
import { VisuallyHidden } from '@reach/visually-hidden'
import PropTypes from 'prop-types'
import { useTranslation } from 'react-i18next'
import {
  Button,
  IconButton,
  useOverlay,
  QuickGlanceOverlay,
  QuickGlanceActions,
  colors,
  Paragraph,
  usePageWidth,
  Checkbox,
  Row,
  MarginBox,
} from '@fs/zion-ui'
import { useUser } from '@fs/zion-user'
import { OpenCloseAnimation, Overlay, Portal, useBodyScrollLock } from '@fs/zion-ui/quarks-authorized-use-only'
import BillboardPaginator from '../billboard-paginator/BillboardPaginator'
import { HelpTutorialContext } from './HelpTutorialProvider'

const HelpAd = lazy(() => import('./HelpAd'))
const Scrim = lazy(() => import('./ScrimIntermediate'))
const hasDocument = typeof document !== 'undefined'

const smBreakpointAnimStyles = {
  openStyles: { opacity: 1, top: 'unset', left: 'unset', config: { tension: 300 } },
  closeStyles: { opacity: 0, config: { tension: 300 } },
  derivedStyles: {
    transform: [['opacity'], (opacity) => `scale(${0.75 + opacity.toFixed(2) * 0.25})`],
  },
}
const mobileAnimStyles = {
  openStyles: { y: '0vh', position: 'absolute', top: 0, left: 0 },
  closeStyles: { y: '100vh', position: 'absolute', top: 0, left: 0, config: { tension: 220 } },
}

const closeButtonCircleCss = css`
  position: absolute;
  top: 8px;
  right: 12px;
  z-index: 1;
  border-radius: 50%;
  background-color: rgba(0, 0, 0, 0.15);

  & button {
    margin: 0;
  }
`

const tutorialOverlayCss = css`
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 2; /* Create a stacking context, so all things inside this overlay will be contained (and on top of the main ui) */
`

const overlayContentCss = css`
  background-color: ${colors.gray00};
  height: calc(var(--page-content-height, 95vh) - var(--virtual-keyboard-height, 0));
  overflow-y: hidden;
  position: relative;
  width: 100vw;
  border-radius: 4px;

  &:not([fullscreen]) {
    height: 100vh;
    max-height: 780px;
    max-width: 564px;
  }
`
export default function HelpTutorial({
  tutorialTitle,
  tutorialDescription,
  endHeader = true,
  children,
  showCheckbox,

  // From useHelpTutorial(tutorialId)
  shouldShowAd,
  setShouldShowAd,
  changeTutorialPreference,

  hideAdChecked,
  changeHideAdCheckedTutorialPreference,
  excludeFromHelpOverlay,

  // From useOverlay()
  isOpen,
  handleClick,
  transitioning,
  handleTransitioned,
  close,
}) {
  const { t } = useTranslation()
  const isSmBreakpoint = usePageWidth()({ md: true })
  const adRef = useRef()
  const tutorialRef = useRef()
  useBodyScrollLock(isOpen, tutorialRef)
  const onCloseOverlay = useOverlay()
  const user = useUser()

  const endHeaderText = endHeader ? t('help-tutorial.want-to-know-more.heading', 'Want to know more?') : null

  const helpAdProps = {
    overlayRef: adRef,
    title: tutorialTitle,
    description: tutorialDescription,
    declineHandler: () => {
      changeTutorialPreference(false)
      changeHideAdCheckedTutorialPreference(true)
    },
    startHandler: (evt) => {
      handleClick(evt)
      changeTutorialPreference(false)
      changeHideAdCheckedTutorialPreference(true)
    },
  }

  const handleClose = () => {
    close()
    const helpButton = hasDocument && document.querySelector('[data-selector="helpOverlayButton"]')
    if (helpButton && !excludeFromHelpOverlay) {
      onCloseOverlay.open({ target: helpButton })
    }
  }

  const { updateState: updateContext } = useContext(HelpTutorialContext)
  useEffect(() => {
    if (!excludeFromHelpOverlay) {
      updateContext({
        tutorialTitle,
      })
    }
  }, [tutorialTitle, updateContext, excludeFromHelpOverlay])

  const focusRef = useRef()
  useEffect(() => {
    // focus on the overlay content for accessibility
    focusRef?.current?.focus()
  }, [])

  const handleChange = ({ target }) => {
    changeHideAdCheckedTutorialPreference(target.checked)
  }

  return (
    <>
      {shouldShowAd && user?.signedIn ? (
        <Suspense fallback="">
          <HelpAd {...helpAdProps} />
        </Suspense>
      ) : null}
      {!isOpen && !transitioning ? null : (
        <Portal name="dialog">
          {isSmBreakpoint && (
            <Suspense fallback="">
              <Scrim isOpen={isOpen} />
            </Suspense>
          )}
          <div className={tutorialOverlayCss}>
            <OpenCloseAnimation
              onOpenFinished={handleTransitioned}
              onCloseFinished={handleTransitioned}
              isOpen={isOpen}
              {...(isSmBreakpoint ? smBreakpointAnimStyles : mobileAnimStyles)}
            >
              <Overlay ref={tutorialRef}>
                <div className={overlayContentCss} fullscreen={boolAttr(!isSmBreakpoint)} ref={focusRef}>
                  <VisuallyHidden as="h2">{tutorialTitle}</VisuallyHidden>
                  <BillboardPaginator
                    endHeaderText={endHeaderText}
                    endControl={
                      <Button centered emphasis="high" onClick={handleClose} data-testid="ExitOverviewButton">
                        {t('help-tutorial.exit-tutorial.button', 'Exit Overview')}
                      </Button>
                    }
                  >
                    {children}
                  </BillboardPaginator>
                </div>
                <div className={closeButtonCircleCss}>
                  <IconButton
                    Icon={MenuClose}
                    iconColor={colors.gray00}
                    title={t('common-ui:close.action', 'Close')}
                    onClick={handleClose}
                    data-testid="ExitButton"
                  />
                </div>
              </Overlay>
            </OpenCloseAnimation>
          </div>
        </Portal>
      )}
      <QuickGlanceOverlay {...onCloseOverlay} placement="bottom">
        <Row alignY="middle" guttersX="xxs">
          <NoticeQuestion noShrinkX />
          <Paragraph size="sm">
            {t(
              'help-tutorial.reopen-tutorial.tip',
              'If you would like to get to the Overview again, click on the question mark.'
            )}
          </Paragraph>
        </Row>
        <QuickGlanceActions>
          {showCheckbox && user?.signedIn && (
            <MarginBox growX marginX="pico">
              <Checkbox
                label={t('help-tutorial.dont-show-again.label', 'Do not show again.')}
                name="dontShowAgain"
                checked={hideAdChecked}
                onChange={handleChange}
              />
            </MarginBox>
          )}
          <Button
            onClick={(e) => {
              if (showCheckbox && user?.signedIn) {
                changeTutorialPreference(!hideAdChecked)
                setShouldShowAd(false)
              }
              onCloseOverlay.close(e)
            }}
          >
            {t('common-ui:ok.action', 'OK')}
          </Button>
        </QuickGlanceActions>
      </QuickGlanceOverlay>
    </>
  )
}

HelpTutorial.propTypes = {
  /** The title to be shown in the ad popup from which the tutorial can be started or dismissed */
  tutorialTitle: PropTypes.string.isRequired,

  /** The description to be shown in the ad popup from which the tutorial can be started or dismissed */
  tutorialDescription: PropTypes.string.isRequired,

  /** Provide as many `HelpTutorialSlide` components as you need and one final `HelpTutorialEndSlide`.  Slides will be rendered in the order you provide them. */
  children: PropTypes.node.isRequired,

  /** Boolean to indicate if you want header on the end slide */
  endHeader: PropTypes.bool,

  /** Whether to show a checkbox at the end of the tutorial that controls whether to show the helpTutorial again after the dialog closes. */
  showCheckbox: PropTypes.bool,

  /** Provide and spread the object returned from useHelpTutorial(...) */
  '{...useHelpTutorial(...)}': PropTypes.object,
}

export const HELP_TUTORIAL_PREF_KEYS = {
  SHOW_AD: 'help-tutorial.show-ad-prefs',
  HIDE_AD_CHECKED: 'help-tutorial.hide-ad-checked-prefs',
}

function useHelpTutorialPreference({ key, tutorialId, defaultPrefValue = true }) {
  const [prefValue, setPrefValue] = useState(false)
  const [prefsValue, setPrefsValue] = useState({})

  const changePref = useCallback(
    (newValue) => {
      const newPrefsValue = { ...prefsValue }
      newPrefsValue[tutorialId] = newValue
      setPrefsValue(newPrefsValue)
      setPrefValue(newValue)
      setPreference(key, newPrefsValue)
        // Not really much to do if this fails, so just eat any errors
        .catch(() => {
          // This should never show for logged out
          setPrefValue(false)
        })
    },
    [key, prefsValue, tutorialId]
  )

  useEffect(() => {
    let isCurrent = true
    getPreference(key)
      .then((storedPref) => {
        const pref = storedPref || {}
        const { [tutorialId]: newPrefValue = defaultPrefValue } = pref
        if (isCurrent) {
          setPrefValue(newPrefValue)
          setPrefsValue(pref)
        }
      })
      .catch(() => {
        // This should never show for logged out
        setPrefValue(false)
      })
    return () => {
      isCurrent = false
    }
  }, [key, tutorialId, defaultPrefValue])

  return { prefValue, setPrefValue, prefsValue, changePref }
}

/**
 *
 * @param {string} tutorialId should be site wide unique
 * @param {boolean} excludeFromHelpOverlay exclude from updating the help overlay tutorial with true
 */
export function useHelpTutorial(tutorialId, excludeFromHelpOverlay = false) {
  // HelpTutorial is an overlay, so we'll bake it in
  const overlay = useOverlay()
  const { open } = overlay
  const { updateState: updateContext } = useContext(HelpTutorialContext)

  // Constants for handling tutorial Ad preferences
  const {
    prefValue: shouldShowAd,
    setPrefValue: setShouldShowAd,
    changePref: changeTutorialPreference,
  } = useHelpTutorialPreference({ key: HELP_TUTORIAL_PREF_KEYS.SHOW_AD, tutorialId })

  const { prefValue: hideAdChecked, changePref: changeHideAdCheckedTutorialPreference } = useHelpTutorialPreference({
    key: HELP_TUTORIAL_PREF_KEYS.HIDE_AD_CHECKED,
    tutorialId,
    defaultPrefValue: false,
  })

  useEffect(() => {
    if (!excludeFromHelpOverlay) {
      updateContext({
        tutorialAvailable: Boolean(tutorialId),
        tutorialId,
        openTutorial: () => {
          open()
          changeTutorialPreference(false)
        },
      })
    }
    return () => {
      if (!excludeFromHelpOverlay) {
        updateContext({
          tutorialAvailable: false,
          tutorialId,
          openTutorial: () => {
            open()
            changeTutorialPreference(false)
          },
        })
      }
    }
  }, [updateContext, tutorialId, open, changeTutorialPreference, excludeFromHelpOverlay])

  return {
    shouldShowAd: excludeFromHelpOverlay ? false : shouldShowAd,
    setShouldShowAd,
    changeTutorialPreference,
    hideAdChecked,
    changeHideAdCheckedTutorialPreference,
    excludeFromHelpOverlay,
    ...overlay,
  }
}
