import axios from '@fs/zion-axios'
import zionDebug from '@fs/zion-debug'

import { getPerson, getFocusPerson } from '@fs/zion-gedcomx'
import { getFilmPermissions } from './imageServices'

// turn on in browser console with: localStorage.debug = 'fs:search:record:*'
const debug = zionDebug('search:record:filmServices')

/**
 * getting the dgs number and image number to give the user a starting place to find the image from a record
 * @param {Object} record - The person record object
 */
async function getDGSLink(record) {
  // combining record and collection fields
  const fields = record.fields.concat(getPerson(record, getFocusPerson(record).id).fields)
  const dgsLinkData = { link: '' }
  if (!fields) {
    throw new Error('No fields')
  } else {
    const { dgsNumber, imageNumber } = await getDGSNumber(fields)
    // if we have an image number change the url to that image ark
    if (dgsNumber && imageNumber) {
      dgsLinkData.link = `/search/film/${dgsNumber}?i=${imageNumber}`
      dgsLinkData.dgsNumber = dgsNumber
      dgsLinkData.imageNumber = imageNumber
    }
    // if there is no image number just return the dgs url
    else if (dgsNumber) {
      dgsLinkData.link = `/search/film/${dgsNumber}`
      dgsLinkData.dgsNumber = dgsNumber
    }
    await getPermissionsForDgsLink(dgsLinkData)
  }
  return dgsLinkData
}

/**
 *
 * @param {Array|undefined} numbers
 * @param {*} imageNumber
 */
async function checkForValidDGS(numbers, imageNumber) {
  if (numbers?.length) {
    // loop through all the numbers
    for (let i = 0; i < numbers.length; i++) {
      // check if the number is a true dgs number
      if (isDigital(numbers[i])) {
        // call the callback with the dgs number we found and the image number
        return { dgsNumber: numbers[i], imageNumber }
        // return since we already found a valid dgs number
      }
    }

    for (let i = 0; i < numbers.length; i++) {
      // We have to disable this eslint rule because we are exiting the loop early if we find a valid dgs number
      // this is the only way to make an asynchronous call on each item in an array with the option to end the loop early.
      // eslint-disable-next-line no-await-in-loop
      const dgs = await getDGSFromGS(numbers[i])
      if (dgs) {
        return { dgsNumber: dgs, imageNumber }
      }
    }
    return {}
  }

  // no dgs number found
  return {}
}

/**
 * Gets the DGS number from a GS number if one exists
 *
 * @param {String} gs - the GS number
 * @param {function} callback(error, DGSNumber) - if a dgs number exists
 * @returns {undefined}
 */
async function getDGSFromGS(gs) {
  debug(`filmServices.getDGSFromGS(${gs})`)
  const url = `/service/search/catalog/gsNumber/${gs}`

  return axios.get(url, {
    headers: {
      from: 'search-react.imageServices.getDGSFromGS@familysearch.org',
      Accept: 'text/plain',
    },
  })
}

/**
 * Returns the dgs number and image number if a valid one is found from the fields of a record
 * @param {Array} fields - fields from the record data
 * @returns {Object | null} - an object with a dgsNumber and imageNumber property or null
 */
async function getDGSNumber(fields) {
  let imageNumber = null
  const dgsNumbers = []
  // we are looping through all the fields looking for the DGS number and image number
  // to give the user a starting place to find the image
  for (let i = 0; i < fields.length; i++) {
    // check to make sure the field has a value and a labelId and text
    if (fields[i]?.values?.length === 1 && fields[i]?.values[0]?.text && fields[i]?.values[0]?.labelId) {
      const value = fields[i].values[0]

      // checks to see if the field is a DGS or GS number
      const filmNumberLabels = [
        'DIGITAL_FILM_NUMBER',
        'DIGITAL_GS_NUMBER',
        'FILM_NUMBER',
        'FOLDER',
        'FS_DIGITAL_FILM_NBR',
        'FS_DIGITAL_FILM_NUMBER',
        'FS_FILM_NBR',
        'GSU_FILM_NUMBER',
        'PADDED_DGS_NBR',
        'PADDED_DGS_NUMBER',
        'PADDED_FILM',
        'WP_DIGITAL_GS_NUMBER',
      ]
      if (filmNumberLabels.indexOf(value.labelId) !== -1) {
        // add the number to an array to process later
        dgsNumbers.push(value)
      }

      // checks to see if the field is an image number
      const imageNumberLabels = [
        'FS_IMAGE_NBR',
        'IMAGE_NBR',
        'IMAGE_NO',
        'IMAGE_NUMBER',
        'IMAGENUMBER',
        'NUMERIC_IMAGE_NBR',
        'NUMERIC_IMAGE_NUMBER',
      ]
      if (imageNumberLabels.indexOf(value.labelId) !== -1) {
        // sets the imageNumber
        imageNumber = parseInt(value.text, 10) - 1
        // add extra zeros at the beginning of the image number
        imageNumber = imageNumber.toString().padStart(5, '0')
      }
    }
  }
  if (dgsNumbers.length > 0) {
    // if we found some numbers that might be dgs numbers we need to check if they are valid
    return checkForValidDGS(processDGSNumbers(dgsNumbers), imageNumber)
  }
  // no dgs number found
  return {}
}

async function getPermissionsForDgsLink(dgsLinkData) {
  const match = dgsLinkData.link.match(/^\/search\/film\/(\d+)/)
  const dgsNum = match?.[1]
  if (dgsNum) {
    const { allowed, permissions } = await getFilmPermissions(dgsNum)
    dgsLinkData.allowed = allowed
    dgsLinkData.permissions = permissions
  }
}

/**
 * Checks a film number to see if it is a digital film
 * @param {String} filmNumber - film number
 * @returns {boolean} - true if it's digital
 */
function isDigital(filmNumber) {
  const filmInt = parseInt(filmNumber, 10)
  // These numbers are the ranges that digital films were assigned historically, this information was given by @Richard Chesworth
  return (filmInt >= 4000000 && filmInt < 6000000) || filmInt >= 7000000
}

/**
 * Pull the dgs numbers out of the array of fields objects
 * @param {Array} fields - array of fields with types of DGS number
 * @returns {Array} numbers - a array of dgs numbers as strings that has no duplicates
 */
function processDGSNumbers(fields) {
  const result = []
  fields.forEach((field) => {
    let text = field.text
    if (text.indexOf(',') !== -1) {
      text = text.split(',')
    }
    if (Array.isArray(text)) {
      text.forEach((item) => {
        if (item.trim().match(/^\d+$/)) {
          result.push(item.trim().padStart(9, '0'))
        }
      })
    } else if (text.match(/^\d+$/)) {
      result.push(text.trim().padStart(9, '0'))
    }
  })
  // using the ..new Set removes any duplicates from the array
  return [...new Set(result)]
}

export { getDGSLink as default }
