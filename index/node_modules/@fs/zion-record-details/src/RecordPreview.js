import React from 'react'
import PropTypes from 'prop-types'
import useFetchRecordData from './recordHooks'
import RecordPreviewPersona from './RecordPreviewPersona'

/**
 * A preview for a historical record
 * @param {String} - ark An ARK reference for a record.
 *  This can be a relative URL  (e.g.: /ark:/61903/1:1:K7K6-6MX) or a fully qualified
 *  ark URL (e.g.: https://www.familysearch.org/ark:/61903/1:1:K7K6-6MX).  A relative URL will usually
 *  work better and prevent cross-system authentication errors (i.e., using a production ark URL on
 *  beta will return a 401 because the auth systems are different).
 * @param {Boolean} linkViaNewTab - Whether or not to make links open new tabs when clicked
 * @param personaProps - any prop overrides for Preview (in RecordPreviewPersona.js) if needed (though that's unlikely):
 *  - infoSheetOverlay
 *  - goToNextRecord
 *  - goToPrevRecord
 *  - previewMode
 *  - showMatch
 * @returns {RecordPreview}
 * @constructor
 */
export default function RecordPreview({ ark, linkViaNewTab = false, ...personaProps }) {
  const recordData = useFetchRecordData({ ark, isPreview: true, showAttachments: false })
  return (
    <RecordPreviewPersona ark={ark} personaProps={personaProps} recordData={recordData} linkViaNewTab={linkViaNewTab} />
  )
}

RecordPreview.propTypes = {
  /** An ARK reference for a record.  This can be a relative URL  (e.g.: /ark:/61903/1:1:K7K6-6MX) or a fully qualified
   * ark URL (e.g.: https://www.familysearch.org/ark:/61903/1:1:K7K6-6MX).  A relative URL will usually work better and prevent
   * cross-system authentication errors (i.e., using a production ark URL on beta will return a 401 because the auth systems are different).
   */
  ark: PropTypes.string,
  linkViaNewTab: PropTypes.bool,
}
