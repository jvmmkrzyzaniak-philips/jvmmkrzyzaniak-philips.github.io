import React, { useEffect, useState } from 'react'
import { css } from '@linaria/core'
import { useTranslation } from 'react-i18next'
import { trackEvent } from '@fs/zion-analytics'
import zionDebug from '@fs/zion-debug'
import { copyToClipboardMulti, removeHtml } from '@fs/zion-frontend-friends'
import { Link } from '@fs/zion-router'
import {
  ActionChip,
  Paragraph,
  colors,
  Expander,
  ExpanderContent,
  ExpanderHeader,
  IconButton,
  Row,
  Separator,
  useStatusOverlay,
  H3,
} from '@fs/zion-ui'
import { HelpCompass } from '@fs/zion-icon'
import DOMPurify from 'dompurify'
import useSearchCache from './cacheHook'
import { useDocumentInformation } from './RecordProvider'
import hideOnPrint from './hideOnPrint'
import AdjustedBodyCopy from './AdjustedBodyCopy'

// turn on in browser console with: localStorage.debug = 'fs:search:record:*'
const debug = zionDebug('search:record:documentInfo')

const tableCss = css`
  width: 100%;
  border-spacing: 0;
`

const rowCss = css`
  &:not(:last-of-type) > * {
    border-bottom: 1px solid ${colors.transparent.gray30};
  }
  & > * {
    padding: 6px 0 6px 10px;
    text-align: left;
  }
`

const citationCss = css`
  max-width: 300px;
  padding: 8px 0 8px 8px;
  padding-bottom: 0px;
  margin-top: 0;
  word-break: break-word;
`
const noWordBreakCss = css`
  word-break: normal;
`
/**
 * Present field values in a comma-delimited display list, with urls if they exist
 * @param {Object} field - record field
 * @param {Boolean} linkViaNewTab - True if external links should be opened in a new tab. Defaults to false.
 * @returns {String} - values for display
 * @constructor
 */
function FieldValues({ field, linkViaNewTab = false }) {
  const display = field?.values?.map((value, i) => {
    if (field.valueURLs) {
      return (
        <Link to={field.valueURLs[i]} external target={linkViaNewTab ? '_blank' : '_self'}>
          {value}
        </Link>
      )
    }
    return value
  })
  return display.reduce((prev, curr) => [prev, ', ', curr]) || ''
}

export default function DocumentInformation({ fieldsToShowOnPrint = {} }) {
  const { t } = useTranslation()
  const cache = useSearchCache()
  const { documentFields, linkViaNewTab } = useDocumentInformation()
  const [documentInfoExpanded, setDocumentInfoExpanded] = useState(false)

  // This hook will check if the user has previously toggled the exact searching slider (Sticky Exact Searching)
  useEffect(() => {
    let cancelled = false
    cache.getItem('documentInfoExpanded').then((value) => {
      if (value === '1' && !cancelled) {
        setDocumentInfoExpanded(true)
      }
    })
    return () => {
      cancelled = true
    }
  }, [cache])

  return (
    <>
      <div className={fieldsToShowOnPrint?.['search.record.documentInformation'] ? null : hideOnPrint}>
        <Expander
          open={documentInfoExpanded}
          setOpen={() => {
            const newState = !documentInfoExpanded
            setDocumentInfoExpanded(newState)
            cache.setItem('documentInfoExpanded', newState ? '1' : '0').catch((err) => debug(err))

            // Analytics
            trackEvent({
              event_name: 'click_action',
              link_name: 'Document Information expander toggled',
            })
          }}
        >
          <ExpanderHeader
            openedTitle={t('search.record.closeDocumentInformation', 'Collapse Document Information')}
            closedTitle={t('search.record.openDocumentInformation', 'Expand Document Information')}
            data-testid="documentInformationExpander-Button"
          >
            <div>
              <Separator size="nano" />
              <H3 size="H6">{t('search.record.documentInformation', 'Document Information')}</H3>
            </div>
          </ExpanderHeader>
          <ExpanderContent>
            <table className={tableCss}>
              <tbody>
                {documentFields.map((field) => {
                  return (
                    <tr className={rowCss} key={`persona-field-${field.fieldType || field.labelId}-${field.value}`}>
                      <th scope="row">
                        <Paragraph as="span" size="sm">
                          <div className={noWordBreakCss}>
                            <strong>{field.displayName?.[0]?.value}</strong>
                          </div>
                        </Paragraph>
                      </th>
                      <td>
                        <Paragraph as="span" size="sm">
                          <FieldValues field={field} linkViaNewTab={linkViaNewTab} />
                        </Paragraph>
                      </td>
                    </tr>
                  )
                })}
              </tbody>
            </table>
            <Separator size="xs" />
          </ExpanderContent>
        </Expander>
      </div>
      <div className={fieldsToShowOnPrint?.['search.record.collectionInfo'] ? null : hideOnPrint}>
        <Separator size="xs" />
        <CollectionInfo linkViaNewTab={linkViaNewTab} />
      </div>
      <div className={fieldsToShowOnPrint?.['search.record.citeThisRecord'] ? null : hideOnPrint}>
        <Separator size="sm" />
        <RecordCitation />
      </div>
    </>
  )
}

export function RecordCitation() {
  const { t } = useTranslation()
  const { citation } = useDocumentInformation()
  const sanitizedCitation = DOMPurify.sanitize(citation, { ALLOWED_TAGS: ['i'] })
  const textCitation = removeHtml(citation)
  const showStatusOverlay = useStatusOverlay()
  const showSuccessBanner = () => {
    const dismissableSuccessProps = { message: 'Copied Citation to Clipboard', dismissable: true, type: 'success' }
    showStatusOverlay(dismissableSuccessProps)
  }
  const showErrorBanner = () => {
    showStatusOverlay({
      type: 'error',
      message: t('search.record.copyRecordDetailsError', 'Something went wrong. Try again later.'),
    })
    console.error('Error copying record citation.') // log to sentry
  }

  return (
    <>
      <H3 size="H6">{t('search.record.citeThisRecord', 'Cite This Record')}</H3>
      <Separator size="nano" />
      <AdjustedBodyCopy as="div" data-testid="documentInformationCitation">
        <span
          className={citationCss}
          dangerouslySetInnerHTML={{ __html: sanitizedCitation }} // eslint-disable-line react/no-danger
        />
      </AdjustedBodyCopy>

      <Separator size="xxs" />

      <div className={hideOnPrint}>
        <ActionChip
          data-testid="documentCopyCitation"
          label={t('search.record.copyCitation', 'Copy Citation')}
          onClick={() => {
            copyToClipboardMulti(
              [
                { content: sanitizedCitation, mimeType: 'text/html' },
                { content: textCitation, mimeType: 'text/plain' },
              ],
              showSuccessBanner,
              showErrorBanner
            )
          }}
        />
        <Separator size="sm" />
      </div>
    </>
  )
}

function CollectionInfo({ linkViaNewTab }) {
  const { t } = useTranslation()
  const { collectionName, collectionWebURL, wikiURL } = useDocumentInformation()

  return (
    <>
      <H3 size="H6">{t('search.record.collectionInfo', 'Collection Information')}</H3>
      <Row alignY="middle" density="dense">
        <Link
          to={collectionWebURL}
          linkName="Collection details link clicked"
          external
          growX
          target={linkViaNewTab ? '_blank' : '_self'}
        >
          {collectionName}
        </Link>
        <>
          {wikiURL && (
            <div className={hideOnPrint}>
              <IconButton
                title={t('search.record.aboutCollection', 'About This Collection')}
                description={t(
                  'search.record.aboutCollectionDesc',
                  'Learn more about this collection through the FamilySearch Wiki.'
                )}
                Icon={HelpCompass}
                to={wikiURL}
                onClick={() => {
                  // Analytics
                  trackEvent({
                    event_name: 'click_action',
                    link_name: 'Collection wiki link clicked',
                  })
                }}
                external
              />
            </div>
          )}
        </>
      </Row>
    </>
  )
}
