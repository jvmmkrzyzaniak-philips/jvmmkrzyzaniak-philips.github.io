import React from 'react'
import { css } from '@linaria/core'
import { Trans, useTranslation } from 'react-i18next'
import { ArrowCaret, ContentLock } from '@fs/zion-icon'
import {
  colors,
  DescriptionTooltip,
  IconButton,
  Theme,
  useContainerWidth,
  Separator,
  H1,
  H2,
  LayoutBand,
  Row,
} from '@fs/zion-ui'
import { boolAttr } from '@fs/zion-frontend-friends'
import { Link } from '@fs/zion-router'
import { RetiredRecordBanner } from './FallbackPage'
import RecordMenus from './RecordMenus'
import { useRecordHeader } from './RecordProvider'
import hideOnPrint from './hideOnPrint'

const headerCss = css`
  width: 100%;
  overflow: hidden;
  break-after: avoid;
`

const noIconSpace = css`
  padding: 18px;
`

const printCss = css`
  @media print {
    color: ${colors.gray00};
  }
`

export default function RecordHeader({
  closeInfoSheet,
  goToNextRecord,
  goToPrevRecord,
  fieldsToShowOnPrint,
  setFieldsToShowOnPrint,
  previewButtons = false,
}) {
  const { t } = useTranslation()
  const {
    hasRestrictions,
    isPrincipal,
    principalArk,
    principalName,
    collection,
    name,
    recordType,
    relationshipLabel,
    updatedRecord,
  } = useRecordHeader()
  const atWidth = useContainerWidth()
  const isMobile = previewButtons ? false : atWidth({ default: true, lg: false })

  const hasPrevRecord = previewButtons && typeof goToPrevRecord === 'function'
  const hasNextRecord = previewButtons && typeof goToNextRecord === 'function'

  const RecordMenusSection = (
    <div className={hideOnPrint}>
      <RecordMenus
        previewButtons={previewButtons}
        closeInfoSheet={closeInfoSheet}
        fieldsToShowOnPrint={fieldsToShowOnPrint}
        setFieldsToShowOnPrint={setFieldsToShowOnPrint}
      />
    </div>
  )

  return (
    <div className={headerCss}>
      {updatedRecord && <RetiredRecordBanner currentRecord={updatedRecord} />}
      <Theme theme="complementary">
        <LayoutBand color={colors.gray03} is-mobile={boolAttr(isMobile)}>
          <div className={hideOnPrint}>
            <Separator size="sm" />
          </div>
          <H1 centered size={previewButtons ? 'H4' : 'H3'}>
            <div className={printCss}>{name}</div>
          </H1>
          <div className={hideOnPrint}>
            <Separator size={isMobile ? 'sm' : 'xxs'} />
          </div>
          <Row alignX="center" alignY="middle">
            {(hasNextRecord || hasPrevRecord) && <IconPadding />}
            {hasNextRecord && !hasPrevRecord && <IconPlaceholder />}
            {hasPrevRecord && (
              <IconButton
                noShrinkX
                title={t('record.header.prevRecord', 'Go to previous record')}
                Icon={ArrowCaret}
                iconDirection="backward"
                onClick={() => goToPrevRecord()}
              />
            )}
            <div>
              {!isPrincipal && relationshipLabel && principalArk && (
                <H2 centered supplementary size={previewButtons ? 'H6' : 'H5'}>
                  <div className={printCss}>
                    <Trans
                      i18nKey="record-details.header.relationshipToPrincipal"
                      defaults="Mentioned in the Record of <0>{principalName}</0> ({name}'s {relationship})"
                      values={{
                        principalName,
                        name,
                        relationship: relationshipLabel,
                      }}
                      components={[<Link external to={principalArk} />]}
                    />
                  </div>
                </H2>
              )}
              {!isPrincipal && !relationshipLabel && principalArk && (
                <H2 centered supplementary size={previewButtons ? 'H6' : 'H5'}>
                  <div className={printCss}>
                    <Trans
                      i18nKey="record-details.header.noRelationshipToPrincipal"
                      defaults="Mentioned in the Record of <0>{principalName}</0>"
                      values={{
                        principalName,
                      }}
                      components={[<Link external to={principalArk} />]}
                    />
                  </div>
                </H2>
              )}
              <H2 centered supplementary size={previewButtons ? 'H6' : 'H5'}>
                <div className={printCss}>
                  <Trans
                    i18nKey="record-details.header.collectionDescription"
                    defaults="{recordType} â€¢ {collectionName}"
                    values={{
                      recordType,
                      collectionName: collection.collectionName,
                    }}
                  />
                </div>
              </H2>
            </div>
            {hasNextRecord && (
              <IconButton
                title={t('record.header.nextRecord', 'Go to next record')}
                Icon={ArrowCaret}
                onClick={() => goToNextRecord()}
                noShrinkX
              />
            )}
            {hasRestrictions && (
              <DescriptionTooltip
                target={<ContentLock size="lg" data-testid="restrictedRecord" />}
                label={t('record.restricted.tooltipLabel', 'Record access is restricted')}
                description={t('record.restricted.tooltipDescription', 'This record is not generally available.')}
              />
            )}
            {(hasNextRecord || hasPrevRecord) && <IconPadding />}
            {!hasNextRecord && hasPrevRecord && <IconPlaceholder />}
          </Row>
          <div className={hideOnPrint}>
            <Separator size="xs" />
          </div>
          {!updatedRecord && RecordMenusSection}
          <div className={hideOnPrint}>
            <Separator size={isMobile ? 'xs' : 'sm'} />
          </div>
        </LayoutBand>
      </Theme>
    </div>
  )
}

/** This is a placeholder for when one icon (next or previous) shows up and the other one doesn't.
 *  We use it because we still want the space there so the text is centered
 */
function IconPlaceholder() {
  return <div className={noIconSpace} />
}

/**
 * So icons don't touch the edge of their container
 */
function IconPadding() {
  return <div />
}
