import React from 'react'
import PropTypes from 'prop-types'
import { Bleed, DataPreview, Separator } from '@fs/zion-ui'
import LoadingSkeleton from './LoadingSkeleton'
import RecordProvider from './RecordProvider'
import FallbackPage from './FallbackPage'
import { useCollectionRecordEvent } from './recordAnalyticsHooks'
import RecordHeader from './RecordHeader'
import PersonaFields from './PersonaFields'
import RecordAdditionalPersons from './RecordAdditionalPersons'
import RecordImage from './RecordImage'
import { RecordCitation } from './DocumentInformation'
import ThankIndexer from './ThankIndexer'
import WeakHintWarning from './WeakHintWarning'

const PersonaPropTypes = {
  /* Overlay. Optional.
   * If an info sheet exists, a close button will appear inside the persona header to let the user close the info sheet.
   */
  infoSheetOverlay: PropTypes.shape({
    close: PropTypes.func,
    isOpen: PropTypes.bool,
    handleClick: PropTypes.func,
    transitioning: PropTypes.bool,
  }),
  /* Optional. Function to call when the user clicks a "Next" button. If omitted, the next button is hidden. */
  goToNextRecord: PropTypes.func,
  /* Optional. Function to call when the user clicks a "Previous" button. If omitted, the previous button is hidden. */
  goToPrevRecord: PropTypes.func,
  /* Optional. Set to true if we're in a preview - this will include special "preview" header menu buttons. */
  previewMode: PropTypes.bool,
}

/**
 * Show loading skeleton and a Persona (success) or FallbackPage (error)
 * Does not do the fetching; just displays state
 *
 * @param {Object} personaProps - props passed to {@link Persona}
 * @param {Object} recordData - record data
 * @param {Boolean} linkViaNewTab - true if the component should open other content in a new tab (e.g. source linker, image view, etc.)
 * @param {Array} discoveryCollections - array of collection ids that have discovery features for their records
 * @returns {RecordPreviewPersona} - React component
 */
export default function RecordPreviewPersona({ personaProps, recordData, linkViaNewTab, discoveryCollections = [] }) {
  return (
    <DataPreview.Provider loading={recordData.loading || false} error={!!recordData.error}>
      <DataPreview.Loading>
        <LoadingSkeleton streamLinedView />
      </DataPreview.Loading>

      <DataPreview.Ready>
        <RecordProvider
          recordData={recordData}
          linkViaNewTab={linkViaNewTab}
          discoveryCollections={discoveryCollections}
          isInInfoSheet={!!personaProps?.infoSheetOverlay}
        >
          <Persona {...personaProps} />
        </RecordProvider>
      </DataPreview.Ready>

      <DataPreview.Error>
        <FallbackPage error={recordData.error} isInInfoSheet={!!personaProps?.infoSheetOverlay} />
      </DataPreview.Error>
    </DataPreview.Provider>
  )
}

RecordPreviewPersona.propTypes = {
  /* Props passed to the Persona component */
  personaProps: PropTypes.shape(PersonaPropTypes),
  /* Data about the record we're showing. This data is returned from something like useFetchRecordData() */
  recordData: PropTypes.shape({}).isRequired,
  /* True if we want links to go into a new tab */
  linkViaNewTab: PropTypes.bool,
  /* Collections that should open in the discovery experience, if any (passed from a discovery parent component) */
  discoveryCollections: PropTypes.arrayOf(PropTypes.string),
}

/**
 * Show persona fields for a record. Must be used in RecordProvider.
 * @param {String} ark An ARK reference for a record.
 * @param {Object} infoSheetOverlay - info sheet overlay to use
 * @param goToNextRecord {function} - function to navigate to next record
 * @param goToPrevRecord {function} - function to navigate to previous record
 * @param previewMode {boolean} - default is true; set to false to show non-preview buttons like "save" and "edit."
 * @param showMatch {boolean} - flag determining whether to display the MatchAttach Component
 * @param hintConfidence {Number} - The confidence rating of the hint being provided. Used to show warning if confidence is 3 or less
 * @param {String} hintTreeRef TreeRef for the person hinted at, if we come from a hint
 * @returns {Persona} - React component
 */
function Persona({
  ark,
  infoSheetOverlay,
  goToNextRecord,
  goToPrevRecord,
  previewMode = true,
  showMatch,
  hintConfidence,
  hintTreeRef,
}) {
  useCollectionRecordEvent()

  return (
    <>
      <Bleed sides top>
        <RecordHeader
          closeInfoSheet={() => infoSheetOverlay?.close()}
          goToNextRecord={goToNextRecord}
          goToPrevRecord={goToPrevRecord}
          previewButtons={previewMode}
          showMatch={showMatch}
        />
        <WeakHintWarning centered confidence={hintConfidence} ark={ark} hintTreeRef={hintTreeRef} />
        <PersonaFields />
        <RecordAdditionalPersons concise />
      </Bleed>
      <Separator size="sm" />
      <RecordImage />
      <Separator size="xxs" />
      <RecordCitation />
      <ThankIndexer />
    </>
  )
}
Persona.propTypes = PersonaPropTypes
