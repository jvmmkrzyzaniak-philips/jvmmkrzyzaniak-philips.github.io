import React, { useCallback, useMemo } from 'react'
import { css } from '@linaria/core'
import { colors, Row, LayoutBand, Skeleton, Grid, Cell, useContainerWidth, Separator, Theme } from '@fs/zion-ui'

const headerCss = css`
  margin-left: auto;
  margin-right: auto;
  max-width: 300px;
`
const sourceHeaderCss = css`
  width: 300px;
`

const buttonRowCss = css`
  margin: 0 auto;
  max-width: 220px;
`

const rightSectionCss = css`
  margin-top: -10px;
  margin-left: 20%;
  max-width: 200px;
`

const buttonCss = css`
  width: 60px;
`

const attachButtonCss = css`
  margin-left: 20%;
  margin-top: -10px;
`

const headerPortion = (isSource) => (
  <Theme theme={isSource ? 'current' : 'complementary'} data-testid="skeleton-header">
    <LayoutBand color={isSource ? colors.gray02 : colors.gray03}>
      {!isSource ? (
        <>
          <Separator size="nano" />
          <div className={headerCss}>
            <Skeleton.H3 maxWidth={300} centered />
          </div>
          <Skeleton.H4 centered />
          <div className={buttonRowCss}>
            <Row alignX="center" gutters="xxs">
              <div className={buttonCss}>
                <Skeleton.Button maxWidth={60} />
              </div>
              <div className={buttonCss}>
                <Skeleton.Button maxWidth={60} />
              </div>
              <div className={buttonCss}>
                <Skeleton.Button maxWidth={60} />
              </div>
            </Row>
          </div>
          <Separator size="xxs" />
        </>
      ) : (
        <>
          <div className={sourceHeaderCss}>
            <Skeleton.H4 maxWidth={300} centered />
          </div>
          <div>
            <Skeleton.H5 centered />
          </div>
        </>
      )}
    </LayoutBand>
  </Theme>
)

const mockImage = (
  <Cell columns={4}>
    <Separator size="xxs" />
    <Skeleton.Image height={200} width={200} />
  </Cell>
)
const mockAttach = (
  <Cell columns={4}>
    <Separator size="xxs" />
    <div className={rightSectionCss}>
      <Skeleton.H4 maxWidth={120} centered />
    </div>
    <Separator size="xxs" />
    <div className={attachButtonCss}>
      <Skeleton.H3 maxWidth={320} centered />
    </div>
  </Cell>
)

export default function LoadingSkeleton({ streamLinedView, isSource }) {
  const atWidth = useContainerWidth()
  const mockDetails = useMemo(
    () => Array.from({ length: 10 }, (item, index) => <Skeleton.H5 key={`mockDetails${index}`} centered />),
    []
  )

  const MobileLayout = useCallback(() => {
    return (
      <Cell columns={4} as="div" key="PersonColumn" data-testid="mobile-layout">
        <Separator size="xs" />
        {mockDetails}
      </Cell>
    )
  }, [mockDetails])

  const TabletLayout = useCallback(() => {
    return (
      <Grid data-testid="tablet-layout">
        <Cell columns={7} key="PersonColumn">
          {mockDetails}
        </Cell>
        <Cell columns={5} key="MatchesColumn">
          {mockAttach}
        </Cell>
      </Grid>
    )
  }, [mockDetails])

  const DesktopLayout = useCallback(() => {
    return (
      <>
        <Separator size="xxs" />
        <Grid data-testid="desktop-layout">
          <Cell columns={4} key="ImageColumn">
            {mockImage}
          </Cell>
          <Cell columns={4} key="PersonColumn">
            {mockDetails}
          </Cell>
          <Cell columns={4} key="MatchesColumn">
            {mockAttach}
          </Cell>
        </Grid>
      </>
    )
  }, [mockDetails])

  return (
    <>
      {headerPortion(isSource)}
      {streamLinedView && <MobileLayout />}
      {!streamLinedView &&
        atWidth({
          default: isSource ? <TabletLayout /> : <DesktopLayout />,
          xxs: <MobileLayout />,
          md: <TabletLayout />,
          xl: isSource ? <TabletLayout /> : <DesktopLayout />,
        })}
    </>
  )
}
