import React, { Fragment, useState } from 'react'
import PropTypes from 'prop-types'
import { Link } from '@fs/zion-router'
import {
  useContainerWidth,
  Button,
  Row,
  Separator,
  H3,
  ResponsiveTable,
  ControlledResponsiveTableRow,
  LayoutBand,
} from '@fs/zion-ui'
import { useEvent } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import { getPersonDisplayData, getRecordType, getRelationshipLabel } from '@fs/zion-gedcomx'
import { useFeatureFlag } from '@fs/zion-flags'
import { useRecordAdditionalPersons } from './RecordProvider'
import { appendQueryParamsToURL, relativizeURL } from './searchUtil'
import PersonaFields from './PersonaFields'
import hideOnPrint from './hideOnPrint'
import OldRecordAdditionalPersons from './OldRecordAdditionalPersons'

// TODO: Remove this component and make RecordAdditionalPersons the default export once the feature flag is removed
export default function RecordAdditionalPersonsWithFlag(props) {
  const useNewComponent = useFeatureFlag('search_additionalPersonRefactor').isOn
  return useNewComponent ? <RecordAdditionalPersons {...props} /> : <OldRecordAdditionalPersons {...props} />
}

/**
 * Displays the additional people on the record.
 * @param concise {Boolean} - flag to display the additional persons in a condensed manner
 * @returns {null|*}
 * @constructor
 */
function RecordAdditionalPersons({ concise = false }) {
  const atWidth = useContainerWidth()
  const containerWidth = atWidth({ default: 'small', lg: 'medium', xxl: 'large' })

  const { hideAdditionalPersons, isInInfoSheet, ...recordAdditionalPersons } = useRecordAdditionalPersons()

  const additionalPersons = ['parentsAndSiblings', 'spousesAndChildren', 'extendedFamily', 'others']

  const numAdditionalPersons = additionalPersons.reduce((acc, key) => acc + recordAdditionalPersons[key].length, 0)
  const additionalPersonLimit = 50
  const isLargeRecord = numAdditionalPersons > additionalPersonLimit

  // hide additional persons for non-census, non-obituary records where we are looking at a principal person
  if (hideAdditionalPersons) {
    return null
  }

  return (
    <LayoutBand>
      <div id="additionalPersons">
        {additionalPersons.map((personKey, i) => {
          if (!recordAdditionalPersons[personKey]?.length) return null

          let separatorSize = 'md'
          if (containerWidth === 'small' && i > 0) separatorSize = 'xl'
          if (containerWidth !== 'small' && i === 0) separatorSize = 'xxs'

          return (
            <Fragment key={personKey}>
              {!isInInfoSheet && <Separator size={separatorSize} />}
              <AdditionalPersonSection personKey={personKey} isLargeRecord={isLargeRecord} concise={concise} />
            </Fragment>
          )
        })}
        <Separator size="sm" />
      </div>
    </LayoutBand>
  )
}

function AdditionalPersonSection({ personKey, isLargeRecord, concise }) {
  const { t } = useTranslation()

  const { name, record, ...additionalPersons } = useRecordAdditionalPersons()

  const [openObj, setOpenObj] = useAdditionalPersonOpenState({ personKey, isLargeRecord, record, additionalPersons })

  return (
    <>
      <Row alignX="end" alignY="middle" gutters="sm" guttersY="none" wrap>
        <H3 size="H6" growX>
          {t(`record-details.relationships.${personKey}`, 'Additional Persons', { name })}
        </H3>
        <ExpandAllButton noShrinkX openObj={openObj} setOpenObj={setOpenObj} />
      </Row>

      <PersonTable
        personKey={personKey}
        isLargeRecord={isLargeRecord}
        openObj={openObj}
        setOpenObj={setOpenObj}
        concise={concise}
      />
    </>
  )
}

function useAdditionalPersonOpenState({ personKey, isLargeRecord, record, additionalPersons }) {
  const [openObj, setOpenObj] = useState(() => {
    const innerOpen = Array(additionalPersons[personKey]?.length).fill(false)

    // If there are a lot of people on the record, we will not highlight and open any additional people to allow the page to load more quickly
    if (!record || isLargeRecord) return { openAll: false, innerOpen }

    const recordType = getRecordType(record)

    // Open principal person
    additionalPersons[personKey]?.forEach(({ person }, i) => {
      const isPrincipalOrHead =
        (recordType === 'http://gedcomx.org/Census' &&
          person?.fields
            ?.find((field) => field.type?.includes('RelationshipToHead'))
            ?.values?.[0]?.text?.toLowerCase() === 'head') ||
        (recordType !== 'http://gedcomx.org/Census' && person?.principal)

      if (isPrincipalOrHead) innerOpen[i] = true
    })

    return { openAll: false, innerOpen }
  })

  return [openObj, setOpenObj]
}

function ExpandAllButton({ openObj, setOpenObj }) {
  const { t } = useTranslation()

  const toggleOpenAll = useEvent(() => {
    setOpenObj((prev) => ({ openAll: !prev.openAll, innerOpen: prev.innerOpen.map(() => !prev.openAll) }))
  })

  return (
    <Button onClick={toggleOpenAll}>
      <div className={hideOnPrint}>
        {openObj.openAll
          ? t('record-details-expander-close', 'Close All')
          : t('record-details-expander-open', 'Open All')}
      </div>
    </Button>
  )
}

/**
 * Creates a responsive table of Additional Persons.
 *
 * @param {*} param0
 * @returns
 */
function PersonTable({ personKey, isLargeRecord, concise, openObj, setOpenObj }) {
  const { linkViaNewTab, ...additionalPersons } = useRecordAdditionalPersons()
  return (
    <ResponsiveTable
      gutters="xs"
      atSizeColumns={{
        default: { columnCount: 1 },
        xs: {
          columnCount: 4,
          columnWidths: [6, '48px', '48px', 6],
          combinationRules: [['column1', 'column2'], ['column3'], ['column4'], ['column5']],
        },
        md: { columnCount: 5, columnWidths: [4, 2, '48px', '48px', 6] },
      }}
      totalColumnCount={5}
      separator={<br />}
      rowLevelHeaders
    >
      {additionalPersons[personKey]?.map(({ person, relationshipType }, i) => {
        if (!person) return null
        return (
          <PersonRow
            key={person.id}
            person={person}
            relationshipType={relationshipType}
            isLargeRecord={isLargeRecord}
            openObj={openObj}
            setOpenObj={setOpenObj}
            concise={concise}
            index={i}
          />
        )
      })}
    </ResponsiveTable>
  )
}

/**
 * Displays a single person on the record
 * @param {Object} record -- the record containing this person as an additional person
 * @param {Object} person -- the individual person to display
 * @param {object} relationshipType where 'labelKey' or 'other' has the desired relationship identifier.
 * @param {Boolean} concise -- whether the container is narrow, e.g. in an overlay or on mobile
 * @param {Boolean} linkViaNewTab -- whether to open links in new tabs
 * @param {Boolean} open -- whether the expander is open
 * @param {Function} setOpen -- function to open the expander
 * @param {Boolean} isLargeRecord -- whether the record contains more than 50 persons
 * @returns
 */
function PersonRow({ person, relationshipType, openObj, setOpenObj, isLargeRecord, concise, index, ...props }) {
  const { linkViaNewTab } = useRecordAdditionalPersons()
  const { url, name, sex, age, birthplace } = getPersonDisplayData(person)
  const personUrl = appendQueryParamsToURL(url)
  const toUrl = concise ? window.location.origin + relativizeURL(personUrl) : personUrl

  const isOpen = openObj.innerOpen[index]

  // if the person is initially open, they are a head of record or principle person, so they should be selected (highlighted)
  const [selected] = useState(isOpen)

  const setRowExpanded = useEvent(() => {
    setOpenObj((prev) => {
      const newInnerOpen = [...prev.innerOpen]
      newInnerOpen[index] = !prev.innerOpen[index]
      return { openAll: newInnerOpen.every((open) => open), innerOpen: newInnerOpen }
    })
  })

  return (
    <ControlledResponsiveTableRow
      {...props}
      selected={selected}
      showExpansionControl
      rowExpanded={isOpen}
      setRowExpanded={setRowExpanded}
      column1={
        url ? (
          /** We need to wrap in span to avoid inheriting responsive table styles */
          <span>
            <Link to={toUrl} external target={linkViaNewTab ? '_blank' : '_self'} onClick={(e) => e.stopPropagation()}>
              {name}
            </Link>
          </span>
        ) : (
          name
        )
      }
      column2={getRelationshipLabel(relationshipType)}
      column3={sex !== 'U' ? sex : ''}
      column4={age}
      column5={birthplace}
    >
      {/** We need to wrap in span to avoid inheriting responsive table styles */}
      <span>
        <PersonaFields id={person?.id} />
      </span>
    </ControlledResponsiveTableRow>
  )
}

RecordAdditionalPersons.propTypes = {
  concise: PropTypes.bool,
}
