// TODO: Remove this file once the new RecordAdditionalPersons is fully implemented and tested.
import React, { Fragment, useState, useEffect, useMemo } from 'react'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { Link } from '@fs/zion-router'
import {
  Expander,
  ExpanderContent,
  IconButton,
  useContainerWidth,
  colors,
  Button,
  Row,
  Separator,
  Ghost,
  H3,
} from '@fs/zion-ui'
import { ArrowCaret } from '@fs/zion-icon'
import { boolAttr, Observable } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import { getPersonDisplayData, getRecordType, getRelationshipLabel } from '@fs/zion-gedcomx'
import { useRecordAdditionalPersons } from './RecordProvider'
import { appendQueryParamsToURL, relativizeURL } from './searchUtil'
import PersonaFields from './PersonaFields'
import hideOnPrint from './hideOnPrint'
import AdjustedBodyCopy from './AdjustedBodyCopy'

const headerCss = css`
  display: flex;
  width: 100%;
  align-items: center;
  padding: 0 8px;

  &:hover,
  &:focus-within {
    background: ${colors.gray03};
    cursor: pointer;
  }
`

const fullWidthCss = css`
  display: flex;
  align-items: center;
  width: 100%;
  padding: 10px 0;
`

const nameCss = css`
  width: 70%;
  padding-right: 10px;
`

const relationshipCss = css`
  width: 25%;
  padding-right: 10px;
  &[is-mobile] {
    width: 30%;
  }
`

const sexCss = css`
  width: 5%;
  padding-right: 10px;
`

const ageCss = css`
  width: 10%;
  text-align: center;
  padding-right: 10px;
`

const birthplaceCss = css`
  width: 30%;
  padding-right: 10px;
`

const additionalPersonsCss = css`
  &[is-tablet] {
    margin-left: 15px;
  }
  &[is-mobile] {
    margin-left: 8px;
  }
  &[is-infosheet] {
    font-size: 14px;
  }
`

const additionalPersonTitleCss = css`
  padding-right: 8px;
`

const additionalPersonRowCss = css`
  background-color: ${colors.transparent.blue02};
`

const lowerBorderCss = css`
  border-bottom: solid 1px ${colors.transparent.gray30};
`

const hideUntilPrint = css`
  display: none;
  @media print {
    display: block;
  }
`

const ExpandableRow = ({ children, open, setOpen, t }) => (
  // No key event needed, aria-hidden should not be used because it hides important elements on the screen from a screenreader
  // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions -- div is a default non-interactive element, but has an onClick which is interactable by a screen reader, functions as intended without key event
  <div className={headerCss} onClick={() => setOpen(!open)}>
    <span className={fullWidthCss}>{children}</span>
    <IconButton
      onClick={() => setOpen(!open)}
      title={
        open
          ? t('record-details.expander.collapse', 'Collapse This Section')
          : t('record-details.expander.expand', 'Expand This Section')
      }
      Icon={ArrowCaret}
      iconDirection={open ? 'up' : 'down'}
    />
  </div>
)
/**
 * Displays a single person on the record
 * @param {Object} record -- the record containing this person as an additional person
 * @param {Object} person -- the individual person to display
 * @param {object} relationshipType where 'labelKey' or 'other' has the desired relationship identifier.
 * @param {Boolean} concise -- whether the container is narrow, e.g. in an overlay or on mobile
 * @param {Boolean} linkViaNewTab -- whether to open links in new tabs
 * @param {Boolean} open -- whether the expander is open
 * @param {Function} setOpen -- function to open the expander
 * @param {Boolean} isLargeRecord -- whether the record contains more than 50 persons
 * @returns
 */
function AdditionalPerson({
  record,
  person,
  relationshipType,
  concise,
  linkViaNewTab,
  open = false,
  setOpen,
  isLargeRecord,
}) {
  const { url, name, sex, age, birthplace } = getPersonDisplayData(person)
  const recordType = getRecordType(record)
  // If there are a lot of people on the record, we will not highlight and open any additional people to allow the page to load more quickly
  const [highlighted, setHighlighted] = useState(false)
  const { t } = useTranslation()
  const atWidth = useContainerWidth()
  const isMobile = concise || atWidth({ default: false, xxs: true, lg: false })
  const isXSMobile = atWidth({ default: true, xxs: false })
  const personUrl = appendQueryParamsToURL(url)
  // Open principal person
  const toUrl = concise ? window.location.origin + relativizeURL(personUrl) : personUrl
  useEffect(() => {
    const isPrincipalOrHead =
      (recordType === 'http://gedcomx.org/Census' &&
        person?.fields
          ?.find((field) => field.type?.includes('RelationshipToHead'))
          ?.values?.[0]?.text?.toLowerCase() === 'head') ||
      (recordType !== 'http://gedcomx.org/Census' && person?.principal)
    if (record && !isLargeRecord && isPrincipalOrHead && !highlighted) {
      setHighlighted(true)
      setOpen(true)
    }
  }, [highlighted, record, person, recordType, setOpen, isLargeRecord])

  return (
    <div className={cx(highlighted && additionalPersonRowCss)}>
      <ExpandableRow open={open} setOpen={setOpen} t={t}>
        <AdjustedBodyCopy className={nameCss} is-mobile={boolAttr(isMobile)} as="div">
          {url ? (
            <Link to={toUrl} external target={linkViaNewTab ? '_blank' : '_self'} onClick={(e) => e.stopPropagation()}>
              {name}
            </Link>
          ) : (
            name
          )}
        </AdjustedBodyCopy>
        <AdjustedBodyCopy className={relationshipCss} is-mobile={boolAttr(isMobile)} as="div">
          {getRelationshipLabel(relationshipType)}
        </AdjustedBodyCopy>
        {!isMobile && !isXSMobile && (
          <AdjustedBodyCopy className={sexCss} as="div">
            {sex !== 'U' ? sex : ''}
          </AdjustedBodyCopy>
        )}
        {!isMobile && !isXSMobile && (
          <AdjustedBodyCopy className={ageCss} as="div">
            {age}
          </AdjustedBodyCopy>
        )}
        {!isMobile && !isXSMobile && (
          <AdjustedBodyCopy className={birthplaceCss} as="div">
            {birthplace}
          </AdjustedBodyCopy>
        )}
      </ExpandableRow>
      <div className={lowerBorderCss}>
        <Expander open={open} setOpen={setOpen}>
          {open && (
            <ExpanderContent>
              <PersonaFields id={person?.id} />
            </ExpanderContent>
          )}
        </Expander>
      </div>
    </div>
  )
}

/**
 * Displays the additional people on the record.
 * @param concise {Boolean} - flag to display the additional persons in a condensed manner
 * @returns {null|*}
 * @constructor
 */
export default function RecordAdditionalPersons({ concise = false }) {
  const { t } = useTranslation()
  const atWidth = useContainerWidth()
  const isMobile = atWidth({ default: true, xxs: true, lg: false })
  const isTablet = atWidth({ xxs: false, lg: true, xxl: false })

  const {
    parentsAndSiblings,
    spousesAndChildren,
    extendedFamily,
    others,
    hideAdditionalPersons,
    record,
    name,
    linkViaNewTab,
    isInInfoSheet,
  } = useRecordAdditionalPersons()
  const additionalPersons = useMemo(
    () => ({
      parentsAndSiblings,
      spousesAndChildren,
      extendedFamily,
      others,
    }),
    [parentsAndSiblings, spousesAndChildren, extendedFamily, others]
  )
  // Each section needs its own controls and state arrays
  const [defaultOpen, setDefaultOpen] = useState(() => {
    return {
      parentsAndSiblings: false,
      spousesAndChildren: false,
      extendedFamily: false,
      others: false,
    }
  })
  const [openArrayObj, setOpenArray] = useState(() => {
    return {
      parentsAndSiblings: Array(parentsAndSiblings.length).fill(defaultOpen.parentsAndSiblings),
      spousesAndChildren: Array(spousesAndChildren.length).fill(defaultOpen.spousesAndChildren),
      extendedFamily: Array(extendedFamily.length).fill(defaultOpen.extendedFamily),
      others: Array(others.length).fill(defaultOpen.others),
    }
  })
  const numAdditionalPersons =
    parentsAndSiblings.length + spousesAndChildren.length + extendedFamily.length + others.length
  const additionalPersonLimit = 50
  const isLargeRecord = numAdditionalPersons > additionalPersonLimit

  // Check whether to change the buttons to Close All or Open All based on what the user has done.
  useEffect(() => {
    Object.keys(additionalPersons).forEach((key) => {
      const defaultEntries = openArrayObj[key].filter((value) => {
        return value === defaultOpen[key]
      })
      if (!defaultEntries.length && additionalPersons[key].length) {
        const copy = { ...defaultOpen }
        copy[key] = !defaultOpen[key]
        setDefaultOpen(copy)
      }
    })
  }, [openArrayObj, defaultOpen, additionalPersons, numAdditionalPersons])

  // hide additional persons for non-census, non-obituary records where we are looking at a principal person
  if (hideAdditionalPersons) {
    return null
  }

  return (
    <div
      id="additionalPersons"
      className={additionalPersonsCss}
      is-tablet={boolAttr(isTablet)}
      is-mobile={boolAttr(isMobile)}
      is-infosheet={boolAttr(isInInfoSheet)}
    >
      {Object.keys(additionalPersons)
        .filter((key) => additionalPersons[key].length)
        .map((key, i) => {
          if (additionalPersons[key]?.length > 0) {
            return (
              <Fragment key={key}>
                {isMobile || isInInfoSheet ? (
                  <>
                    {!isInInfoSheet && (
                      <div className={hideOnPrint}>
                        <Separator size={i === 0 ? 'md' : 'xl'} />
                      </div>
                    )}
                    <H3 size="H6">{t(`record-details.relationships.${key}`, 'Additional Persons', { name })}</H3>
                    <Row alignX="end" alignY="middle" gutters="none" className={additionalPersonTitleCss}>
                      <Button
                        onClick={() => {
                          const arrayCopy = { ...openArrayObj }
                          arrayCopy[key].fill(!defaultOpen[key])
                          const defaultCopy = { ...defaultOpen }
                          defaultCopy[key] = !defaultOpen[key]
                          setDefaultOpen(defaultCopy)
                          setOpenArray(arrayCopy)
                        }}
                        noShrinkX
                      >
                        <div className={hideOnPrint}>
                          {defaultOpen[key]
                            ? t('record-details-expander-close', 'Close All')
                            : t('record-details-expander-open', 'Open All')}
                        </div>
                      </Button>
                    </Row>
                  </>
                ) : (
                  <>
                    <div className={hideOnPrint}>
                      <Separator size={i === 0 ? 'xxs' : 'md'} />
                    </div>
                    <Row alignY="middle" gutters="none" className={additionalPersonTitleCss}>
                      <H3 size="H6" growX>
                        {t(`record-details.relationships.${key}`, 'Additional Persons', { name })}
                      </H3>
                      <Button
                        onClick={() => {
                          const arrayCopy = { ...openArrayObj }
                          arrayCopy[key].fill(!defaultOpen[key])
                          const defaultCopy = { ...defaultOpen }
                          defaultCopy[key] = !defaultOpen[key]
                          setDefaultOpen(defaultCopy)
                          setOpenArray(arrayCopy)
                        }}
                        noShrinkX
                      >
                        <div className={hideOnPrint}>
                          {defaultOpen[key]
                            ? t('record-details-expander-close', 'Close All')
                            : t('record-details-expander-open', 'Open All')}
                        </div>
                      </Button>
                    </Row>
                  </>
                )}
                {/* This will render it as a ghost until we are printing. */}
                <div className={hideUntilPrint} id="hiddenPrint">
                  <AdditionalPersonList
                    additionalPersons={additionalPersons}
                    personKey={key}
                    isLargeRecord={isLargeRecord}
                    defaultOpen={defaultOpen}
                    record={record}
                    concise={concise}
                    linkViaNewTab={linkViaNewTab}
                    openArrayObj={openArrayObj}
                    setOpenArray={setOpenArray}
                  />
                </div>
                <div className={hideOnPrint}>
                  <Observable rootMargin="100px">
                    <Ghost style={{ height: '100px' }} keepVisible>
                      <AdditionalPersonList
                        additionalPersons={additionalPersons}
                        personKey={key}
                        isLargeRecord={isLargeRecord}
                        defaultOpen={defaultOpen}
                        record={record}
                        concise={concise}
                        linkViaNewTab={linkViaNewTab}
                        openArrayObj={openArrayObj}
                        setOpenArray={setOpenArray}
                      />
                    </Ghost>
                  </Observable>
                </div>
              </Fragment>
            )
          }
          return null
        })}
      <Separator size="sm" />
    </div>
  )
}

/**
 * Creates a list of Additional Persons.
 * We need two versions (one normal, one in a ghost), so this prevents duplicate code
 * @param {*} param0
 * @returns
 */
function AdditionalPersonList({
  additionalPersons,
  personKey,
  isLargeRecord,
  defaultOpen,
  record,
  concise,
  linkViaNewTab,
  openArrayObj,
  setOpenArray,
}) {
  return additionalPersons[personKey]?.map(({ person, relationshipType }, index) =>
    person ? (
      <Fragment key={person.id}>
        <AdditionalPerson
          isLargeRecord={isLargeRecord}
          defaultOpen={defaultOpen}
          person={person}
          relationshipType={relationshipType}
          record={record}
          concise={concise}
          linkViaNewTab={linkViaNewTab}
          open={openArrayObj[personKey][index]}
          setOpen={(newValue) => {
            const arrayCopy = { ...openArrayObj }
            arrayCopy[personKey][index] = newValue
            setOpenArray(arrayCopy)
          }}
        />
      </Fragment>
    ) : null
  )
}

RecordAdditionalPersons.propTypes = {
  concise: PropTypes.bool,
}
