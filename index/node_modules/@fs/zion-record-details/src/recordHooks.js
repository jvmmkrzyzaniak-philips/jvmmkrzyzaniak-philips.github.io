import { useState, useEffect } from 'react'
import zionDebug from '@fs/zion-debug'
import { useUser } from '@fs/zion-user'
import { useFeatureFlag } from '@fs/zion-flags'
import {
  getImageURL,
  getImageMeta,
  getImageMediaType,
  getRecordURL,
  getPersonURL,
  getFocusPerson,
} from '@fs/zion-gedcomx'
import { getAllRecordData } from './recordServices'
import getDGSLink from './filmServices'
import { getImageData } from './imageServices'

// turn on in browser console with: localStorage.debug = 'fs:search:record:*'
const debug = zionDebug('search:record:hooks')

/**
 * Hook to retrieve all data needed to render a record details page (or overlay)
 *
 * @param {String} ark - record ARK URL
 * @param {Boolean} [isPreview] - default false; if true, don't fetch things that aren't needed in preview mode (like similar records)
 * @param {Boolean} [showAttachments] - default true; if false, don't fetch attachment data
 * @returns {Object|undefined} all record data (record, attachments, similar records, etc.)
 */
export default function useFetchRecordData({ ark, isPreview = false, showAttachments = true }) {
  const { signedIn, userLoading } = useUser()
  const [data, setData] = useState({ loading: true })
  const [oldURL, setOldURL] = useState('') // we use a temp URL variable to prevent fetching data twice due to a re-render
  const recordsImprovementIndexing = useFeatureFlag('rip_search_imageIndexing')
  const fromSLS = recordsImprovementIndexing.isOn
  useEffect(() => {
    let cancelled = false
    if (!userLoading && ark && ark !== oldURL) {
      debug('trying to render', ark, '(was: ', oldURL, ')')
      setData({ loading: true })

      //  Record then collection info and Wiki URL, attachments, similar records then attachments for those, reverse hint API
      getAllRecordData({
        personaURL: ark,
        signedIn,
        fromSLS,
        isPreview,
        showAttachments,
      })
        .then((recordData) => {
          if (!cancelled) {
            debug(`record data for ${ark}:`, recordData)
            // get image data based off of record data
            getRecordImage(recordData, cancelled).then((imageData) => {
              recordData.imageData = imageData
              setOldURL(ark)
              setData(recordData)
            })
          }
        })
        .catch(sendError)
    }
    return () => {
      cancelled = true
    }

    function sendError(error) {
      if (!cancelled) {
        debug(`error getting some data for ark ${ark}:`, error)
        setOldURL(ark)
        setData({
          error: error.response || error.message,
        })
      }
    }
  }, [oldURL, ark, signedIn, userLoading, fromSLS, isPreview, showAttachments])
  return data
}

export function getRecordImage(recordData, cancelled) {
  const person = getFocusPerson(recordData.record)
  const imageURL = getImageURL(recordData.record, person.id)
  const imageMediaType = getImageMediaType(recordData.record)
  const recordURL = getRecordURL(recordData.record)
  const imageMeta = getImageMeta(recordData.record, person.id)
  const personaURL = getPersonURL(person)
  const imageData = {
    imageURL,
    imageMediaType,
    imageMeta,
    imageDataResponse: { loading: true },
    dgsLinkData: undefined,
    linkViaNewTab: recordData.linkViaNewTab,
    personaURL,
  }
  if (imageURL) {
    if (!imageMeta.isExternalImage) {
      return getImageData(imageURL, imageMediaType, recordURL)
        .then((imageDataResponse) => {
          if (!cancelled) {
            imageDataResponse.loading = false
            imageData.imageDataResponse = imageDataResponse

            // try again to get the meta data - 3rd party data can sometimes hide
            imageData.imageMeta = getImageMeta(recordData.record, person.id, imageDataResponse?.imageData)
          }
          return imageData
        })
        .catch(() => {
          if (!cancelled) {
            imageData.imageDataResponse = { loading: false, allowed: false }
          }
          return imageData
        })
    }
    // external image
    imageData.imageDataResponse = { loading: false }
    return new Promise((resolve) => {
      resolve(imageData)
    })
  }

  // no image
  return getDGSLink(recordData.record)
    .then((dgsLinkData) => {
      if (!cancelled) {
        imageData.imageDataResponse = { loading: false, allowed: false }
        imageData.dgsLinkData = dgsLinkData
      }
      return imageData
    })
    .catch(() => {
      if (!cancelled) {
        imageData.imageDataResponse = { loading: false, allowed: false }
      }
      return imageData
    })
}
