import React, { lazy, Suspense } from 'react'
import PropTypes from 'prop-types'
import { Button, useOverlay, Ellipsis } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { trackEvent } from '@fs/zion-analytics'
import { useDismissMatch } from './RecordProvider'

const DismissMatchDialog = lazy(() => import('./DismissMatchDialog'))

/**
 * Decouples the DismissMatch button from the RecordProvider
 * If you pass all the props that it needs, it will not run this code
 * @param {String} treePersonId Id of the tree person
 * @param {String} treeSex Sex of the tree person
 * @param {Function} onDismiss Function to call when dismissed
 * @param {Object} overlay - what comes back from useOverlay()
 * @returns DismissMatchDialog
 */
function ProvidedDismissMatchDialog({ treePersonId, treeSex, onDismiss, overlay, analyticsObj }) {
  const recordInfo = useDismissMatch()
  return (
    <Suspense fallback="">
      <DismissMatchDialog
        treePersonId={treePersonId}
        treeSex={treeSex}
        onDismiss={onDismiss}
        overlay={overlay}
        recordInfo={recordInfo}
        analyticsObj={analyticsObj}
      />
    </Suspense>
  )
}

/**
 * Mark a match as "not a match" - includes button and dialog
 *
 * @param {String} treePersonId Id of the tree person
 * @param {String} treeSex Sex of the tree person
 * @param {Function} onDismiss Function to call when dismissed
 * @param {Boolean} hinting Whether to say "Not a Match" instead of "Dismiss Match"
 * @param {String} emphasis The desired emphasis of the dismiss button
 * @param recordInfo container with these properties { recordURL, name, collectionName, sex } (Optional if used within a RecordProvider)
 * @param recordInfo.recordURL the ark url of the record
 * @param recordInfo.name name of person on record
 * @param recordInfo.collectionName name of record collection
 * @param recordInfo.sex sex of person on record
 * @returns DismissMatch Button and Dialog
 */
export default function DismissMatch({
  treePersonId,
  treeSex,
  onDismiss,
  hinting = false,
  emphasis = 'low',
  recordInfo,
  analyticsObj,
}) {
  const { t } = useTranslation()
  const overlay = useOverlay()

  return (
    <>
      <Button
        emphasis={emphasis}
        onClick={(event) => {
          overlay.handleClick(event)
          // Analytics
          trackEvent({
            event_name: 'click_action',
            link_name: 'Dismiss Match button clicked',
          })
        }}
      >
        {hinting ? (
          <Ellipsis>{t('record-details.hinting.dismissHint', 'Not a Match')}</Ellipsis>
        ) : (
          <Ellipsis>{t('search.record.dismissHint', 'Dismiss Match')}</Ellipsis>
        )}
      </Button>
      {(overlay.isOpen || overlay.transitioning) &&
        (recordInfo ? (
          <Suspense fallback="">
            <DismissMatchDialog
              treePersonId={treePersonId}
              treeSex={treeSex}
              onDismiss={onDismiss}
              overlay={overlay}
              recordInfo={recordInfo}
              hinting={hinting}
              analyticsObj={analyticsObj}
            />
          </Suspense>
        ) : (
          <ProvidedDismissMatchDialog
            treePersonId={treePersonId}
            treeSex={treeSex}
            onDismiss={onDismiss}
            overlay={overlay}
            analyticsObj={analyticsObj}
          />
        ))}
    </>
  )
}

DismissMatch.propTypes = {
  treePersonId: PropTypes.string,
  treeSex: PropTypes.string,
  onDismiss: PropTypes.func,
  analyticsObj: PropTypes.shape({}),
}
