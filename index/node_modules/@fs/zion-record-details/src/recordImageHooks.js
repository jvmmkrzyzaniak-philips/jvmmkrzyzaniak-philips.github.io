import { useState } from 'react'
import { NoticeProtected, PlaceChurch, PlaceProminentBuilding } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'

/**
 * In order to make sure the translations are loaded we need to do a run-time, not import time resolution of the
 * translated messages.
 * @param {boolean} signedIn True if the user is signed in, otherwise false
 * @param [{string}] imagePermissions The list of image permissions
 * @returns {[string]} The remedy messages
 */
export function useRemedies(signedIn, imagePermissions) {
  const { t } = useTranslation()

  // useState here creates a singleton that only initializes once per app instance
  const [REMEDY_MESSAGES] = useState({
    LOGIN: t('restricted.image.login', 'Log in.'),
    FHC: t('restricted.image.fsc', 'Access the site at a FamilySearch center.'),
    AFFILIATE: t('restricted.image.FSAffiliate', 'Access the site at a FamilySearch affiliate library.'),
    LOG_OR_DISC: t('restricted.image.logOrDisc', 'Log in or go to a discovery center.'),
    LDS: t(
      'restricted.image.lds',
      "You may be able to view this image by visiting one of our partner's sites or the legal record custodian (fees may apply)."
    ),
  })

  const remedies = []
  if (imagePermissions) {
    if (!signedIn) {
      if (
        imagePermissions.find((p) => {
          return p === 'REG_PAT' || p === 'LDS'
        })
      ) {
        remedies.push(REMEDY_MESSAGES.LOGIN)
      }
    }
    Object.keys(REMEDY_MESSAGES).forEach((remedy) => {
      if (imagePermissions.indexOf(remedy) !== -1) {
        remedies.push(REMEDY_MESSAGES[remedy])
      }
    })
  }
  return remedies
}

/**
 * Calculate the visibility restrictions that the permissions are suggesting
 * @param {array} imagePermissions The permissions the image requires
 * @returns {[object]} the list of visibility options for the image/user
 *    {
 *      {string} key: The key to use in the list (e.g. LOGIN, FHC, AFFILIATE, LOG_OR_DISC or LDS)
 *      {Icon} icon: The icon to use when displaying this message
 *      {string} msg: The message explaining to the user why they can see the image
 *    }
 */
export function useVisibilities(imagePermissions) {
  const { t } = useTranslation()
  // useState here creates a singleton that only initializes once per app instance
  const [VISIBILITY_MESSAGES] = useState([
    {
      key: 'LOGIN',
      icon: NoticeProtected,
      msg: t('visibility.image.login', 'Signed in to your FamilySearch account'),
    },
    {
      key: 'FHC',
      icon: PlaceChurch,
      msg: t('visibility.image.fsc', 'In a FamilySearch center'),
    },
    {
      key: 'AFFILIATE',
      icon: PlaceProminentBuilding,
      msg: t('visibility.image.FSAffiliate', 'In a FamilySearch affiliate library'),
    },
    {
      key: 'LOG_OR_DISC',
      icon: PlaceChurch,
      msg: t('visibility.image.logOrDisc', 'Logged in or in a discovery center'),
    },
    {
      key: 'LDS',
      icon: NoticeProtected,
      msg: t('visibility.image.lds', 'Signed in to your FamilySearch account'),
    },
  ])

  const list = []
  if (imagePermissions && imagePermissions?.length > 0) {
    VISIBILITY_MESSAGES.forEach((visibility) => {
      if (imagePermissions.indexOf(visibility.key) !== -1) {
        list.push(visibility)
      }
    })
  }
  return list
}
