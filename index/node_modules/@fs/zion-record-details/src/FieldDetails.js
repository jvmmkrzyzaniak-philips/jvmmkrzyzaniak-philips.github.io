import React, { useCallback } from 'react'
import { useTranslation } from 'react-i18next'
import { css } from '@linaria/core'
import { Link } from '@fs/zion-router'
import { Expander, ExpanderHeader, ExpanderContent, Paragraph, LabelTooltip, Separator } from '@fs/zion-ui'
import { boolAttr } from '@fs/zion-frontend-friends'
import { getFactTypeLabel } from '@fs/zion-gedcomx'
import { useFieldDetails } from './RecordProvider'
import AdjustedBodyCopy from './AdjustedBodyCopy'

const leftSideCss = css`
  text-align: end !important;
  border: none !important;
  vertical-align: top;
  height: 100%;
  width: 50%;
  font-weight: normal;
  padding-top: 2px;
  padding-inline-end: 8px;
  padding-bottom: 4px;
  padding-inline-start: 0;
  word-break: break-word;
  &[edit-data] {
    padding-top: 7px;
  }
`

const leftSideInfoSheetCss = css`
  text-align: start;
  border: none !important;
  vertical-align: top;
  height: 100%;
  font-weight: normal;
  word-break: break-word;
  &[edit-data] {
    padding-top: 7px;
  }
`

const rightSideCss = css`
  height: 100%;
  text-align: start !important;
  border: none !important;
  padding-inline-start: 8px;
  word-break: break-word;
  &[edit-data] {
    width: auto;
  }
  span {
    display: flex;
    padding-bottom: 0;
  }
`

function DisplayData({ labelId, relationshipURL, data, editData, isInInfoSheet = false }) {
  const { t } = useTranslation()
  const { cachedExpanders, editExpanders, focusPersonURL, setEditExpanders, linkViaNewTab } = useFieldDetails()
  const open = typeof editExpanders?.[labelId] === 'undefined' ? cachedExpanders : editExpanders?.[labelId]
  const dataWithLink = useCallback(
    (displayValue) => {
      const displayString = displayValue?.text || displayValue
      const displayComponent = <AdjustedBodyCopy as={isInInfoSheet ? '' : 'strong'}>{displayString}</AdjustedBodyCopy>
      // Link to names that have URLs that aren't the one we're looking at
      return labelId?.includes('_NAME') && focusPersonURL !== relationshipURL && relationshipURL ? (
        <Link
          external
          to={relationshipURL}
          target={linkViaNewTab ? '_blank' : '_self'}
          linkName="Relationship link clicked"
        >
          {displayComponent}
        </Link>
      ) : (
        displayComponent
      )
    },
    [labelId, relationshipURL, focusPersonURL, linkViaNewTab, isInInfoSheet]
  )
  if (editData) {
    const openedTitle = t('search.record.closeEditData', 'Collapse Edit History')
    const closedTitle = t('search.record.openEditData', 'Expand Edit History')

    // The "latest" edit value is first, and other values come after it in latest-first order
    return (
      <Expander
        open={open}
        setOpen={() => {
          const newEditExpanders = { ...editExpanders }
          newEditExpanders[labelId] = !open
          setEditExpanders(newEditExpanders)
        }}
      >
        <LabelTooltip
          label={open ? openedTitle : closedTitle}
          target={
            <ExpanderHeader data-testid={`editExpander-${labelId}`} openedTitle={openedTitle} closedTitle={closedTitle}>
              <Paragraph size="sm">{dataWithLink(editData[0])}</Paragraph>
            </ExpanderHeader>
          }
        />
        <ExpanderContent>
          {editData.map(
            (value, index) =>
              index !== 0 && (
                <React.Fragment key={value?.text || value}>
                  <AdjustedBodyCopy as="div">{value?.text || value}</AdjustedBodyCopy>
                  <Separator size="xxs" />
                </React.Fragment>
              )
          )}
        </ExpanderContent>
      </Expander>
    )
  }
  return dataWithLink(data)
}

export default function FieldDetails({ field, isInInfoSheet }) {
  const label = field?.displayName?.[0]?.value || getFactTypeLabel(field?.key)
  const labelId = field?.labelId || label
  const data = field?.value
  const editData = field?.values?.length > 1 && field.values

  const relationshipURL = field.personURL

  return (
    <tr>
      <th className={isInInfoSheet ? leftSideInfoSheetCss : leftSideCss} edit-data={boolAttr(editData)}>
        {isInInfoSheet ? (
          <strong>
            <Paragraph size="sm">{label}</Paragraph>
          </strong>
        ) : (
          label
        )}
      </th>
      <td className={rightSideCss} edit-data={boolAttr(editData)}>
        <DisplayData
          labelId={labelId}
          data={data}
          editData={editData}
          relationshipURL={relationshipURL}
          isInInfoSheet={isInInfoSheet}
        />
      </td>
    </tr>
  )
}
