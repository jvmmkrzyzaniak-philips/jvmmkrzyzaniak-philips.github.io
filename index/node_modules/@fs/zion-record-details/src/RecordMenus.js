import React, { lazy, Suspense, useCallback, useEffect, useState } from 'react'
import PropTypes from 'prop-types'
import {
  Bleed,
  Paragraph,
  Button,
  Checkbox,
  DialogOverlay,
  DialogOverlayActions,
  DialogOverlayFooter,
  ListItem,
  MenuOverlay,
  useOverlay,
  Row,
  DataBlock,
  ComboTooltip,
  Theme,
} from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { ContentBookmark, ContentEdit, MenuSettings } from '@fs/zion-icon'
import { trackEvent, trackLink } from '@fs/zion-analytics'
import { useFeatureFlag } from '@fs/zion-flags'
import { useEditMenuData, useRecordMenuData, useRiiViewer, useRiiUrl } from './RecordProvider'
import { appendQueryParamsToURL, getTreeRefParam } from './searchUtil'
import hideOnPrint from './hideOnPrint'

const CopyRecord = lazy(() => import('./CopyRecord'))
const SaveToSourceBox = lazy(() => import('./SaveToSourceBox'))
const SocialMenu = lazy(() => import('./SocialMenuImporter'))

/**
 * The menu in the record header
 * @param {Boolean} previewButtons - true if we're in a preview view (side sheet, dialog, etc.); just show a "go to full record" button
 * @param {Function} closeInfoSheet - if we're in an info sheet, calling this function will alert the parent to close it.
 * @param {Object} fieldsToShowOnPrint - hash of fields that should be shown on print
 * @param {Function} setFieldsToShowOnPrint - function to save the shown fields in a local cache
 * @param {Boolean} isSource - true if we're in a SourceRecord view. SourceRecord shows up on the tree sources page.
 * @returns {JSX.Element}
 * @constructor
 */
export default function RecordMenus({
  previewButtons,
  closeInfoSheet,
  fieldsToShowOnPrint,
  setFieldsToShowOnPrint,
  isSource = false,
}) {
  const { ark, attachments, collectionId, name, linkViaNewTab, possibleTreeMatches, title } = useRecordMenuData()
  const { t } = useTranslation()
  const printSettingsOverlay = useOverlay()
  const [fullRecordURL, setFullRecordURL] = useState(ark)
  const [matchesNotAttached, setMatchesNotAttached] = useState()
  const [attachUrl, setAttachURL] = useState()

  useEffect(() => {
    const treeRef = getTreeRefParam()
    if (previewButtons) {
      const url = new URL(ark, window.location.origin)
      if (url && treeRef) {
        url.searchParams.set('treeref', treeRef)
      }
      const toURL = url.origin + url.pathname + url.search
      setFullRecordURL(toURL)
    }
    setMatchesNotAttached(() =>
      possibleTreeMatches?.filter(
        (possibleMatch) =>
          !attachments.find(
            (attachment) =>
              attachment.persons !== undefined &&
              possibleMatch.id === attachment.persons[0].entityId &&
              treeRef !== attachment.persons[0].treeref
          )
      )
    )
  }, [ark, attachments, possibleTreeMatches, previewButtons])

  useEffect(() => {
    setAttachURL(appendQueryParamsToURL(`/search/linker?ark=${ark}&hinting=/tree/person/details/`))
  }, [ark])

  // if we are in preview mode (e.g., an info sheet), don't show all of the menu buttons
  if (previewButtons) {
    return (
      <Row alignX="center">
        <Button
          data-testid="viewSimilarRecordButton"
          emphasis="high"
          external
          to={fullRecordURL}
          linkName="View similar record button clicked"
          onClick={() => {
            if (typeof closeInfoSheet === 'function' && !linkViaNewTab) {
              closeInfoSheet()
            }
          }}
          target={linkViaNewTab ? '_blank' : '_self'}
        >
          {t('record-details.viewRecordButton', 'View Record')}
        </Button>
      </Row>
    )
  }

  return (
    <>
      <Row wrap alignX="center" gutters="sm" guttersY="sm" className={hideOnPrint}>
        {!isSource && (
          <Suspense fallback="">
            <MenuOverlay
              menuButton={
                <Button Icon={ContentBookmark} emphasis="medium" data-testid="saveRecord-Button">
                  {t('common-ui:save.action', 'Save')}
                </Button>
              }
            >
              <SaveToSourceBox defaultTitle={title} ark={ark} theme="complementary" />
              <CopyRecord />
              <ListItem
                onClick={() => {
                  window.print()
                  // Analytics
                  trackEvent({
                    event_name: 'collection_record_print',
                    record_collectionIds: [collectionId],
                  })
                }}
                primaryText={t('record-details.printRecord', 'Print Record')}
                endElement={
                  <ListItem.IconButton
                    Icon={MenuSettings}
                    onClick={printSettingsOverlay.handleClick}
                    aria-label={t('record-details.printSettings', 'Print Settings')}
                  />
                }
                role="menuitem"
              />
              {matchesNotAttached && matchesNotAttached.length > 0 && (
                <ListItem
                  to={attachUrl}
                  data-testid="attachToFamilyTree-ListItem"
                  primaryText={t('search.record.attachHintToTree', 'Attach to Tree')}
                  onClick={() => {
                    // Analytics
                    trackEvent({
                      event_name: 'click_action',
                      link_name: 'Attach to family tree save menu clicked',
                    })
                  }}
                />
              )}
            </MenuOverlay>
          </Suspense>
        )}
        <EditMenu isSource={isSource} />
        {!isSource && (
          <Suspense fallback="">
            <SocialMenu
              buttonEmphasis="medium"
              sharable={{
                url: `${window.location}`,
                subject: `${name} - ${t('record-details.share.subject', 'FamilySearch Record')}`,
              }}
              platforms={['email', 'copyLink']}
              copyLinkContent={t(
                'record-details.share.copyDescription',
                'Share this record with your family and friends by clicking the button below; then paste the link into your favorite messaging service or social media account.'
              )}
              data-testid="socialShare-button"
            />
          </Suspense>
        )}
      </Row>
      <Theme theme="complementary">
        {fieldsToShowOnPrint && (
          <PrintSettingsOverlay
            fieldsToShowOnPrint={fieldsToShowOnPrint}
            setFieldsToShowOnPrint={setFieldsToShowOnPrint}
            printSettingsOverlay={printSettingsOverlay}
          />
        )}
      </Theme>
    </>
  )
}
RecordMenus.propTypes = {
  /* True if we're in a preview view (side sheet, dialog, etc.); just show a "go to full record" button */
  previewButtons: PropTypes.bool,
  /* if we're in an info sheet, calling this function will alert the parent to close it. */
  closeInfoSheet: PropTypes.func,
  /* hash of fields that should be shown on print */
  fieldsToShowOnPrint: PropTypes.shape({}),
  /* function to save the shown fields in a local cache */
  setFieldsToShowOnPrint: PropTypes.func,
  /* true if we're in a SourceRecord view. SourceRecord shows up on the tree sources page. */
  isSource: PropTypes.bool,
}

export function PrintSettingsOverlay({ fieldsToShowOnPrint, setFieldsToShowOnPrint, printSettingsOverlay }) {
  const { t } = useTranslation()
  const [printPrefsCopy, setPrintPrefsCopy] = useState(fieldsToShowOnPrint)
  useEffect(() => {
    setPrintPrefsCopy(fieldsToShowOnPrint)
  }, [setPrintPrefsCopy, fieldsToShowOnPrint])
  const [printing, setPrinting] = useState(false)

  useEffect(() => {
    if (!printSettingsOverlay.isOpen && !printSettingsOverlay.transitioning && printing) {
      window.print()
      setPrinting(false)
    }
  }, [printSettingsOverlay.isOpen, printSettingsOverlay.transitioning, printing])

  return printSettingsOverlay.isOpen || printSettingsOverlay.transitioning ? (
    <DialogOverlay {...printSettingsOverlay} title={t('record-details.printSettings', 'Print Settings')}>
      <Bleed top>
        <Paragraph>{t('record-details.selectFieldsPrint', 'Select the fields you would like to print:')}</Paragraph>
      </Bleed>
      {Object.keys(printPrefsCopy).map((key, index) => {
        return (
          <Checkbox
            key={key}
            name={key}
            checked={printPrefsCopy[key]}
            onChange={() => {
              setPrintPrefsCopy({ ...printPrefsCopy, [key]: !printPrefsCopy[key] })
            }}
            label={t(key, `Field ${index}`)}
          />
        )
      })}
      <DialogOverlayFooter>
        <DialogOverlayActions>
          <Button onClick={printSettingsOverlay.close}>{t('common-ui:cancel.action')}</Button>
          <Button
            type="submit"
            emphasis="high"
            onClick={() => {
              setFieldsToShowOnPrint(printPrefsCopy)
              printSettingsOverlay.close()
              setPrinting(true)
              // Analytics TODO
            }}
          >
            {t('common-ui:print.action')}
          </Button>
        </DialogOverlayActions>
      </DialogOverlayFooter>
    </DialogOverlay>
  ) : null
}

function EditButton({ editOverlay, isEditable, isSource, imageArkId, useRii }) {
  const { riiUrl } = useRiiUrl('view')
  const { t } = useTranslation()
  const handleClick = useCallback(() => {
    if (useRii) {
      return trackLink({
        to: riiUrl,
        action: 'click_action',
        name: 'RII Edit: Record Details Edit Clicked Redirect ',
      })
    }
    return editOverlay.handleClick()
  }, [editOverlay, riiUrl, useRii])
  if (isEditable) {
    return (
      <Button
        Icon={ContentEdit}
        emphasis={isSource ? 'low' : 'medium'}
        // Navigate to R2 Records Improvement Indexing prototype if experiment is on, otherwise continue with normal event handler
        to={imageArkId && useRii ? riiUrl : undefined}
        external={imageArkId && useRii && riiUrl ? true : undefined}
        onClick={handleClick}
        data-testid="editRecord-Button"
      >
        {t('common-ui:edit.action', 'Edit')}
      </Button>
    )
  }
  // This catches the case where the edit button is disabled.
  // We can't use the disabled prop because the 'to' prop enables the button at all times
  return (
    <Button Icon={ContentEdit} emphasis={isSource ? 'low' : 'medium'} disabled data-testid="editRecord-Button">
      {t('common-ui:edit.action', 'Edit')}
    </Button>
  )
}

function EditMenu({ isSource = false }) {
  const { t } = useTranslation()
  const {
    ark,
    editableFields,
    imageArkId,
    imageDataResponse,
    imageURL,
    isEditable,
    isEdited,
    linkViaNewTab,

    signedIn,

    cachedExpanders,
    setCachedExpanders,
    editExpanders,
    setEditExpanders,
  } = useEditMenuData()

  const editOverlay = useOverlay()
  const { riiEnabled } = useRiiViewer()
  /* DO NOT REMOVE THE FLAG rip_search_imageIndexing. 💀 Remove at your own peril.  Pirate curses abound here.
   This flag must stay forever because we need to turn it off in beta since SLS is not there and it breaks beta,
   but we need it in prod for record details to send patrons to the R2 product for sls records. */
  const recordsImprovementIndexing = useFeatureFlag('rip_search_imageIndexing', { flaggedRecord: riiEnabled })
  const useRii = recordsImprovementIndexing.isOn && riiEnabled

  let unavailableMessage = null
  if (!editableFields.length > 0 && !isEditable) {
    unavailableMessage = `${t('record-details.cannotEditRecord', 'Sorry, this record cannot be edited.')}`
  } else if (!signedIn) {
    unavailableMessage = `${t('record-details.needSignIn', 'Please sign in before editing this record.')}`
  } else if (!imageURL || !imageDataResponse?.allowed || imageDataResponse?.bornDigitalContent) {
    unavailableMessage = `${t(
      'record-details.needSpecialAuth',
      'Sorry, you need special authorization to edit this record.'
    )}`
  }

  return (
    <>
      {isEdited && isEditable && !useRii ? (
        <MenuOverlay
          menuButton={
            <Button Icon={ContentEdit} emphasis="medium" data-testid="editRecord-Button">
              {t('common-ui:edit.action', 'Edits')}
            </Button>
          }
        >
          <ListItem
            onClick={editOverlay.handleClick}
            primaryText={t('record-details.makeNewEdit', 'Make a New Edit')}
            role="menuitem"
          />
          <ListItem
            onClick={() => {
              const newState = !cachedExpanders
              setCachedExpanders(newState)
              const toggledExpanders = {}
              Object?.keys(editExpanders)?.forEach((expander) => {
                toggledExpanders[expander] = newState
              })
              setEditExpanders(toggledExpanders)
            }}
            primaryText={
              cachedExpanders
                ? t('record-details.hideAllRecordEdits', 'Hide All Record Edits')
                : t('record-details.showAllRecordEdits', 'Show All Record Edits')
            }
            role="menuitem"
          />
        </MenuOverlay>
      ) : (
        <>
          {unavailableMessage ? (
            <ComboTooltip
              label={t('record-details.editUnavailable', 'Edit Unavailable')}
              description={unavailableMessage}
              target={
                <EditButton
                  editOverlay={editOverlay}
                  isEditable={isEditable}
                  isSource={isSource}
                  imageArkId={imageArkId}
                  useRii={useRii}
                />
              }
            />
          ) : (
            <EditButton
              editOverlay={editOverlay}
              isEditable={isEditable}
              isSource={isSource}
              imageArkId={imageArkId}
              useRii={useRii}
            />
          )}
        </>
      )}
      {(editOverlay.isOpen || editOverlay.transitioning) && (
        <Theme theme={isSource ? 'current' : 'complementary'}>
          <DialogOverlay {...editOverlay} title={t('record-details.edit-dialog.title', 'Edit Record')}>
            <Bleed top>
              <Paragraph>
                {t('record-details.edit-dialog.description', 'Select the field you would like to change:')}
              </Paragraph>
            </Bleed>
            {editableFields.map((field) => (
              <Row key={field.labelId} alignY="middle">
                <Button
                  emphasis="medium"
                  to={`/search/edit-record?record=${ark}&pid=${field.personURL || ark}&label=${field.labelId}${
                    isSource ? `&returnUrl=${encodeURIComponent(window.location.href)}` : ''
                  }`}
                  external
                  noShrinkX
                  data-testid="editRecord-Button"
                  target={linkViaNewTab ? '_blank' : '_self'}
                >
                  {t('common-ui:edit.action', 'Edit')}
                </Button>
                <DataBlock heading={field.displayName[0].value} data={<strong>{field.value}</strong>} />
              </Row>
            ))}
          </DialogOverlay>
        </Theme>
      )}
    </>
  )
}
