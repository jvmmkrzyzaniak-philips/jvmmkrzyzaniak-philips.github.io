import React, { useCallback, lazy, Suspense } from 'react'
import { css, cx } from '@linaria/core'
import { useTranslation } from 'react-i18next'
import { useUser } from '@fs/zion-user'
import { targetEnv, baseUrl } from '@fs/zion-config'
import { useFeatureFlag } from '@fs/zion-flags'
import { NoticeProtected, NoticeLoading } from '@fs/zion-icon'
import { Link } from '@fs/zion-router'
import {
  Paragraph,
  Button,
  Cell,
  colors,
  DataPreview,
  DialogOverlay,
  DialogOverlayActions,
  DialogOverlayFooter,
  Grid,
  IconButton,
  List,
  ListItem,
  QuickGlanceOverlay,
  Separator,
  useOverlay,
  H2,
  Overline,
} from '@fs/zion-ui'
import blurredImage from './blurredImage.png'
import ImageSkeleton from './ImageSkeleton'
import { useVisibilities } from './recordImageHooks'
import { useRecordImage, useRiiViewer, useRiiUrl } from './RecordProvider'
import { relativizeURL, removeHtml } from './searchUtil'
import hideOnPrint from './hideOnPrint'

const ThirdPartyImage = lazy(() => import('./ThirdPartyImage'))
const RestrictedImage = lazy(() => import('./RestrictedImage'))
const ImageUnavailable = lazy(() => import('./ImageUnavailable'))

const centerCss = css`
  position: relative;
  margin: auto;
  display: grid;
  place-items: center;
`

const imageThumbCss = css`
  width: 100%;
  min-height: 40px;
  max-height: 400px;
  max-width: 400px;
  object-fit: contain;
  overflow: hidden;
`

const blurredImageThumbCss = css`
  max-width: 369px;
  width: 100%;
  height: 241px;
  background: url(${blurredImage});
  background-repeat: no-repeat;
  border: 0;
  border-radius: 6px;
  background-position-x: center;
  background-size: cover;
  padding: 5px;
  cursor: pointer;
`

const buttonThumbCss = css`
  appearance: none;
  border: none;
  background: transparent;
`

const checkButtonCss = css`
  display: block;
  overflow: hidden;
  width: min(230px, 100%);
  color: ${colors.blue02};
  background-color: ${colors.gray90};
  padding: 8px 15px;
  border-radius: 30px;
  text-align: center;
`

const thumbnailCss = css`
  position: relative;
  margin: auto;
`

const protectedButtonCss = css`
  position: absolute;
  padding: 0 12px;
  bottom: 20px;
  right: 20px;
  background-color: ${colors.gray02};
  border-radius: 20px;
`

export default function RecordImage() {
  const { t } = useTranslation()
  const { dgsLinkData, imageURL, imageMediaType, imageMeta, imageDataResponse, linkViaNewTab, personaURL } =
    useRecordImage()

  const isLoading = useCallback(() => {
    return !(imageDataResponse && !imageDataResponse.loading)
  }, [imageDataResponse])

  if (!imageURL && !dgsLinkData?.link) {
    return <div>{t('image.unavailable', 'No Image Available')}</div>
  }

  return (
    <DataPreview.Provider loading={isLoading()}>
      {/* LOADING PREVIEW */}
      <DataPreview.Loading>
        <ImageSkeleton />
      </DataPreview.Loading>

      {/* CONTENT WHEN LOADED */}
      <DataPreview.Ready>
        <LoadedRecordImage
          dgsLinkData={dgsLinkData}
          imageURL={imageURL}
          imageMediaType={imageMediaType}
          imageMeta={imageMeta}
          imageDataResponse={imageDataResponse}
          linkViaNewTab={linkViaNewTab}
          personaURL={personaURL}
        />
      </DataPreview.Ready>
    </DataPreview.Provider>
  )
}

// INTERNAL COMPONENTS =============================================================

function LoadedRecordImage({
  dgsLinkData,
  imageURL,
  imageMediaType,
  imageMeta,
  imageDataResponse,
  linkViaNewTab,
  personaURL,
}) {
  const { t } = useTranslation()
  const { signedIn } = useUser()
  const showVisibilityOverlay = useOverlay()
  const visibilityRestrictions = useVisibilities(imageDataResponse?.permissions)
  const { riiEnabled } = useRiiViewer()
  /* DO NOT REMOVE THE FLAG rip_search_imageIndexing. ðŸ’€ Remove at your own peril.  Pirate curses abound here.
   This flag must stay forever because we need to turn it off in beta since SLS is not there and it breaks beta, 
   but we need it in prod for record details to send patrons to the R2 product for sls records. */
  const recordsImprovementIndexing = useFeatureFlag('rip_search_imageIndexing', { flaggedRecord: riiEnabled })
  const isRiiEnabled = recordsImprovementIndexing.isOn && riiEnabled
  const collectionId = findCollectionResource(imageDataResponse?.imageData)
  const { riiUrl } = useRiiUrl('view', collectionId)
  const useNonSgFlag = useFeatureFlag('search_useNonSg')

  // The image is only external
  if (imageMeta?.isExternalImage) {
    return (
      <Suspense fallback={<NoticeLoading />}>
        <ThirdPartyImage imageMeta={imageMeta} imageURL={imageMeta.imageURL} />
      </Suspense>
    )
  }

  // We can't view this image, but there's an available third-party image
  if (!imageDataResponse?.allowed && imageMeta.thirdPartyURL) {
    return (
      <Suspense fallback={<NoticeLoading />}>
        <ThirdPartyImage imageMeta={imageMeta} imageURL={imageMeta.thirdPartyURL} />
      </Suspense>
    )
  }

  // We don't have permission to view the image
  if (!imageDataResponse?.allowed && !dgsLinkData?.link) {
    return (
      <Suspense fallback={<NoticeLoading />}>
        <RestrictedImage imageURL={imageURL} signedIn={signedIn} permissions={imageDataResponse?.permissions} />
      </Suspense>
    )
  }

  if (dgsLinkData?.link && !dgsLinkData?.allowed) {
    return (
      <Suspense fallback={<NoticeLoading />}>
        <ImageUnavailable />
      </Suspense>
    )
  }

  // Is this a born digital image
  if (imageMediaType === 'application/json') {
    const bornDigitalContent = imageDataResponse?.bornDigitalContent
    return <BornDigitalImage content={bornDigitalContent} />
  }

  if (dgsLinkData?.link) {
    return <BrowseFilm dgsLinkData={dgsLinkData} signedIn={signedIn} />
  }

  const image = (
    <img
      className={cx(centerCss, imageThumbCss)}
      alt={t('record-details.thumbnail.alt-text', 'Thumbnail')}
      src={getThumbURL(imageURL, imageDataResponse, useNonSgFlag.isOn)}
    />
  )

  const personaImageUrl = isRiiEnabled ? riiUrl : getPersonaImageURL(imageURL, personaURL, collectionId)

  // The is the common case - an actual image and we want to show a thumbnail now
  return (
    <>
      <Grid>
        <Cell columns={12} key="ThumbnailCell">
          <div className={thumbnailCss} aria-hidden>
            {isRiiEnabled ? (
              <Link
                to={personaImageUrl}
                external
                linkName="RII Edit: Record Details Thumbnail Clicked Redirect "
                target={linkViaNewTab ? '_blank' : '_self'}
                tabIndex="-1"
              >
                {image}
              </Link>
            ) : (
              <Link to={personaImageUrl} external target={linkViaNewTab ? '_blank' : '_self'} tabIndex="-1">
                {image}
              </Link>
            )}
            {visibilityRestrictions.length > 0 && (
              <span className={protectedButtonCss}>
                <IconButton
                  Icon={NoticeProtected}
                  onClick={showVisibilityOverlay.handleClick}
                  title={t('protected.image.button', 'View Image Visibility')}
                  tabIndex="-1"
                />
              </span>
            )}
          </div>
        </Cell>
        <Cell columns={12} key="ViewImageButtonCell">
          <div className={hideOnPrint}>
            {isRiiEnabled ? (
              <Button
                emphasis="medium"
                fullWidth
                external
                to={personaImageUrl}
                linkName="RII Edit: Record Details Thumbnail Button Clicked Redirect"
                data-testid="viewOriginalDocument-Button"
                target={linkViaNewTab ? '_blank' : '_self'}
              >
                {t('image.viewOriginal', 'View Original Document')}
              </Button>
            ) : (
              <Button
                emphasis="medium"
                fullWidth
                external
                to={personaImageUrl}
                data-testid="viewOriginalDocument-Button"
                target={linkViaNewTab ? '_blank' : '_self'}
              >
                {t('image.viewOriginal', 'View Original Document')}
              </Button>
            )}
          </div>
        </Cell>
      </Grid>
      {visibilityRestrictions.length > 0 && (
        <QuickGlanceOverlay
          {...showVisibilityOverlay}
          title={t('image.showVisibilityOverlay.heading', 'Image Visibility')}
        >
          <Paragraph size="sm">
            {t('image.showVisibilityOverlay.subheading', 'This image is visible because you are:')}
          </Paragraph>
          <List>
            {visibilityRestrictions.map((vr) => (
              <ListItem dense key={vr.key} startElement={<ListItem.Icon Icon={vr.icon} />} primaryText={vr.msg} />
            ))}
          </List>
        </QuickGlanceOverlay>
      )}
    </>
  )
}

/**
 * Component representing the born-digital content (we use a fixed template)
 * @param {object} content The born-digital content object (e.g. { data: {object} } )
 */
function BornDigitalImage({ content }) {
  const { t } = useTranslation()
  const publicationDateLabelFlag = useFeatureFlag('search_publicationDateLabel')

  if (!content) {
    return <div>{t('image.digital.noContent', 'No content')}</div>
  }

  const recordArk = content?.data?.FS_RECORD_ARK
  const title = removeHtml(content?.data?.SOURCE_DOCUMENT_TITLE || t('born.digital.no.title', '[No Title]'), recordArk)
  const publisher = removeHtml(content?.data?.SOURCE_PUBLISHER || '', recordArk)
  const cleanDate = removeHtml(content?.data?.SOURCE_PUB_DATE || content?.data?.SOURCE_PUB_DATE_ORIG || '', recordArk)

  /* if there is a date and the feature flag is on, show the publication date AND label. If the flag is off, show just the date if we have it. Otherwise, show nothing. When search_publicationDateLabel is cleaned up, publicationDate variable can be changed to be a bit more clear:
  const publicationDate = cleanDate
  ? t('born.digital.publicationDate', 'Date of Publication: {cleanDate}', {
    cleanDate,
    })
  : ''
  */

  const publicationDate =
    cleanDate && publicationDateLabelFlag?.isOn
      ? t('born.digital.publicationDate', 'Date of Publication: {cleanDate}', {
          cleanDate,
        })
      : cleanDate

  // end of cleanup comment

  const copyright = removeHtml(content?.data?.SOURCE_COPYRIGHT || '', recordArk)
  const sourceContent = removeHtml(content?.data?.SOURCE_DOCUMENT_CONTENT || '', recordArk)

  const contentArray = sourceContent.split('\n')
  let key = 0

  return (
    <div>
      <H2 size="H5">
        <Overline>{`${publisher} | ${publicationDate}`}</Overline>
        {title}
      </H2>
      {contentArray.map((paragraph) => {
        return (
          <Paragraph key={key++} size="sm">
            {paragraph}
          </Paragraph>
        )
      })}
      <Paragraph key="copyright" size="sm">
        {copyright}
      </Paragraph>
    </div>
  )
}

/**
 * We have permission to view the 'image' but there is only an approximate link
 * User might have to browse entire film, or (if an image number is present) surrounding images
 */
function BrowseFilm({ dgsLinkData }) {
  const { t } = useTranslation()
  const browseOverlay = useOverlay()

  if (!dgsLinkData.allowed) {
    return null
  }

  // If there is no image number, user must browse entire film
  const isBrowseFilm = !dgsLinkData.imageNumber
  const useProxy = targetEnv !== 'prod'

  return (
    <>
      {isBrowseFilm ? (
        <button type="button" className={cx(centerCss, blurredImageThumbCss)} onClick={browseOverlay.handleClick}>
          <span className={checkButtonCss}>{t('image.restricted.check', 'Check Image Availability')}</span>
        </button>
      ) : (
        <>
          <button type="button" className={cx(centerCss, buttonThumbCss)} onClick={browseOverlay.handleClick}>
            <img
              className={cx(centerCss, imageThumbCss)}
              alt="Thumbnail"
              src={`/dz/v1/dgs:${dgsLinkData.dgsNumber}.${dgsLinkData.dgsNumber}_${
                dgsLinkData.imageNumber
              }/scale?width=400${useProxy ? '&proxy=true' : ''}`}
            />
          </button>
          <Separator size="nano" />
          <div className={hideOnPrint}>
            <Button
              emphasis="medium"
              fullWidth
              onClick={browseOverlay.handleClick}
              data-testid="viewOriginalDocument-Button"
            >
              {t('image.viewOriginal', 'View Original Document')}
            </Button>
          </div>
        </>
      )}
      <DialogOverlay {...browseOverlay} title={t('image.browseImageOverlay.heading', 'Viewing the Image on Film')}>
        <Paragraph>
          {isBrowseFilm
            ? t(
                'image.restricted.browseFilm',
                'The information on this record came from a group of images. To view the image of this record, you will need to look through several images. '
              )
            : t(
                'image.browseImageOverlay.description',
                'This record may have come from this image, but it could be slightly off. You may need to look through several surrounding images if it does not appear on this image.'
              )}
        </Paragraph>

        <DialogOverlayFooter>
          <OverlayActionSection
            overlay={browseOverlay}
            confirmText={
              isBrowseFilm
                ? t('image.browseFilmOverlay.browseFilm', 'Browse the Film')
                : t('image.browseImageOverlay.viewImage', 'View Image')
            }
            cancelText={t('common-ui:cancel.action', 'Cancel')}
            url={dgsLinkData.link}
          />
        </DialogOverlayFooter>
      </DialogOverlay>
    </>
  )
}

/**
 * Component that is used in overlays for images that require confirmation before viewing
 * @param {object} overlay - overlay element that is usually created using useOverlay()
 * @param {string} confirmText - text for the high-emphasis button
 * @param {string} cancelText - text for the low-emphasis button
 * @param {string} url - URL to open when the confirm button is clicked
 */
function OverlayActionSection({ overlay, confirmText, cancelText, url }) {
  const { close } = overlay
  const onConfirm = () => {
    close()
    window.open(url, '_blank')
  }
  return (
    <DialogOverlayActions>
      <Button onClick={close}>{cancelText}</Button>
      <Button onClick={onConfirm} emphasis="high">
        {confirmText}
      </Button>
    </DialogOverlayActions>
  )
}

// HELPER FUNCTIONS =============================================================

/**
 * Adds the personaUrl parameter to the image URL so that the image viewer can highlight the right person
 * @param {string} imageURL The unmodified image URL
 * @param {string} personaURL The person URL
 * @param {string} collectionId The collection ID
 * @returns {string} The altered URL with personaUrl appended to any search string.
 */
function getPersonaImageURL(imageURL, personaURL, collectionId) {
  const urlObj = new URL(imageURL)
  urlObj.searchParams.append('personaUrl', personaURL)
  if (collectionId) {
    urlObj.searchParams.append('cc', collectionId)
  }
  return urlObj.toString()
}

/**
 * Convert the image URL into a thumb URL
 * @param {string} imageURL The image URL - may have query parameters, etc.
 * @param {object} imageDataResponse The response from the platform image request
 * @param {boolean} useNonSg If true, convert image urls from 'sg' prefix to current environment's prefix (ex. 'www')
 * @returns {string} The thumbnail URL (no query parameters)
 */
function getThumbURL(imageURL, imageDataResponse, useNonSg = false) {
  let deepzoomURL = imageDataResponse?.imageData?.links?.['image-deepzoom']?.href
  const useProxy = targetEnv !== 'prod'
  if (useProxy) {
    deepzoomURL = relativizeURL(deepzoomURL)
  } else if (useNonSg) {
    deepzoomURL = `${baseUrl}${relativizeURL(deepzoomURL)}`
  }
  const thumbURL = deepzoomURL?.replace('image.xml', `scale?width=400${useProxy ? '&proxy=true' : ''}`)
  return thumbURL
}

/**
 * Find the collection resource in a record.
 * TODO: this was copied from search-react to fix New Zealand public collections (FSS-10300). It should be moved to a
 *
 * shared location.
 * @param {Object} imageData
 * @returns {String} The collection id string
 */
function findCollectionResource(imageData) {
  const href = imageData?.links?.self?.href
  if (!href) return null
  // parse cc param out of href
  const url = new URL(href)
  const collectionId = url?.searchParams?.get('cc') || null
  return collectionId
}
