import React, { Suspense, lazy } from 'react'
import PropTypes from 'prop-types'
import { useTranslation } from 'react-i18next'
import { css } from '@linaria/core'
import { Paragraph, Separator, LayoutBand, Row, Button, H4, H5 } from '@fs/zion-ui'
import Head, { Title } from '@fs/zion-head'
import { Link } from '@fs/zion-router'

const GenericErrorImage = lazy(() => import('./images/GenericErrorImage'))
const NotFoundImage = lazy(() => import('./images/NotFoundImage'))
const UnavailableImage = lazy(() => import('./images/UnavailableImage'))
const NotAuthorizedImage = lazy(() => import('./images/NotAuthorizedErrorImage'))
const NoInternetImage = lazy(() => import('./images/NoInternetImage'))

const imageMap = {
  generic: GenericErrorImage,
  'not-found': NotFoundImage,
  unavailable: UnavailableImage,
  unauthorized: NotAuthorizedImage,
  offline: NoInternetImage,
}

export default function ErrorPage({
  statusCode,
  title,
  image = 'generic',
  heading,
  body,
  links,
  reloadButton,
  hideBody,
  hideImage,
}) {
  const [t] = useTranslation()

  const Image = imageMap[image]
  const linksArray = links || [
    <Link external to="/">
      {t('error-page.option-home.action')}
    </Link>,
  ]

  return (
    <>
      <Title>{title || t('error-page.generic.title')}</Title>
      <Head>
        <meta name="prerender-status-code" content={statusCode || '500'} />
      </Head>
      <Suspense fallback="">
        <LayoutBand maxWidth="sm">
          <div
            data-testid="error-content"
            className={css`
              text-align: center;
            `}
          >
            {Image && !hideImage && <Image />}
            <H4 size="H3" data-testid="error-heading">
              {heading || t('error-page.generic.title')}
            </H4>
            {!hideBody && <Paragraph centered>{body || t('error-page.generic.body')}</Paragraph>}
            <Separator size="md" />
            <H5 size="H6" centered>
              {t('error-page.whats-next')}
            </H5>
            <Separator size="xxs" />
            {reloadButton && (
              <>
                <Row alignX="center">
                  <Button
                    emphasis="medium"
                    onClick={() => {
                      typeof window !== 'undefined' && window.location.reload()
                    }}
                  >
                    {t('error-page.option-reload')}
                  </Button>
                </Row>
                <Separator size="sm" />
              </>
            )}
            {linksArray.map((link, index) => {
              const key = `error-page-link-${index}`
              return (
                <div key={key}>
                  {link}
                  <Separator size="xxs" />
                </div>
              )
            })}
            {linksArray.length > 0 && (
              <Paragraph size="sm" centered>
                {t('error-page.option-other')}
              </Paragraph>
            )}
          </div>
        </LayoutBand>
      </Suspense>
    </>
  )
}

export const propTypes = {
  /** HTTP status code as a string, used in the metadata of the HTML page. */
  statusCode: PropTypes.string,
  /** String to display in the title of the page. */
  title: PropTypes.string,
  /** String indicator for the image to be rendered on the page */
  image: PropTypes.oneOf(['not-found', 'unavailable', 'generic', 'unauthorized', 'offline']),
  /** Error heading that summarizes the error. */
  heading: PropTypes.string,
  /** Body of the page. This should give the user a description of the error. */
  body: PropTypes.node,
  /** Array of `Link` components to render in the "What's Next" section */
  links: PropTypes.arrayOf(PropTypes.element),
  /** Determines if a button is shown that reloads the page */
  reloadButton: PropTypes.bool,
  /** Determines if body section is hidden */
  hideBody: PropTypes.bool,
  /** Determines if the page's image is hidden */
  hideImage: PropTypes.bool,
}

ErrorPage.propTypes = propTypes
