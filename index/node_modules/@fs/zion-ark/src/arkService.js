import { encodeArk } from './jEncoding'

/**
 * Converts any image url to an ark url with a fully-qualified domain; e.g.
 *  https://familysearch.org/pal:/MM9.3.1/TH-267-12115-149414-3 ->
 *  https://familysearch.org/ark:/61903/3:1:S3HY-66R7-NMX
 * If an ark is passed into the function, it will not be converted.
 * @param {string} imageUrl the image url to convert.
 * @param {boolean} [keepQuery] Whether to strip values after a "?"
 * @returns {string} the ark url or null https://familysearch.org/ark:/61903/3:1:S3HY-66R7-NMX
 */
export function convertImageURLToArkURL(imageUrl, keepQuery) {
  let imageArkUrl = null
  let arkName = ''
  const arkId = getArkId(imageUrl)
  if (arkId?.length) {
    try {
      if (arkId.split('-').length > 4 || arkId.match('^DGS')) {
        arkName = encodeArk(arkId)
      } else {
        arkName = getArkType(imageUrl) + arkId
      }
      imageArkUrl = `/ark:/61903/${arkName}`

      if (keepQuery) {
        const urlParts = imageUrl.split('?')
        if (urlParts[1]) {
          imageArkUrl += `?${urlParts[1]}`
        }
      }
    } catch (err) {
      console.error(`Error: Unable to convert image URL to ark - ${err}`)
    }
  }

  return imageArkUrl
}

/**
 * Convert an image url to an ark (it won't hurt, even if it's already been done before)
 * then return just the ark id https://familysearch.org/ark:/61903/3:1:S3HY-66R7-NMX to 3:1:S3HY-66R7-NMX
 * @param {string} imageURL - URL to an image
 * @returns {string|null} If an ark is found, a string (e.g., 3:1:S3HY-66R7-NMX) is returned. If not found, null is returned.
 */
export function convertImageURLToArk(imageURL) {
  const arkURL = convertImageURLToArkURL(imageURL, false)
  if (arkURL) {
    const urlParser = /(?:[htps]+:\/\/[^/]+)?\/ark:\/\d+\/(.*)/
    const found = arkURL.match(urlParser)
    if (found && found.length >= 2) {
      return found[1]
    }
  }
  return null
}

/**
 * Get the ark identifier from a pal or ark
 *
 * @param {String} arkOrPalURL - URL to get the ark ID from
 * @return {String} ark ID. May be empty. (e.g., https://familysearch.org/pal:/MM9.1.1/KQZ9-2SS) to KQZ9-2SS)
 */
export function getArkId(arkOrPalURL) {
  const parsedURL = new URL(validateArkDomain(arkOrPalURL))
  let parts = null

  if (/ark/.test(parsedURL.pathname)) {
    // eslint-disable-next-line no-useless-escape
    parts = parsedURL.pathname.match(/61903\/\d:\d:(?:\d:)?([^\/#?.]*)[\/#?]?/)
    if (parts?.length) {
      return parts[1]
    }
  } else if (/pal/.test(parsedURL.pathname)) {
    // eslint-disable-next-line no-useless-escape
    parts = parsedURL.pathname.match(/MM9\.\d.\d(?:.\d)?\/([^\/#?.]*)[\/#?]?/)
    if (parts?.length) {
      return parts[1]
    }
  } else if (/dz\/v1/.test(parsedURL.pathname)) {
    // eslint-disable-next-line no-useless-escape
    parts = parsedURL.pathname.match(/dz\/v1\/\d:\d:(?:\d:)?([^\/#?.]*)[\/#?]?/)
    if (parts?.length > 1) {
      return parts[1]
    }
  }
  return ''
}

/**
 * Get the pal or ark type (3:1:, 3:2:, etc.) regardless of whether it was a Pal or an ARK
 *
 * @param {String} arkOrPalURL - URL to check type for
 * @returns {String} type string (3:1:, 3:2:, etc.)
 */
export function getArkType(arkOrPalURL) {
  const parsedURL = new URL(validateArkDomain(arkOrPalURL))
  let type = ''
  let parts = null

  if (/ark:/.test(parsedURL.pathname)) {
    parts = parsedURL.pathname.match(/61903\/(\d):(\d):(?:(\d):)?/)
    type = getTypeFromParts(parts)
  } else if (/pal:/.test(parsedURL.pathname)) {
    parts = parsedURL.pathname.match(/MM9\.(\d)\.(\d)(?:\.(\d))?/)
    type = getTypeFromParts(parts)
  } else if (/dz\/v1/.test(parsedURL.pathname)) {
    parts = parsedURL.pathname.match(/dz\/v1\/(\d):(\d):(?:(\d):)?/)
    type = getTypeFromParts(parts)
  }
  return type

  function getTypeFromParts(partArray) {
    let newType = ''
    if (partArray && partArray.length > 2) {
      newType += `${partArray[1]}:${partArray[2]}:`
      if (partArray[3]) {
        newType += `${partArray[3]}:`
      }
    }
    return newType
  } // getTypeFromParts()
} // getArkType()

// ===========================================================================
// Internal Functions
// ===========================================================================

/**
 * Make sure the Ark or Pal URL has a valid domain for use by URL constructor.
 * @param {String} arkOrPalURL The ark or pal URL (may or may not have a domain)
 * @returns {String} The ark or pal URL with a domain (may be a fake domain)
 */
function validateArkDomain(arkOrPalURL) {
  if (arkOrPalURL.startsWith('/')) {
    arkOrPalURL = arkOrPalURL.substring(1)
  }
  if (arkOrPalURL && arkOrPalURL.match(/^(ark|pal)/)) {
    // If the url doesn't have a domain name, we need to add the domain to use the browser URL library,
    // and it doesn't matter all that much what the domain is, because we strip it later
    arkOrPalURL = `http://fake.domain/${arkOrPalURL}`
  }
  return arkOrPalURL
}
