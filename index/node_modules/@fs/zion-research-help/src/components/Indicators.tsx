import React, { useEffect, useRef, useState, lazy, Suspense, type ComponentProps } from 'react'
import { useOverlay } from '@fs/zion-ui'
import { type Person } from '@fs/zion-tree-types'
import { usePreference as usePreferenceUntyped } from '@fs/zion-preferences'
import { type usePreference as usePreferenceTyped } from '@fs/zion-tree-types/zion-preferences'
import { useTranslation } from 'react-i18next'
import IndicatorButton from './IndicatorButton'
import useRecordHintsShortList from '../hooks/useRecordHintsShortList'

const usePreference = usePreferenceUntyped as typeof usePreferenceTyped

const IndicatorDialog = lazy(() => import('./IndicatorDialog'))

const ariaLabelKeyMap = {
  'research-suggestions': 'research-help.research-suggestions.header',
  'record-hints': 'research-help.record-hints.header',
  'data-problems': 'research-help.data-problems.header',
}

type IndicatorWithOverlayProps = {
  type: 'data-problems' | 'record-hints' | 'research-suggestions'
} & Omit<ComponentProps<typeof IndicatorDialog>, 'overlay'> &
  Pick<ComponentProps<typeof IndicatorButton>, 'size' | 'emphasis'>

function IndicatorWithOverlay({
  items = [],
  type,
  emphasis,
  size,
  ...props
}: IndicatorWithOverlayProps): JSX.Element | null {
  const overlay = useOverlay()
  const { t } = useTranslation()
  return items?.length > 0 ? (
    <>
      <IndicatorButton
        data-testid={`${type}-indicator`}
        emphasis={emphasis}
        onClick={overlay.handleClick}
        type={type}
        size={size}
        aria-label={t(ariaLabelKeyMap[type])}
        aria-haspopup="dialog"
      />
      {/* Rendering gated here so the dialog state will reset each time it's closed */}
      <Suspense fallback="">
        {(overlay.isOpen || overlay.transitioning) && (
          <IndicatorDialog overlay={overlay} type={type} items={items} {...props} />
        )}
      </Suspense>
    </>
  ) : null
}

export function DataProblemIndicator({
  person,
  size,
  ...props
}: Omit<IndicatorWithOverlayProps, 'type' | 'items'>): JSX.Element {
  return (
    <IndicatorWithOverlay
      type="data-problems"
      items={person?.suggestions?.dataQualityList}
      person={person}
      size={size}
      {...props}
    />
  )
}

export function ResearchSuggestionIndicator({
  person,
  size,
  ...props
}: Omit<IndicatorWithOverlayProps, 'type' | 'items'>): JSX.Element {
  return (
    <IndicatorWithOverlay
      type="research-suggestions"
      items={person?.suggestions?.researchSuggestionList}
      person={person}
      size={size}
      {...props}
    />
  )
}

// The record hint button needs to show _before_ we fetch the record hints. We only fetch them once it is open.
// Data problems and Research suggestions are already available when their button is rendered.
export function RecordHintIndicator({
  emphasis,
  person,
  size,
  ...props
}: Omit<IndicatorWithOverlayProps, 'type' | 'items'> & {
  person?: Person & { hasRecordHints?: boolean }
}): JSX.Element | null {
  const overlay = useOverlay()
  const { isOpen } = overlay
  const requestInFlightRef = useRef(false)
  const recordHintLevelPref = usePreference<[string], { recordHintLevel: number }>('match.service')
  const showWeakerHints = Boolean(recordHintLevelPref && recordHintLevelPref.recordHintLevel === 3)
  const [{ data }, fetchRecordHints] = useRecordHintsShortList(person?.id, showWeakerHints)
  const [showLoadingSpinner, setShowLoadingSpinner] = useState(false)
  const { t } = useTranslation()
  useEffect(() => {
    let isCurrent = true
    if (isOpen && !requestInFlightRef.current) {
      requestInFlightRef.current = true
      fetchRecordHints()
        .then(() => {
          requestInFlightRef.current = false
          isCurrent && setShowLoadingSpinner(false)
          return undefined
        })
        .catch(console.error)

      // Delay showing the loading spinner so it doesn't show immediately. If the request is short (200ms-ish), then they don't need a spinner.
      setTimeout(() => {
        if (requestInFlightRef.current) setShowLoadingSpinner(true)
      }, 500)
      return () => {
        requestInFlightRef.current = false
      }
    }
    return () => {
      isCurrent = false
    }
  }, [fetchRecordHints, isOpen])
  const showIndicator = Array.isArray(data?.matches)
    ? person?.hasRecordHints && data?.matches && data.matches.length > 0
    : person?.hasRecordHints
  // hasRecordHints is provided by the /pedigree/ call data
  return showIndicator ? (
    <>
      <IndicatorButton
        data-testid="record-hints-indicator"
        loading={showLoadingSpinner}
        onClick={overlay.handleClick}
        type="record-hints"
        emphasis={emphasis}
        size={size}
        aria-label={t('research-help.record-hints.header')}
        aria-haspopup="dialog"
      />
      <Suspense fallback="">
        {/* Rendering gated here so the dialog state will reset each time it's closed */}

        {data?.matches && data.matches.length > 0 && (overlay.isOpen || overlay.transitioning) && (
          <IndicatorDialog
            overlay={overlay}
            type="record-hints"
            items={data.matches}
            person={person}
            onFocus={fetchRecordHints}
            {...props}
          />
        )}
      </Suspense>
    </>
  ) : null
}
