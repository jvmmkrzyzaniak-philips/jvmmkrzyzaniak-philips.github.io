import CacheService, { useCacheService as useCacheServiceUntyped } from '@fs/zion-cache-service'
import { type WrappedResponse, type RecordHints } from '@fs/zion-tree-types'
import { type useCacheService as useCacheServiceTyped } from '@fs/zion-tree-types/zion-cache-service'

const useCacheService = useCacheServiceUntyped as typeof useCacheServiceTyped

function isWrappedErrorResponse(data: WrappedResponse): boolean {
  return data?.data === null && Boolean(data?.statuses?.[0]?.cause || data?.status)
}

const transformResponse = (data: string): RecordHints | undefined => {
  const dataParsed: WrappedResponse<RecordHints> = JSON.parse(data)

  if (isWrappedErrorResponse(dataParsed)) {
    throw new Error(dataParsed.statuses?.[0]?.cause || dataParsed.status)
  }

  return dataParsed.data
}

const cache = { storeName: 'recordHintsShortList' }
const cacheService = new CacheService({ cache, strategy: 'cache-and-network' })

// exported for tests only
export const clearCache = (): void => cacheService.cacheInstance.clear()

export default function useRecordHintsShortList(
  pid: string,
  showWeakerHints: boolean
): ReturnType<typeof useCacheService<RecordHints | undefined, 'cache-and-network'>> {
  const url = showWeakerHints
    ? `/service/tree/tree-data/record-matches/${pid}/all?hintsOnLiving=true&minConfidence=3`
    : `/service/tree/tree-data/record-matches/${pid}/all?hintsOnLiving=true`

  return useCacheService<RecordHints | undefined, 'cache-and-network'>(cacheService, url, url, {
    manual: true,
    axiosConfig: { transformResponse },
  })
}
