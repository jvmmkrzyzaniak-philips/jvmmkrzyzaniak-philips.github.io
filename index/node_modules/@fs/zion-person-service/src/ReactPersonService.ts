import React from 'react'
import { type Person } from '@fs/zion-tree-types'
import { subscribeToPersonObj } from './PersonService'

/**
 * @description - the hook to use the person data service to populate the personObj
 * @param {string} pid - a person id to get the person object for
 * @param {string} size - the size of the person (card, summary, full)
 * @param {object} placeholder - when this is defined, we will return immediately an object that has all the props from the placeholder along with a 'loading' prop. It will be overridden by the person when the useEffect finishes, but is intended to be used for when there is some person data available that you would like to display to the user immediately but still desire to show a loading state indicating that the information could be updated.
 * @param {boolean} preferCache - when this is set to true, if the person is in the cache, the request will not be made to fetch the person again
 * @param {boolean} ignoreCache - when this is set to true, the request will be made to fetch the person again, regardless of the cache
 * @returns {object} the person object.
 */

type Size = 'card' | 'summary' | 'full'
type Placeholder = {
  [key: string]: unknown
  loading?: boolean
}

export default function usePerson(
  pid: string,
  size: Size,
  placeholder: Placeholder | undefined,
  preferCache: boolean,
  ignoreCache: boolean
): Person | Placeholder | undefined {
  const loading = placeholder ? { ...placeholder, loading: true } : undefined
  const [personObj, setPersonObj] = React.useState(loading)

  React.useEffect(() => {
    if (!pid || !size || pid === 'undefined' || !size) {
      return undefined
    }
    // this is from the service
    const subscription = subscribeToPersonObj(pid, size, setPersonObj, preferCache, ignoreCache)
    return function cleanup() {
      subscription.remove()
      setPersonObj({ loading: true })
    }
  }, [pid, size, preferCache, ignoreCache])

  return personObj
}
