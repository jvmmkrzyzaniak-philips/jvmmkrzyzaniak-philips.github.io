// This code is copied from https://davidwalsh.name/pubsub-javascript and only slightly modified to fit our coding standards and needs
// if we ever have to fix a bug in this code we should look at replacing it
// if we find that it would be useful elsewhere, we can extract it from the PersonDataService.

const topics = {}
const topicHasSubscriptions = (topic) => getTopicKeys().includes(topic)

/**
 * @description - return an array of topics
 * @returns {Array} - array of keys from the topics object
 * this function is not from the code on the blog but is needed for de-duplicating person calls for different sizes
 */
export function getTopicKeys() {
  return Object.keys(topics)
}

/**
 * @description - subscribe to a topic.
 * Example usage: subscribe to 'pageLoad':
 * const subscription = events.subscribe('pageLoad', obj => {console.log('pageLoad:', obj)};
 * when you are ready to unsubscribe, just call:
 * subscription.remove()
 *
 * @param {string} topic - the topic to subscribe to
 * @param {Function} listener - the function to be called when something is published to the topic
 * @returns {object} - subscription object that has the remove function
 */
export function subscribe(topic, listener) {
  // Create the topic's object if not yet created
  if (!topicHasSubscriptions(topic)) topics[topic] = []

  // Add the listener to queue
  const index = topics[topic].push(listener) - 1

  // Provide handle back for removal of topic
  return {
    remove() {
      // this will leave us with empty entries in the array and not change the indexes for everything else
      delete topics[topic][index]
    },
  }
}

/**
 * @description - publish information to a topic
 * Example usage:
 * publish('pageLoad', {pageUrl: 'url', otherStuff: 'otherStuff'})
 * @param {string} topic - the topic to publish to
 * @param {object} info - the info to publish to the topic - the object the listeners get called with
 */
export function publish(topic, info) {
  // If the topic doesn't exist, or there's no listeners in queue, just leave
  if (!topicHasSubscriptions(topic)) return

  // Cycle through topics queue, fire!
  topics[topic].forEach((item) => {
    item(info !== undefined ? info : {})
  })
}
