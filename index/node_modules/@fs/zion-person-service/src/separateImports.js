/**
 * @description - format the person object so that it looks like a tree-data person
 * @param {object} personObj - any accepted format of person object - right now this is only tree-data persons, but we intend to add more
 * @returns {object} the normalized person object or an unknown person if there isn't enough info. A person will have an id, name, lifespan (if none is provided it will be an empty string) and uppercase gender (if none is provided, it will default to unknown).
 */
export default function normalizePersonObj(personObj, unknownPerson) {
  let normalizedPerson = { ...personObj }
  const personHasName = normalizedPerson.name || normalizedPerson.nameConclusion?.details?.fullText
  if (
    !personHasName ||
    !normalizedPerson.id ||
    normalizedPerson.id.trim().toUpperCase() === unknownPerson.id ||
    normalizedPerson.id.trim().toUpperCase() === 'UNKNOWN'
  ) {
    const idToAppend = normalizedPerson.id ? { id: normalizedPerson.id } : {}
    normalizedPerson = { ...unknownPerson, ...idToAppend }
  } else {
    normalizedPerson.gender = (normalizedPerson.gender || unknownPerson.gender).trim().toUpperCase()
    if (
      normalizedPerson.gender !== 'FEMALE' &&
      normalizedPerson.gender !== 'MALE' &&
      normalizedPerson.gender !== 'UNKNOWN'
    ) {
      normalizedPerson.gender = unknownPerson.gender
    }
    /*
     * The family member service returns lifeSpan instead of lifespan
     * /family-members/person/{id} or /family-members/couple/{coupleId}/children
     */
    normalizedPerson.lifespan = normalizedPerson.lifespan || normalizedPerson.lifeSpan || unknownPerson.lifespan
    normalizedPerson.name = normalizedPerson.name || normalizedPerson.nameConclusion.details.fullText
  }
  normalizedPerson.normalized = true
  return normalizedPerson
}
