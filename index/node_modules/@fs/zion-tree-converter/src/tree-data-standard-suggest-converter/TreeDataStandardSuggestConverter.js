/**
 * This converts the output we get from treeData into a standard suggest format for pre-population of fields.
 * @param {object|null} dateOrPlace - the TreeData date or place from a conclusion object
 * @returns {object} - the standard suggest form object with originalText and standard (both can be null)
 */
export function formatTreeDataToStandardSuggest(dateOrPlace) {
  if (!dateOrPlace) return { originalText: null, standard: null }
  const { normalizedText, originalText, formalText, julianDateRange = {}, id, geoCode } = dateOrPlace
  let standard = null
  if (formalText) {
    // we have a date
    const { earliestDay: earliestAstro, latestDay: latestAstro } = julianDateRange
    standard = {
      standardizedText: normalizedText,
      originalText,
      earliestAstro,
      latestAstro,
      formalText,
    }
  } else if (id) {
    // we have a place
    standard = {
      standardizedText: normalizedText,
      id,
      location: geoCode,
    }
  }
  // StandardSuggest expects to have null for original text if it matches the standard -- otherwise, it will show the standard below the box
  if (originalText === standard?.standardizedText) {
    return {
      originalText: null,
      standard,
    }
  }
  return {
    originalText,
    standard,
  }
}

/**
 * This converts the output we get from the StandardSuggest components into a TreeData Conclusion format.
 *
 * @param {object|null} params - parameters
 * @param {object|null} params.standard - the standardized data (null if no standard option)
 * @param {string|null} params.originalText - the raw text value in the input field (null if a standard option was selected directly by the user)
 * @returns {object|null} - the TreeData date or place from Conclusion details Object
 */
export function formatStandardSuggestToTreeData({ standard, originalText } = {}) {
  if (!standard && !originalText) return null
  if (!standard && originalText) return { originalText }

  const conclusion = {
    localizedText: standard.localizedText || standard.standardizedText,
    normalizedText: standard.normalizedText || standard.standardizedText,
    originalText: originalText || standard.standardizedText,
  }

  if (standard.formalText) {
    conclusion.formalText = standard.formalText
  }

  // only set geoCode for places
  if (standard.location) {
    conclusion.geoCode = standard.location
  }

  // Only set julian date for dates
  if (typeof standard.earliestAstro === 'number' || typeof standard.julianDateRange === 'number') {
    conclusion.julianDateRange = standard.julianDateRange
      ? standard.julianDateRange
      : {
          earliestDay: standard.earliestAstro,
          latestDay: standard.latestAstro,
        }
  } else if (standard.id) {
    // only set id for places
    conclusion.id = standard.id
  }
  if (conclusion.originalText) {
    return conclusion
  }
  return null
}
