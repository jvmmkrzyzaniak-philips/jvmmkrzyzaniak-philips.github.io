import { useCallback, useMemo } from 'react'
import { useLocation, useHistory } from 'react-router-dom'
import { stringify, parse } from 'qs'

/**
 * Set specific query parameter values
 * @callback useQueryParamsSetQuery
 * @param {object} params - Key-value pairs to update the query parameters too
 */
/**
 * Remove specific query parameter values
 * @callback useQueryParamsRemoveQuery
 * @param {...string} keyNames - The names of the parameters to remove from the query string
 */
/**
 * Remove all the query parameters in the URL
 * @callback useQueryParamsClearQuery
 */
/**
 * @typedef {object} useQueryParamsReturnValues
 * @property {object} query - An Object containing the key-value pairs of the search string
 * @property {string} search - The original query string (`?thing=this&otherThing=that`)
 * @property {useQueryParamsSetQuery} setQuery - Set specific query parameter values
 * @property {useQueryParamsRemoveQuery} removeQuery - Remove specific query parameter values
 * @property {useQueryParamsClearQuery} clearQuery - Remove all the query parameters in the URL
 */

// modify a copy of the most recent location data and return updated URL with queryParams
function modQuery({ search, pathname }, modFn, { stringifyOptions, parseOptions }, startEmpty = false) {
  const searchObj = parse(startEmpty ? '' : search.replace(/^\?/, ''), parseOptions)
  modFn(searchObj) // expecting caller to mutate the data
  const queryStr = stringify(searchObj, stringifyOptions)
  return `${pathname}${queryStr ? '?' : ''}${queryStr}`
}

/**
 * Hook to handle the current url query parameters.
 * @param {object} options - Config options
 * @param {boolean} options.replaceState - allow consumer to adjust the query param without adding a new entry to the history
 * @param {object} options.stringifyOptions - qs::stringify config options
 * @param {object} options.parseOptions - qs::parse config options
 * @returns {useQueryParamsReturnValues} - Object containing the parsed query, the original search string, and methods to modify the URL Search
 */
export default function useQueryParams({ stringifyOptions, parseOptions, replaceState = false } = {}) {
  const { push, replace } = useHistory()
  const location = useLocation()
  const { search } = location
  const query = useMemo(() => parse(search.replace(/^\?/, ''), parseOptions), [search, parseOptions])

  const changeHistory = replaceState ? replace : push

  const setQuery = useCallback(
    (params, clearFirst) => {
      const path = modQuery(
        location,
        (newSearchObj) => Object.assign(newSearchObj, params),
        { stringifyOptions, parseOptions },
        clearFirst
      )
      changeHistory(path)
    },
    [location, changeHistory, stringifyOptions, parseOptions]
  )

  const removeQuery = useCallback(
    (...paramList) => {
      const path = modQuery(location, (newSearchObj) => paramList.forEach((item) => delete newSearchObj[item]), {
        stringifyOptions,
        parseOptions,
      })
      changeHistory(path)
    },
    [location, changeHistory, stringifyOptions, parseOptions]
  )

  const clearQuery = useCallback(() => {
    changeHistory(location.pathname)
  }, [location, changeHistory])

  return {
    // getters
    query,
    search,

    // setters
    setQuery,
    removeQuery,
    clearQuery,
  }
}
