import React, { lazy, Suspense } from 'react'
import { Route, useRouteMatch, useLocation } from 'react-router-dom'
import { appPath } from '@fs/zion-config'
import { i18n } from '@fs/zion-locale'
import debug from '@fs/zion-debug'
import PropTypes from 'prop-types'
import LoadingSpinner from './LoadingSpinner'
import { langCodePathRegex } from './localeCodeInPath'

const log = debug('zion:router:route')

const PersonalDataCheck = lazy(() => import('./PersonalDataCheck'))
const hasWindow = typeof window !== 'undefined'

export default function ZionRoute({ requirePersonalData, ...props }) {
  const LoadingEl = props?.LoadingComponent || LoadingSpinner
  // calculate Dynatrace RUM page names and groups from the route definitions
  const routeMatch = useRouteMatch(props.path)
  const location = useLocation()
  const basePath = appPath ? new URL(appPath).pathname : ''
  let pageGroupBase = basePath
  log('ZionRouter', props.computedMatch, props.path, routeMatch, location, basePath)
  const match = props.computedMatch || !props.path ? props.computedMatch : routeMatch
  let path = location.pathname
  if (hasWindow) {
    log('full path before replace', window.location.pathname, i18n.language)
    path = window.location?.pathname?.replace(langCodePathRegex, '/')
    pageGroupBase = basePath.replace(langCodePathRegex, '/:lang/')
  }
  log('full path without language:', path, 'basePath:', basePath, 'pageGroupBase:', pageGroupBase)

  if (hasWindow && window.dtrum) {
    if (match?.isExact) {
      // remove parenthesis and everything inside of them from match route for DTRUM, except for simple route lists
      // like :varName(route1|route2|route3) then return the matching route name instead of the varName
      match.path = match.path?.replace(/(:\w+)\(.+?\)/g, (matchedItem, varPrefix, offset) => {
        log('matchedItem', matchedItem, varPrefix, offset)
        const innerMatch = matchedItem.match(/:(\w+?)\(([|\w-]+?)\)/)
        log('innerMatch', innerMatch)
        if (innerMatch) {
          const [fullMatch, varName, routeList] = innerMatch || []
          log('fullMatch', fullMatch, varName, routeList)
          const possibleRoutes = routeList.split('|')
          const isRouteMatch = possibleRoutes.includes(match.params[varName])
          if (isRouteMatch) {
            // return the matching path from the params like 'route1'
            return match.params[varName]
          }
        }

        // should return a variable like ':subPage' or ':itemId' with the parenthesis removed
        return varPrefix
      })
      const res = window.dtrum.setPage({ name: basePath + match.url, group: pageGroupBase + match.path })
      log('DTRUM: sent page group', pageGroupBase + match.path, basePath + match.url, res)
    } else if (!props.path) {
      // through trial and error we determined null is probably the correct choice here for group
      const res = window.dtrum.setPage({ name: basePath + location.pathname, group: null })
      log('DTRUM: sent page name with no group', basePath + location.pathname, res)
    }
  }

  if (requirePersonalData)
    return (
      <Suspense fallback={<LoadingEl />}>
        <PersonalDataCheck {...props} SuccessComponent={Route} />
      </Suspense>
    )

  return <Route {...props} />
}

ZionRoute.propTypes = {
  /** When set to true, an error page is rendered if the user does not have the CanAddPersonalDataPermission permission. */
  requirePersonalData: PropTypes.bool,
  /** Component used as the fallback while loading user or CAS or anonymous session calls. */
  LoadingComponent: PropTypes.func,
}
