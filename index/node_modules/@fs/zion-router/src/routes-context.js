import React, { createContext, useContext, useCallback, useMemo } from 'react'
import { matchPath } from 'react-router-dom'
import { useFeatureFlag } from '@fs/zion-flags'
import debug from '@fs/zion-debug'
import { ensureLocaleCodeInUrl } from './localeCodeInPath'

const log = debug('zion:router:routes-context')

const RouteContext = createContext()

export const useRoutesContext = () => {
  return useContext(RouteContext)
}

export const RoutesProvider = ({ children, history, langCodeInUrlOptOut, handledExternalRoutes = [], basename }) => {
  const langFlagEnabled = useFeatureFlag('shared_addLangCodeToUrl')?.isOn
  // Take each Link's 'to' prop and check if it's an external route that
  // should be handled by the Router.
  const shouldRouteLocally = useCallback(
    (to) => {
      // to can be a object or function https://reacttraining.com/react-router/web/api/Link
      if (typeof to !== 'string') return true

      // If to is an ark, we aren't going to route locally, so return false
      if (to.startsWith('/ark:')) {
        log('ARK route found; should route locally is false', to)
        return false
      }

      const retVal = !!handledExternalRoutes.find((route) => {
        const routeString = typeof route === 'string' ? route : route.path
        const routeObj = {
          path: ensureLocaleCodeInUrl({
            to: routeString,
            external: true,
            enabled: !langCodeInUrlOptOut && langFlagEnabled,
          }),
        }
        return matchPath(to, routeObj)
      })
      log('Should route locally', to, retVal)
      return retVal
    },
    [langCodeInUrlOptOut, handledExternalRoutes, langFlagEnabled]
  )

  // Needed so the base isn't prepended onto absolute relative paths.
  // e.g. to="/tree/person/MMM-MMMM" would turn into "/tree/person/tree/person/MMM-MMMM"
  const removeBase = useCallback(
    (to) => {
      // to can be a object or function https://reacttraining.com/react-router/web/api/Link
      if (typeof to !== 'string') return true

      const base = basename === '/' ? '' : basename

      return to.replace(base, '')
    },
    [basename]
  )
  const value = useMemo(
    () => ({ langCodeInUrlOptOut, handledExternalRoutes, shouldRouteLocally, removeBase, history }),
    [langCodeInUrlOptOut, handledExternalRoutes, history, removeBase, shouldRouteLocally]
  )

  return <RouteContext.Provider value={value}>{children}</RouteContext.Provider>
}
