import type { UIEvent } from 'react'
import React from 'react'
import { IconButton } from '@fs/zion-ui'
import { ContentEdit } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'
import type { ConclusionType } from '@fs/zion-tree-types'
import { getConclusionDisplayLabel } from '../helpers/helpers'

type PencilEditButtonProps = {
  onClick?: (event: UIEvent) => unknown
  conclusionType?: ConclusionType
} & Record<string, unknown> // props from IconButton

export default function PencilEditButton({ onClick, conclusionType, ...props }: PencilEditButtonProps): JSX.Element {
  const [t] = useTranslation()
  const conclusionDisplayName = getConclusionDisplayLabel(t, conclusionType)

  const accessibilityString = t('conclusion.edit.aria-label', { conclusion: conclusionDisplayName })

  return (
    <IconButton
      {...props}
      color="gray"
      size="md"
      Icon={ContentEdit}
      onClick={(event) => {
        event.stopPropagation()
        onClick?.(event)
      }}
      title={accessibilityString}
      aria-label={accessibilityString} // The `BaseIconButtonProps` type requires the title attribute, but it's not working with voiceover so we need to use an aria-label too
      aria-haspopup="dialog"
    />
  )
}
