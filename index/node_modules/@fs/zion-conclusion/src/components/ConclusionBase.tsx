import React from 'react'
import type { BasePerson, Conclusion as ConclusionType, EventConclusion } from '@fs/zion-tree-types'
import { DataBlock } from '@fs/zion-ui'
import { css } from '@linaria/core'
import { boolAttr } from '@fs/zion-frontend-friends'
import Label from './Label'
import ConclusionBody from './ConclusionBody'

const noParaPaddingCss = css`
  /* Min height for NO_CHILDREN relationship conclusion, which doesn't have any extra info, just the label */
  min-height: 24px;
  & *[data-inline-text] {
    padding: 0;
    margin: 0;
  }
  &[truncate-inline] {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
`

type ConclusionProps = {
  /* The conclusion object to display. */
  conclusion: ConclusionType

  /** The conclusion score provided by person-quality-score */
  score?: number

  /* If true, each line of information in the conclusion body will truncate after two lines. */
  truncate?: boolean

  /** If true, a source count will be displayed next to the conclusion's label. */
  showSourceCount?: boolean

  /** If true, then warning text for non-standard dates and places will not show. */
  hideWarnings?: boolean

  /** If true, the date will not show. */
  hideDate?: boolean

  /** If true, the place will not show. */
  hidePlace?: boolean

  /** Used in testing. */
  'data-testid'?: string

  /** Person that the conclusion belongs too. */
  person?: BasePerson

  /** Will show the standard date and place if the conclusion has them */
  showStandard?: boolean

  inline?: boolean

  /** Will show the quality score if true */
  isShowScore?: boolean
}

export default function ConclusionBase({
  conclusion,
  score,
  showSourceCount,
  'data-testid': dataTestId,
  inline,
  isShowScore,
  ...props
}: ConclusionProps): JSX.Element {
  return (
    // Wrapped with a div to prevent flexbox layout issues
    <div data-testid={dataTestId} className={noParaPaddingCss} truncate-inline={boolAttr(inline && props?.truncate)}>
      <DataBlock
        heading={
          <Label
            conclusionType={conclusion.type}
            conclusionSourceCount={(conclusion as EventConclusion)?.details?.sourceCount}
            score={isShowScore ? score : undefined}
            showSourceCount={showSourceCount}
            inline={inline}
          />
        }
        data={<ConclusionBody conclusion={conclusion} {...props} inline={inline} />}
        inline={inline}
      />
    </div>
  )
}
