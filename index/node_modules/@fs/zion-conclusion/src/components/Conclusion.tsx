import type { ComponentType, UIEvent } from 'react'
import React, { lazy, Suspense, useState } from 'react'
import { useOverlay, MarginBox, colors, Row, usePageWidth } from '@fs/zion-ui'
import { boolAttr } from '@fs/zion-frontend-friends'
import { css } from '@linaria/core'
import { Affordance } from '@fs/zion-ui/quarks-authorized-use-only'
import type { AttributionProps, Conclusion as ConclusionObj } from '@fs/zion-tree-types'
import { type ConclusionScore, type Issue } from '@fs/zion-person-quality-score-issues'
import { type ToLocation } from '@fs/zion-tree-types/zion-router'
import { useFeatureFlag } from '@fs/zion-flags'
import { type SourceListProps } from '@fs/zion-tree-types/zion-source-list'
import PencilEditButton from './PencilEditButton'
import ConclusionBase from './ConclusionBase'
import type { CommonConclusionProps } from './types'
import useShouldWarn from '../helpers/useShouldWarn'

const ConclusionDialog = lazy(() => import('./overlays/ConclusionDialog'))

const relativePositionCss = css`
  position: relative;
`

const pencilButtonPositionCss = css`
  position: absolute;
  top: calc(50% - 20px); /* This centers the edit button vertically */
  inset-inline-end: 20px;
`

const editPencilAdjustmentCss = css`
  padding-inline-end: 48px;
`

const lineTabCss = css`
  border-inline-end: 1px solid ${colors.gray10};
  width: 12px;
  height: calc(100% - 8px);
  margin-top: 2px;
`

type HeadingLevel = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'div'

type ConclusionProps = CommonConclusionProps & {
  /** Conclusion object. */
  conclusion: ConclusionObj

  /** The conclusion score provided by person-quality-score. */
  score?: ConclusionScore

  /** The person score provided by person-quality-score. */
  personScore?: number

  /** If true, the conclusion dialog will not open when the conclusion is clicked. The edit pencil button is hidden. */
  disableOverlay?: boolean

  /** If true, the dialog will open on initial render. */
  autoOpen?: boolean

  /** If true, warnings for non-standard dates and places will not display. */
  hideWarnings?: boolean

  /** If true, additional information for the conclusion will be displayed. */
  expanded?: boolean

  /** Heading element to use for the label. */
  headingLevel?: HeadingLevel

  /** If true, each piece of information in the conclusion body will only display up to two lines before being truncated with an ellipsis. */
  truncate?: boolean

  /** If true, source count will be displayed next to the label. */
  showSourceCount?: boolean

  /** If true, the date will not show. */
  hideDate?: boolean

  /** If true, the place will not show. */
  hidePlace?: boolean

  /** If provided, clicking on the conclusion will navigate to this url instead of opening the conclusion dialog. */
  viewUrl?: ToLocation

  /** If provided, clicking the edit button will navigate to this url instead of opening the conclusion dialog in edit mode. */
  editUrl?: ToLocation

  /** Will show the standard date and place if the conclusion has them */
  showStandard?: boolean

  /** Minimum height of dialog */
  minHeight?: number

  /** Maximum height of dialog */
  maxHeight?: number

  /** Puts the heading and first conclusion data on the same line. It also removes the heading for a11y */
  inline?: boolean

  /** Issues associated to the conclusion */
  issues?: Issue[]

  /** Attribution component to render */
  AttributionComponent?: ComponentType<AttributionProps>

  /** SourceList component to render */
  SourceListComponent?: ComponentType<SourceListProps>
}

export type Mode = 'view' | 'add' | 'edit'

export default function Conclusion({
  disableOverlay,
  autoOpen,
  expanded,
  person,
  hideWarnings,
  relationshipId,
  readOnly,
  simple,
  conclusion,
  score,
  personScore,
  viewUrl,
  editUrl,
  minHeight,
  maxHeight,
  headingLevel = 'h5',
  issues,
  AttributionComponent,
  SourceListComponent,
  ...props
}: ConclusionProps): JSX.Element {
  const showConclusionQualityScore = useFeatureFlag('treeWeb_personR9_conclusionQualityScore').isOn
  const shouldWarn = useShouldWarn(personScore ?? 0, score?.combinedRawScore ?? 0)
  const guttersX = usePageWidth()({ default: 'xxs', md: 'nano' })
  const customLinkName = shouldWarn
    ? `Edit ${conclusion.type} from Icon: Impedance Score ${score?.combinedRawScore?.toFixed(1)}`
    : `Edit ${conclusion.type} from Icon`

  const isReadOnly = readOnly || person?.readOnly || person?.deleted

  const overlay = useOverlay({ initiallyOpen: autoOpen && !isReadOnly && !disableOverlay })

  // Determines what view the dialog will open to.
  const [mode, setMode] = useState<Mode>(autoOpen ? 'edit' : 'view')

  // Opens the conclusion dialog to a specific view
  const handleOpenDialog = (event: UIEvent, newMode: Mode): void => {
    setMode(newMode)
    overlay.handleClick(event)
  }

  // This component is currently necessary for accessibility. Without it, the conclusion `Affordance` prevents JAWS and VoiceOver on Safari from seeing the heading level.
  const HeadingComponent = headingLevel || 'h5'
  const conclusionDisplay = (
    <ConclusionBase
      conclusion={conclusion}
      score={score?.combinedRawScore}
      person={person}
      hideWarnings={simple || hideWarnings}
      isShowScore={typeof expanded === 'boolean' ? expanded && showConclusionQualityScore : showConclusionQualityScore}
      {...props}
    />
  )

  const onPencilClick = (e: UIEvent): void => {
    const destination = shouldWarn ? 'view' : 'edit'
    return !editUrl ? handleOpenDialog(e, destination) : undefined
  }

  return (
    <div data-testid={`conclusionDisplay:${conclusion.type}`}>
      {disableOverlay ? (
        <MarginBox marginY="pico">{conclusionDisplay}</MarginBox>
      ) : (
        <>
          {/*
           * We don't use zion-ui Row to position the pencil edit button because we need the pencil button and the Affordance
           * to be siblings, even though visually the icon button is inside the Affordance's hover highlight. If we put the
           * pencil button inside the Affordance, then hovering over the pencil button will also trigger the affordance's
           * highlight.
           */}
          <div className={relativePositionCss}>
            <HeadingComponent>
              <Affordance
                margin="nano"
                onClick={viewUrl ? undefined : (e: UIEvent) => handleOpenDialog(e, 'view')}
                linkName={
                  shouldWarn
                    ? `Conclusion: View ${conclusion.type}: Impedance Score ${score?.combinedRawScore?.toFixed(1)}`
                    : `Conclusion: View ${conclusion.type}`
                }
                to={viewUrl}
                noScrollTop
                style={{ minHeight: '52px' }}
                aria-haspopup={viewUrl ? undefined : 'dialog'}
              >
                <MarginBox marginY="pico">
                  {/* editPencilAdjustmentCss is in it's own div because of css ordering issues if it was added to MarginBox. */}
                  {/* We get a console error if we use a '&&' instead */}
                  <div className={!isReadOnly ? editPencilAdjustmentCss : undefined}>{conclusionDisplay}</div>
                </MarginBox>
              </Affordance>
            </HeadingComponent>

            {!isReadOnly && (
              <div className={pencilButtonPositionCss}>
                <PencilEditButton
                  linkName={customLinkName}
                  onClick={onPencilClick}
                  to={editUrl}
                  conclusionType={conclusion.type}
                  noScrollTop
                  data-testid="pencil-edit-button"
                />
              </div>
            )}
          </div>

          <Suspense fallback="">
            {(overlay.isOpen || overlay.transitioning) && (
              <ConclusionDialog
                conclusion={conclusion}
                overlay={overlay}
                readOnly={isReadOnly}
                relationshipId={relationshipId}
                mode={mode}
                simple={simple}
                person={person}
                minHeight={minHeight}
                maxHeight={maxHeight}
                personScore={personScore ?? 0}
                score={score}
                issues={issues}
                AttributionComponent={AttributionComponent}
                SourceListComponent={SourceListComponent}
                {...props}
              />
            )}
          </Suspense>
        </>
      )}

      {expanded && AttributionComponent && (
        <Row guttersX={guttersX}>
          <div noShrinkX className={lineTabCss} has-justification={boolAttr(conclusion.justification?.trim())} />
          <AttributionComponent
            contributor={conclusion.contributor}
            justification={conclusion.justification?.trim()}
            shortHeading
            thinHeading
            headingLevel="div"
          />
        </Row>
      )}
    </div>
  )
}
