import React from 'react'
import type { ConclusionType } from '@fs/zion-tree-types'
import { useTranslation } from 'react-i18next'
import { ScoreTag } from '@fs/zion-person-quality-score-issues'
import { useFeatureFlagWithPrefs } from '@fs/zion-flags'
import { css } from '@linaria/core'
import { getConclusionDisplayLabel } from '../helpers/helpers'

type Props = {
  /** Conclusion type who's label should be displayed. */
  conclusionType: ConclusionType

  /** The source count that comes from the conclusion details */
  conclusionSourceCount?: number

  /** The conclusion score provided by person-quality-score */
  score?: number
  /** If true, the source count will be included in the label. */
  showSourceCount?: boolean

  /** Custom label to use in place of the standard translated conclusion type. */
  customLabel?: string

  inline?: boolean

  /** If true, the quality score will be verbose, so it will show the 'Quality' suffix. */
  isVerboseScore?: boolean
}

// If showSourceCount is being passed in then this will require conclusionSourceCount to also be passed in
type SmartProps<T extends Props> = T extends { showSourceCount: boolean | undefined }
  ? T & { conclusionSourceCount: number | undefined }
  : T

const secondaryCss = css`
  font-weight: normal;
  color: var(--gray80);
`

export default function Label<T extends Props>({
  conclusionType,
  conclusionSourceCount,
  score,
  customLabel,
  showSourceCount,
  inline,
  isVerboseScore,
}: SmartProps<T>): JSX.Element {
  const { data } = useFeatureFlagWithPrefs(
    'treeWeb_personR9_qualityIndicator',
    {},
    { userPreferences: ['fslabs.labs'] }
  )
  const showConclusionQualityScore = !!data?.isOn

  const [t] = useTranslation()
  let label = customLabel || getConclusionDisplayLabel(t, conclusionType)
  label += inline ? ':' : ''

  return (
    <>
      {label}
      {showSourceCount && (
        <span className={secondaryCss}>
          {` \u2022 `}
          {t('conclusion.source-count.label', {
            number: conclusionSourceCount || 0,
          })}
        </span>
      )}
      {typeof score === 'number' && showConclusionQualityScore && (
        <span className={secondaryCss}>
          {` \u2022 `}
          <ScoreTag score={score} isVerbose={isVerboseScore} />
        </span>
      )}
    </>
  )
}
