import React from 'react'
import { Ellipsis, Cell, Paragraph } from '@fs/zion-ui'
import type {
  AssociationEventConclusionDetails,
  BasePerson,
  Conclusion,
  EventConclusionDetails,
  NameConclusion,
} from '@fs/zion-tree-types'
import { css } from '@linaria/core'
import { useTranslation } from 'react-i18next'
import StandardizeWarning from './StandardizeWarning'
import NameTemplates from './NameTemplates'
import NameType from './NameType'
import { lineageLabelKeyMap } from '../helpers/translationKeyMaps'
import ConclusionBodyWrapper from './ConclusionBodyWrapper'

const noParagraphPaddingCss = css`
  & p {
    padding: 0;
  }
`

type DetailProps = {
  children: React.ReactNode
  truncate?: boolean
  lineClamp?: number
  title?: string
  inline?: boolean
}

function Detail({ children, truncate, lineClamp = 2, inline, ...props }: DetailProps): JSX.Element | null {
  const Comp = inline ? Cell : Ellipsis
  const newProps = inline
    ? { ...props, as: 'span' }
    : { ...props, noTooltip: true, lineClamp: truncate ? lineClamp : 200 }
  return children ? <Comp {...newProps}>{children}</Comp> : null
}

type Props = {
  /** Conclusion being displayed. */
  conclusion: Conclusion

  /** If true, each piece of information will truncate with an ellipsis after 2 lines. On by default. */
  truncate?: boolean

  /** If true, then warning text for non-standard dates and places will not show. */
  hideWarnings?: boolean

  /** If true, the date will not be displayed. */
  hideDate?: boolean

  /** If true, the place will not be displayed. */
  hidePlace?: boolean

  /** Person object for the person that owns this conclusion. Only needed for type DEATH. */
  person?: BasePerson

  /** Will show the standard date and place if the conclusion has them */
  showStandard?: boolean

  /** Will show the conclusion data inline with the header */
  inline?: boolean
}

const sexKeyMap = {
  FEMALE: 'conclusion.sex.FEMALE',
  MALE: 'conclusion.sex.MALE',
  UNKNOWN: 'conclusion.sex.UNKNOWN',
}

export default function ConclusionBody({
  conclusion,
  truncate,
  hideWarnings,
  hideDate,
  hidePlace,
  person,
  showStandard,
  inline,
}: Props): JSX.Element {
  const [t] = useTranslation()
  const { type } = conclusion
  const { date, place } = conclusion.details as EventConclusionDetails
  const { generationNumber } = conclusion.details as AssociationEventConclusionDetails
  const conclusionTitle =
    type !== 'PARENT1_LINEAGE' && type !== 'PARENT2_LINEAGE'
      ? (conclusion.details as { title?: string }).title
      : t(lineageLabelKeyMap[conclusion.details.title])

  const showStandardSection =
    showStandard &&
    (date?.normalizedText || place?.originalText) &&
    ((!hideDate && date?.normalizedText !== date?.originalText) ||
      (!hidePlace && place?.normalizedText !== place?.originalText))

  return (
    <ConclusionBodyWrapper inline={inline}>
      {/* Gender */}
      <Detail data-testid="conclusion-gender" inline={inline}>
        {type === 'GENDER' ? t(sexKeyMap[conclusion.details.gender] ?? sexKeyMap.UNKNOWN) : null}
      </Detail>

      {/* Living Status ("Deceased" or "Living") */}
      <Detail data-testid="conclusion-living-status" inline={inline}>
        {type === 'DEATH' && !place && !date && person
          ? t(person.living ? `conclusion.living` : 'conclusion.deceased')
          : null}
      </Detail>

      <Cell>
        {/* Name(s) */}
        <Detail truncate={truncate} inline={inline}>
          {type === 'ALTERNATE_NAME' && <NameType conclusion={conclusion} />}
        </Detail>
        <Detail truncate={truncate} lineClamp={3} inline={inline && type === 'NAME'}>
          {(type === 'ALTERNATE_NAME' || type === 'NAME') && (
            <NameTemplates conclusion={conclusion as NameConclusion} inline={inline && type === 'NAME'} />
          )}
        </Detail>
      </Cell>

      {/* Date and Place */}
      <Cell>
        {/* Title for custom events, custom facts, and parent-child relationship types */}
        <Detail data-testid="conclusion-title" truncate={truncate} inline={inline}>
          {conclusionTitle}
        </Detail>
        {!hideDate && (
          <Detail
            data-testid="conclusion-date"
            title={date?.normalizedText || date?.originalText}
            truncate={truncate}
            inline={inline && !conclusionTitle}
          >
            {date?.originalText}
          </Detail>
        )}
        {!hidePlace && (
          <Detail
            data-testid="conclusion-place"
            title={place?.normalizedText || place?.originalText}
            truncate={truncate}
          >
            {place?.originalText}
          </Detail>
        )}
      </Cell>

      {/* Generation Number */}
      {generationNumber && (
        <Detail data-testid="conclusion-generation-number" inline={inline}>
          {t('conclusion.generations.label', { count: generationNumber })}
        </Detail>
      )}

      {/* Description */}
      <Detail
        data-testid="conclusion-description"
        truncate={truncate}
        inline={inline && !conclusionTitle && !generationNumber && !date?.originalText}
      >
        {(conclusion.details as { description?: string }).description}
      </Detail>

      {/* Non-Standard Date & Place Warnings */}
      {!hideWarnings && <StandardizeWarning conclusion={conclusion} hideDate={hideDate} hidePlace={hidePlace} />}

      {/* Date and Place */}
      {showStandardSection && (
        <div className={noParagraphPaddingCss} data-testid="conclusion-standard">
          <Detail data-testid="conclusion-standard-title">
            <Paragraph secondary size="xs">
              {t('conclusion.standardized-data.label')}
            </Paragraph>
          </Detail>
          {!hideDate && (
            <Detail data-testid="conclusion-standard-date" title={date?.normalizedText}>
              <Paragraph secondary size="xs">
                {date?.normalizedText}
              </Paragraph>
            </Detail>
          )}
          {!hidePlace && (
            <Detail data-testid="conclusion-standard-place" title={place?.normalizedText}>
              <Paragraph secondary size="xs">
                {place?.normalizedText}
              </Paragraph>
            </Detail>
          )}
        </div>
      )}
    </ConclusionBodyWrapper>
  )
}
