import React from 'react'
import type { AlternateNameConclusion, NameConclusion } from '@fs/zion-tree-types'
import { css } from '@linaria/core'

const nameTemplateCss = css`
  display: block;
`

type NameTemplateProps = {
  conclusion: NameConclusion | AlternateNameConclusion
  inline?: boolean
}

export default function NameTemplates({ conclusion, inline }: NameTemplateProps): JSX.Element {
  const { nameForms } = conclusion.details
  return (
    <>
      {nameForms?.map((nameForm, index) => {
        // normally we don't use index as part of a key - however, nothing exposed to us about a nameForm is actually guaranteed to be unique (thanks to legacy data), so this is our best bet.
        const key = `${nameForm.lang}${nameForm.fullText}${index}`
        return (
          <span
            key={key}
            lang={nameForm.lang}
            className={inline ? undefined : nameTemplateCss}
            data-testid="conclusion-name-template"
          >
            {nameForm.fullText}
          </span>
        )
      })}
    </>
  )
}
