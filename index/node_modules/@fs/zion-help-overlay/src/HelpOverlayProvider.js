import React, { createContext, Suspense, lazy, useContext, useState, useCallback, useMemo } from 'react'
import { useOverlay, IconButton } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { NoticeQuestion } from '@fs/zion-icon'
import PropTypes from 'prop-types'

const HelpOverlay = lazy(() => import('./HelpOverlay'))

export const HelpOverlayContext = createContext()

export const useHelpOverlay = (newHelpActionUrl, newAnchor) => {
  const { overlay, helpActionUrl, setHelpActionUrl, setAnchor } = useContext(HelpOverlayContext)

  const handleToggleHelpOverlay = useCallback(
    (event) => {
      if (event?.detail?.helpActionUrl) {
        setHelpActionUrl(event?.detail?.helpActionUrl)
      } else {
        // If they don't pass in a url, we want to clear it out. It'll just set it to undefined.
        setHelpActionUrl(newHelpActionUrl)
      }
      if (event?.detail?.anchor) {
        setAnchor(event?.detail?.anchor)
      } else {
        setAnchor(newAnchor)
      }

      // If the overlay is open, we only want to close it if they click a button that goes to the current url.
      if (!overlay.isOpen || newHelpActionUrl === helpActionUrl) overlay.handleClick(event?.detail?.event || event)
    },
    [newHelpActionUrl, overlay, helpActionUrl, setHelpActionUrl, setAnchor, newAnchor]
  )

  const close = () => {
    setHelpActionUrl(undefined)
    overlay.close()
  }

  return { ...overlay, handleClick: handleToggleHelpOverlay, close }
}

export default function HelpOverlayProvider({ children }) {
  const overlay = useOverlay()
  const [helpActionUrl, setHelpActionUrl] = useState()
  const [anchor, setAnchor] = useState(false)

  const overlayContext = useMemo(
    () => ({ overlay, helpActionUrl, setHelpActionUrl, anchor, setAnchor }),
    [anchor, helpActionUrl, overlay]
  )

  return (
    <HelpOverlayContext.Provider value={overlayContext}>
      {children}
      <Suspense fallback="">
        {(overlay.isOpen || overlay.transitioning) && (
          <HelpOverlay overlayKey="helpOverlay" helpActionUrl={helpActionUrl} anchor={anchor} {...overlay} />
        )}
      </Suspense>
    </HelpOverlayContext.Provider>
  )
}

export function HelpOverlayButton({ helpActionUrl, 'aria-label': ariaLabel, overrideUrl, linkName, anchor, ...props }) {
  const [t] = useTranslation()
  const helpOverlay = useHelpOverlay(helpActionUrl, anchor)
  // TODO overrideUrl currently does nothing, remove it or do something with it

  return (
    <IconButton
      Icon={NoticeQuestion}
      linkName={helpOverlay.isOpen ? linkName : null}
      onClick={helpOverlay.handleClick}
      title={ariaLabel || t('help', 'Help')}
      // The Help Tutorial component needs to be able to get a reference to this button
      // to show users how they can get back to a tutorial after it is closed. This selector
      // is used there to get that reference it needs
      data-selector="helpOverlayButton"
      {...props}
    />
  )
}

HelpOverlayButton.propTypes = {
  /** Url provided to override default url */
  helpActionUrl: PropTypes.string,

  /** Label for screen readers */
  'aria-label': PropTypes.string,
}
