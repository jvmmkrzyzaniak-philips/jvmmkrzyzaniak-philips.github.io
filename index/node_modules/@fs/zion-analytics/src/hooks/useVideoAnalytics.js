import { useReducer, useCallback } from 'react'
import zionDebug from '@fs/zion-debug'

const debug = zionDebug('analytics:useVideoAnalyticsReducer')

export const videoEvents = {
  pause: -1,
  finished: 0,
  playing: 1,
}
const videoReducerActionType = {
  setPlayer: 'setPlayer',
  started: 'started',
  milestoneReached: 'milestoneReached',
  finished: 'finished',
}
const milestones = {
  started: 0,
  other: [0.25, 0.5, 0.75],
  finished: 1,
  total: 5,
  liveTotal: 2,
}
const initial = {
  completedAllMilestones: false,
  numberDone: 0,
}

function calculatePotentialMilestone(duration, currentTime) {
  const proportionWatched = (duration > 0 && currentTime / duration) || 0
  const potentialMilestones = milestones.other.filter((a) => a <= proportionWatched)
  return potentialMilestones[potentialMilestones.length - 1]
}
function calculateVideoNearEnd(duration, currentTime) {
  const endedMileStoneLeeway = 10
  return currentTime > duration - endedMileStoneLeeway
}

function videoAnalyticsReducer(state, action) {
  debug(`dispatch:`, action)
  const { type, numberDone, completedAllMilestones, newPlayer, milestone } = action
  if (type === videoReducerActionType.setPlayer) {
    return { ...state, player: newPlayer }
  }
  if (type === videoReducerActionType.milestoneReached) {
    return { ...state, [milestone]: true, numberDone, completedAllMilestones }
  }
  throw Error(`Analytics reducer action ${type} not handled`)
}

function checkMilestonesState({
  currentTime,
  duration,
  track = () => {},
  event,
  analyticsState,
  dispatchAnalyticsStateUpdate,
}) {
  if (!analyticsState[milestones.finished] && event === videoEvents.finished) {
    dispatchAnalyticsStateUpdate({ type: videoReducerActionType.milestoneReached, milestone: milestones.finished })
    track(milestones.finished)
  } else if (event === videoEvents.playing) {
    const potentialMilestone = calculatePotentialMilestone(duration, currentTime)
    const videoNearEnd = calculateVideoNearEnd(duration, currentTime)
    if (!analyticsState[milestones.finished] && (videoNearEnd || event === videoEvents.finished)) {
      dispatchAnalyticsStateUpdate({ type: videoReducerActionType.milestoneReached, milestone: milestones.finished })
      track(milestones.finished)
    } else if (!analyticsState[milestones.started]) {
      dispatchAnalyticsStateUpdate({ type: videoReducerActionType.milestoneReached, milestone: milestones.started })
      track(milestones.started)
    } else if (potentialMilestone && !analyticsState[potentialMilestone]) {
      dispatchAnalyticsStateUpdate({ type: videoReducerActionType.milestoneReached, milestone: potentialMilestone })
      track(potentialMilestone)
    }
  }
}

function checkLiveVideoMilestonesState({ track = () => {}, event, analyticsState, dispatchAnalyticsStateUpdate }) {
  if (!analyticsState[milestones.finished] && event === videoEvents.finished) {
    dispatchAnalyticsStateUpdate({ type: videoReducerActionType.milestoneReached, milestone: milestones.finished })
    track(milestones.finished)
  } else if (event === videoEvents.playing && !analyticsState[milestones.started]) {
    dispatchAnalyticsStateUpdate({ type: videoReducerActionType.milestoneReached, milestone: milestones.started })
    track(milestones.started)
  }
}

export default function useVideoAnalytics(isLive) {
  const [analyticsState, dispatch] = useReducer(videoAnalyticsReducer, initial)

  const dispatchAnalyticsStateUpdate = useCallback(
    (action) => {
      const newNumberDone = analyticsState.numberDone + 1
      const completedAllMilestones = newNumberDone === (isLive ? milestones.liveTotal : milestones.total)
      dispatch({ ...action, numberDone: newNumberDone, completedAllMilestones })
    },
    [analyticsState, dispatch, isLive]
  )

  const updatePlayer = useCallback(
    (newPlayer) => {
      dispatch({ type: videoReducerActionType.setPlayer, newPlayer })
    },
    [dispatch]
  )

  const checkMilestones = useCallback(
    ({ currentTime, duration, track, event }) => {
      if (isLive) {
        checkLiveVideoMilestonesState({ track, event, analyticsState, dispatchAnalyticsStateUpdate })
      } else {
        checkMilestonesState({ currentTime, duration, track, event, analyticsState, dispatchAnalyticsStateUpdate })
      }
    },
    [analyticsState, dispatchAnalyticsStateUpdate, isLive]
  )

  return { analyticsState, checkMilestones, updatePlayer }
}
