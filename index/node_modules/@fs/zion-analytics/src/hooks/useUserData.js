import { useState, useEffect } from 'react'
import zionDebug from '@fs/zion-debug'
import { useEffectiveUser } from '@fs/zion-user'
import { getUserSegment } from '../service'

const debug = zionDebug('analytics')

const useUserData = () => {
  const [state, setState] = useState({
    isLoading: true,
  })
  const [fscLocation, setFSCLocation] = useState('')
  const { userLoading, signedIn, cisId, gender } = useEffectiveUser()
  const extensionResponseHandler = (event) => {
    if (event?.data?.message === 'center_identities' && event?.data?.data) {
      const centerArray = event.data.data
      debug('setting fsc location to ', centerArray[0].name)
      setFSCLocation(centerArray[0].name)
    }
  }
  useEffect(() => {
    // Set up listener for events from FamilySearch Premium Sites extension
    window.addEventListener('message', extensionResponseHandler)

    // Send data request to FamilySearch Premium Sites extension
    window.dispatchEvent(new CustomEvent('getCurrentCenter'))

    return () => {
      window.removeEventListener('message', extensionResponseHandler)
    }
  }, [])

  useEffect(() => {
    let isCurrent = true
    // wait half a second for FamilySearch Premium Sites extension to add FamilySearch Center data.
    const timeout = setTimeout(async () => {
      if (userLoading) return

      if (signedIn) {
        try {
          const { treeLevel, userLevel, newUser, member } = await getUserSegment(cisId)
          if (isCurrent) {
            const userState = {
              isLoading: false,
              visitor_treeCompleteness: treeLevel,
              visitor_contributionLevel: userLevel,
              visitor_visitationState: newUser ? 'New' : 'Returning',
              visitor_cis: cisId,
              visitor_gender: gender,
              visitor_accountType: member ? 'MEMBER' : 'PUBLIC',
            }
            if (fscLocation) {
              userState.fhc_location = fscLocation
            }
            setState(userState)
          }
        } catch (err) {
          debug('there was a problem getting the user data', err)
        }
      } else if (isCurrent) {
        const newState = {
          isLoading: false,
        }
        if (fscLocation) {
          newState.fhc_location = fscLocation
        }
        setState(newState)
      }
    }, 500)
    return () => {
      isCurrent = false
      clearTimeout(timeout)
    }
  }, [cisId, gender, signedIn, userLoading, fscLocation])

  return state
}

export default useUserData
