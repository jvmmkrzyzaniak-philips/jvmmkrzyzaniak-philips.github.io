import { useState, useEffect, useCallback } from 'react'
import zionDebug from '@fs/zion-debug'
import { setTag as setSentryTag } from '@sentry/react'
import { appName } from '@fs/zion-config'
// Zion-Router depends on Zion-Analytics. So to break the circular dependency, Zion-Analytics should use `useLocation` from `react-router-dom` instead.
import { useLocation } from 'react-router-dom'
import useUserData from './useUserData'
import { checkAndSend, mergeWithDefaults } from '../helpers'

const debug = zionDebug('analytics')

/**
 * Hook to automatically send a page view event
 * @param {object} initialData data to send
 * @param {Boolean} [updateSentry] - Also send page name to Sentry as a tag. Default true.  Disable Sentry's behavior by passing false.
 */
export const usePageView = (initialData, updateSentry = true) => {
  // previously, I referenced `initialData` in the useEffect, but that would be different every time the component would re-render, thus running this hook again. Putting it in state solves that problem.
  const [pageData] = useState(initialData)
  const userData = useUserData()
  const location = useLocation()

  // Tell Sentry what page we are on so it will show up on errors
  useEffect(() => {
    if (pageData?.page_detail && updateSentry) {
      setSentryTag('fs:page_name', `${appName}: ${pageData.page_detail}`)
    }
  }, [pageData, updateSentry])

  const { isLoading } = userData
  useEffect(() => {
    if (!isLoading) {
      const myUserData = { ...userData }
      // we don't need this in the tracking data
      delete myUserData.isLoading

      const data = mergeWithDefaults({ ...pageData, ...myUserData })
      debug('usePageView hook used; sending analytics', data)
      checkAndSend(data)
    }
  }, [userData, isLoading, pageData, location])
}

function isObject(thing) {
  return typeof thing === 'object' && !Array.isArray(thing) && thing !== null
}

// meant for one component with multiple routes
export const usePageViewEvent = () => {
  const userData = useUserData()
  const [analyticData, setAnalyticData] = useState()
  const sendPageView = useCallback((pageData = {}, updateSentry = true) => {
    if (!isObject(pageData)) {
      throw new Error('usePageEvent callback requires pageData to be an object or omitted')
    }
    setAnalyticData({ pageData, updateSentry })
  }, [])

  useEffect(() => {
    if (userData.isLoading || !analyticData) {
      analyticData && debug('still getting user data, will not send a page view event')
      return
    }
    const { pageData, updateSentry } = analyticData

    // Tell Sentry what page we are on so it will show up on errors
    if (pageData?.page_detail && updateSentry) {
      setSentryTag('fs:page_name', `${appName}: ${pageData.page_detail}`)
    }

    const data = mergeWithDefaults({ ...pageData, ...userData })
    delete data.isLoading
    debug('usePageViewEvent function used; sending analytics', data)
    checkAndSend(data)
  }, [userData, analyticData])

  return sendPageView
}
