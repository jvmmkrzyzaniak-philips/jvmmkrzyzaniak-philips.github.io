import { useEffect } from 'react'
import zionDebug from '@fs/zion-debug'
import { trackVideo } from '../helpers'
import useVideoAnalytics, { videoEvents } from './useVideoAnalytics'

const debug = zionDebug('analytics:video:youtube')

/*
For more details on youtube events see https://developers.google.com/youtube/iframe_api_reference#Events
*/
const youtubeEvents = {
  ended: 0,
  playing: 1,
}
const milestonesSegment = {
  0.25: '25',
  0.5: '50',
  0.75: '75',
}
// these fields are defined in the FamilySearch data layer. https://nam10.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2F1VsfZTzsI4nQre8qt5WbKVBK9M7EwEExvmMcf_-j8bSQ%2Fedit%23gid%3D366884203&data=04%7C01%7Cnicknielsen86%40ChurchofJesusChrist.org%7Cfeb8129ce1d54443898808d9f228d8bf%7C61e6eeb35fd74aaaae3c61e8deb09b79%7C0%7C0%7C637807079518330783%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000&sdata=5Dd02n0LgU2NGA4n2HIKZ%2BuM5XfMrisDMm30zqT8Qm4%3D&reserved=0
const eventNames = {
  0: 'video_play',
  0.25: 'video_segment',
  0.5: 'video_segment',
  0.75: 'video_segment',
  1: 'video_complete',
}

function sendTracking({ milestone, video_id, title, author, isLive }) {
  debug('milestone tracked:', milestone)
  const trackingData = {
    event_name: eventNames[milestone],
    video_id,
    video_player: 'youtube',
    video_name: title,
    video_author: author,
    video_live: isLive,
  }
  if (milestonesSegment[milestone]) {
    trackingData.video_segment_name = milestonesSegment[milestone]
  }
  trackVideo(trackingData)
}

let interval
export default function useYoutubeAnalytics(isLive) {
  const { analyticsState, checkMilestones, updatePlayer } = useVideoAnalytics(isLive)

  useEffect(() => {
    const { player, completedAllMilestones } = analyticsState
    const track = (milestoneReached) => {
      sendTracking({ milestone: milestoneReached, ...player?.target?.playerInfo?.videoData, isLive })
    }

    if (isLive && player?.data === youtubeEvents.playing) {
      checkMilestones({ track, event: videoEvents.playing })
    }
    if (player?.data === youtubeEvents.ended) {
      checkMilestones({ track, event: videoEvents.finished })
    }
    if (!isLive && !completedAllMilestones && player?.data === youtubeEvents.playing) {
      clearInterval(interval)
      interval = setInterval(() => {
        const currentTime = player.target.getCurrentTime()
        const duration = player.target.getDuration()
        checkMilestones({ currentTime, duration, track, event: videoEvents.playing })
      }, 1000)
    } else {
      clearInterval(interval)
    }
  }, [analyticsState, checkMilestones, isLive])
  return updatePlayer
}
