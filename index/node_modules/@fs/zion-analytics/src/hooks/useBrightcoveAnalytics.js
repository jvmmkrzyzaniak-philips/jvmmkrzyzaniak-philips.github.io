import { useCallback, useEffect } from 'react'
import zionDebug from '@fs/zion-debug'
import { trackVideo } from '../helpers'
import useVideoAnalytics, { videoEvents } from './useVideoAnalytics'

const debug = zionDebug('analytics:video:brightcove')

const milestonesDisplay = {
  0: 'Started',
  0.25: '25%',
  0.5: '50%',
  0.75: '75%',
  1: 'Finished',
}
function sendTracking({ milestone, id, name }) {
  debug('milestone tracked:', milestone)
  trackVideo({
    video_type: 'brightcove',
    milestone_hit: milestonesDisplay[milestone],
    video_id: id,
    Video_title: name,
  })
}

export default function useBrightcoveAnalytics(isLive) {
  const { analyticsState, checkMilestones, updatePlayer } = useVideoAnalytics(isLive)

  const onSuccess = useCallback(
    (success) => {
      updatePlayer(success?.ref)
    },
    [updatePlayer]
  )

  useEffect(() => {
    const { player } = analyticsState
    if (player && !analyticsState.completedAllMilestones) {
      const eventHandler = (event) => {
        const currentPlayer = typeof event.target.player === 'function' ? event.target.player() : event.target.player
        if (isLive) {
          const track = (milestoneReached) => {
            sendTracking({ milestone: milestoneReached, ...currentPlayer.mediainfo })
          }
          checkMilestones({ track, event: videoEvents.playing })
        } else {
          // cache_ is the only place current time is held. Feb 3 2022
          // eslint-disable-next-line no-underscore-dangle
          const currentTime = currentPlayer?.cache_?.currentTime
          if (currentTime) {
            const track = (milestoneReached) => {
              sendTracking({ milestone: milestoneReached, ...currentPlayer.mediainfo })
            }
            const { duration } = currentPlayer.mediainfo
            checkMilestones({ currentTime, duration, track, event: videoEvents.playing })
          }
        }
      }
      player.off('play')
      player.off('ended')
      player.off('timeupdate')
      if (!isLive) {
        player.on('timeupdate', eventHandler)
      }
      player.on('play', eventHandler)
      player.on('ended', (event) => {
        const track = (milestoneReached) => {
          sendTracking({ milestone: milestoneReached, ...event.target.player.mediainfo })
        }
        checkMilestones({ track, event: videoEvents.finished })
      })
    } else if (player) {
      player.off('play')
      player.off('timeupdate')
      player.off('ended')
    }
  }, [analyticsState, checkMilestones, isLive])

  return onSuccess
}
