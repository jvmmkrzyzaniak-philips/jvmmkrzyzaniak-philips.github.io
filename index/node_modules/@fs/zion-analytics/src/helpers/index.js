/* eslint-disable no-underscore-dangle -- Adobe requires _satellite */
import { getFeatureFlag } from '@fs/zion-flags'
import { i18n } from '@fs/zion-locale'
import PropTypes from 'prop-types'
import { appName, reactScriptsVersion, targetEnv, zionUiVersion } from '@fs/zion-config'
import zionDebug from '@fs/zion-debug'

const debug = zionDebug('analytics')

const hasWindow = typeof window !== 'undefined'
const hasDocument = typeof document !== 'undefined'
// this gets set when calling `mergeWithDefaults` (which gets called by the page view hooks), then it gets used in a link event
let link_page = ''

const failureDebugMessage = (event) => {
  let message = `Failed trying to send a ${event} event`
  if (!window._satellite) {
    message += '\nThe _satellite library has not loaded'
  }
  debug(message)
}

/**
 *
 * The only way to enable analytics on localhost is to set the flag
 * treatment to "localEnabled" at localhost:5006?showFlags or with dev.flags.js
 *
 */
export function isFlagOn(flagName, env = 'local') {
  const flag = getFeatureFlag(flagName)

  // Check treatment of 'on' until FRONTIER-1435 is fixed
  return env === 'local' ? flag?.treatment === 'localEnabled' : flag?.treatment === 'on'
}

let retries = 0
function track(type, data, errorText) {
  if (!isFlagOn('shared_analytics', targetEnv)) {
    debug(`Tried sending an ${type}:`, data)
    debug(`Analytics disabled. Turn on shared_analytics flag to enable.`)
    return
  }
  debug(`Sending an ${type}:`, data)
  const limit = 5
  const interval = 1000
  if (hasWindow && window._satellite) {
    retries = 0
    hasWindow && window._satellite.track(type, data)
  } else if (retries <= limit) {
    retries += 1
    debug('no _satellite, retrying', retries)
    setTimeout(() => {
      track(type, data, errorText)
    }, interval)
  } else {
    debug(`No _satellite, tried ${limit + 1} times, cancelling ${type}`)
    failureDebugMessage(errorText)
  }
}

/**
 * Sends event data. Used in trackLink and trackEvent and trackVideo.
 * @param {object} trackingData data to send to analytics
 */
const sendLink = (trackingData) => {
  track('event', trackingData, 'EVENT')
}

/**
 * Sends page view event data to analytics.
 * @param {object} viewData data to send to analytics
 */
const sendView = (viewData) => {
  track('page_view', viewData, 'PAGE VIEW')
}

/**
 * Checks if we are eligible to send analytics, and if we are, send it.
 * If not, then retry x number of times, x milliseconds apart.
 * @param {object} pageData data to send
 */
export function checkAndSend(pageData) {
  sendView(pageData)
}

/**
 * Loads the analytics library. This should only happen once.
 */
export const loadAnalytics = () => {
  const analyticsOn = isFlagOn('shared_analytics', targetEnv)
  const adobeLaunchStageOn = isFlagOn('shared_analytics_adobeLaunchStaging', targetEnv)
  if (analyticsOn && hasDocument) {
    const url = adobeLaunchStageOn
      ? '//assets.adobedtm.com/05064fe6cab0/c247cd0acad1/launch-19b3d37a2b87-staging.min.js'
      : '//assets.adobedtm.com/05064fe6cab0/c247cd0acad1/launch-7e623b6eec86.min.js'
    const el = document.createElement('script')
    el.src = url
    el.onload = () => {
      debug('Analytics loaded!')
    }
    el.type = `text/javascript`
    el.async = true
    const firstScriptTag = document.getElementsByTagName('script')[0]
    firstScriptTag.parentNode.insertBefore(el, firstScriptTag)
  }
}

/**
 * Sends a link event to Adobe.
 * @param {Object} options The data to add to the payload
 * @property {string} options.to The href that the link goes to
 * @property {string} options.name The name of the link, please follow the standard `COMPONENT:LABEL:ACTION`. To clarify, `COMPONENT` could be the technical name of the component (e.g. ZionForm) but it may be better to use a name that XMs can understand (e.g Form).
 * @property {string} options.action The type of action; defaults to `click_action`.
 */
export function trackLink(options, ...rest) {
  let href
  let event_name = 'click_action'
  let link_name
  if (rest.length) {
    href = rest[0]
    event_name = rest[1] || event_name
    link_name = rest[2]
  } else if (options.target) {
    href = options.target.href
    link_name = options.target.dataset.linkName
  } else {
    href = options.to
    link_name = options.name
    event_name = options.action || event_name
  }

  const trackingData = {
    event_name,
    link_app: appName,
    link_page,
    link_name,
    link_obj: { href },
  }

  sendLink(trackingData)
}

/**
 * Sends a custom event, not as specific as trackLink
 * @param {object} dataObject data to send
 */
export function trackEvent(dataObject) {
  const data = {
    link_app: appName,
    link_page,
    ...dataObject,
  }
  debug('trackEvent Called, data sent:', data)
  sendLink(data)
}
trackEvent.propTypes = {
  dataObject: PropTypes.shape({
    event_name: PropTypes.string,
  }),
}

/**
 * combines default and additional data
 * @param {Object} initData data to initialize the page view object with; usually just the page_detail
 * @returns a new object with the default and init data
 */
export function mergeWithDefaults(initData = {}) {
  const pageViewDefaults = {
    site_id: 'FamilySearch',
    site_language: i18n.language,
    page_channel: appName,
    zionUiVersion,
    reactScriptsVersion,
  }
  if (initData.page_detail) link_page = initData.page_detail
  return { ...pageViewDefaults, ...initData }
}

export function trackVideo(trackingData) {
  const trackingDataObject = { link_app: appName, link_page, event_type: 'video', ...trackingData }
  sendLink(trackingDataObject)
}
