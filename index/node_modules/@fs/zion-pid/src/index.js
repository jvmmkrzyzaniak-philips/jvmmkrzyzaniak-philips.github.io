// JEncoded ID reference: https://icseng.atlassian.net/wiki/spaces/Product/pages/133595450/JEncoded+Ids

// Character list reference: https://github.com/fs-eng/tf/blob/8dd7c90b693f6a4d35707cf5d853ceebfad9f79f/persistence/src/main/java/org/familysearch/persistence/util/PersistenceUtil.java
const pidAlphabet = 'M9S3Q7W4HCZ8D6XFNJVK2LGP5RTYB1'
const pidAlphabetLetters = 'MSQWHCZDXFNJVKLGPRTYB'
const lookAheadPIDAssertion = `(?=.*[${pidAlphabetLetters}])`

// NOTE: This code will need to be made more intelligent once the number of ID's used in the tree spills over to require additional digits
// Exported to allow use inline, such as in routing
export const pidRegexStr = `[${pidAlphabet}]{4}-[${pidAlphabet}]{3,4}`
/**
 * We are giving this option so if the pid or date range is all numbers they can choose how they want to handle it.
 * This will only match if there is at least one letter in the pid.
 * https://fhjira.churchofjesuschrist.org/browse/TW-7413 - we do have pids that are all numbers
 *  */
export const pidWithoutDatesRegexStr = `${lookAheadPIDAssertion}${pidRegexStr}`
export const llsPidRegexStr = `[0-9]:[0-9]:[${pidAlphabet}]{4}-[${pidAlphabet}]{3,4}`

const isValidPidRegex = new RegExp(`^${pidRegexStr}$`)
const isValidLLSPidRegex = new RegExp(`^${llsPidRegexStr}$`)
/**
 * Check a string to see if it is a correctly formatted pid.
 * @param {string} pid - the string we want to evaluate
 * @returns {boolean} - true if the pid is of a valid format
 *
 * @example // take user input and check to see if it is a pid
 * const onChange = (evt) => {
 *   const pid = formatPid(evt.target.value)
 *   const isPid = isValidPid(pid)
 * }
 */
export function isValidPid(pid, lls) {
  const regex = lls ? isValidLLSPidRegex : isValidPidRegex
  return regex.test(pid)
}

/**
 * Coerce text to a pid-like format. Note that this does NOT indicate a valid pid.
 * @param {string} input - The raw text to manipulate.
 * @param {object} config - Optional: Extra configuration for how to format the resulting text.
 * @param {number} [config.characterLimit=9] - The maximum number of characters to return (including dashes).
 * @returns {string} - The formatted pid string.
 *
 * @example // Take user input and coerce it to be pid-like
 * const onChange = (evt) => {
 *   const pid = formatPid(evt.target.value, {characterLimit: 13})
 * }
 */
export function formatPid(input, config) {
  const endsWithHyphen = input.charAt(input.length - 1) === '-'

  // PIDs are currently limited to 9 characters (MMMM-MMMM)
  const characterLimit = config?.characterLimit || 9

  // Remove whitespace, then remove disallowed characters (including dashes), then re-add dashes every 4 characters, then uppercase
  let pid = input
    .replace(/ /g, '')
    .replace(new RegExp(`[^${pidAlphabet}]`, 'gi'), '')
    .replace(/(.{4})/g, '$1-')
    .toUpperCase()

  // Removing trailing dashes, unless explicitly added by user
  if (!endsWithHyphen) {
    pid = pid.replace(/-+$/g, '')
  }

  // Truncate anything past the character limit (9 by default)
  return pid.slice(0, characterLimit)
}
