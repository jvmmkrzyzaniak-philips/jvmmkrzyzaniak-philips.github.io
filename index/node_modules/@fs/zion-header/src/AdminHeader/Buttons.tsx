import type { ComponentProps, ElementType } from 'react'
import React, { Suspense, lazy } from 'react'
import { css, cx } from '@linaria/core'

import { useTranslation } from 'react-i18next'
import { trackLink } from '@fs/zion-analytics'
import { boolAttr } from '@fs/zion-frontend-friends'
import { useHelpOverlay } from '@fs/zion-help-overlay'
import { PlaceWorld, NoticeQuestion } from '@fs/zion-icon'
import { Avatar, ExpandableListItem, ListItem, MenuOverlay, colors, useOverlay } from '@fs/zion-ui'
import { type BaseButton, BaseIconButton, TextAndIconButton, TextButton } from '@fs/zion-ui/quarks-authorized-use-only'
import type { SimpleNavType, AdvancedNavType } from './types'

const blueButtonCss = css`
  background: transparent;
  color: ${colors.gray100};
  transition: background 0.5s;

  &[data-selected],
  &:hover,
  &:focus-visible {
    background: ${colors.transparent.blue03};
  }

  &:focus-visible {
    outline-color: ${colors.transparent.blue30} !important;
    outline-width: 3px;
    outline-offset: -1px;
    outline-style: solid;
  }

  &:active {
    background: ${colors.transparent.blue05};
  }
`

const navButtonCss = css`
  --icon-outside-margin: -3px !important;
  --icon-inside-margin: 4px !important;
  font-size: var(--text-size-a);
  padding: 7px 6px;
  margin: 4px -6px 0;
  border: 1px solid transparent;
  border-radius: 4px;
  text-transform: none !important;
  max-width: calc(100% + 17px); // Need to account for the negative margins

  [data-outlined]& {
    border: 1px solid ${colors.transparent.gray10};
    margin: 3px 0 0;
  }

  [data-fat]& {
    font-size: 16px;
    padding: 11px 10px;
    margin: 3px -10px 0;
  }

  [data-outlined][data-fat]& {
    margin: 3px 0 0;
    max-width: 100%;
  }
`

const userButtonCss = css`
  border: 0;
  border-radius: 100px;
  padding: 8px;
  margin: -5px;
  padding-inline-end: 12px;
  margin-inline-end: -12px;

  & > :first-child {
    display: inline-block;
    vertical-align: -7px;
    margin-inline-end: 4px;
  }
`

const iconButtonCss = css`
  --button-text-color: ${colors.gray100} !important; // BaseIconButton was overriding this color
  --button-hover-background: ${colors.transparent.blue03};
  --button-active-background: ${colors.transparent.blue05};
  --button-outline-color: ${colors.transparent.blue30};
  margin: -5px;
`

export const AdminHeaderButton = ({ children, ...props }): JSX.Element => (
  <TextAndIconButton className={cx(blueButtonCss, navButtonCss)} {...props} iconSize="xs">
    {children}
  </TextAndIconButton>
)

export const AdminHeaderIconButton = (
  props: Omit<ComponentProps<typeof BaseButton>, 'children'> & { Icon: ElementType; title: string }
): JSX.Element => <BaseIconButton {...props} emphasis="low" className={iconButtonCss} />

export const NavLink = ({ title, to, Icon, selected }: SimpleNavType): JSX.Element => (
  <AdminHeaderButton
    to={to}
    Icon={Icon}
    data-selected={boolAttr(selected)}
    aria-current={selected ? 'page' : undefined}
  >
    {title}
  </AdminHeaderButton>
)

export const NavMenu = ({ title, subnav, Icon }: AdvancedNavType): JSX.Element => {
  const subNavHasIcons = subnav.some((item) => item.Icon)
  return (
    <MenuOverlay menuButton={<AdminHeaderButton Icon={Icon}>{title}</AdminHeaderButton>}>
      {subnav.map(({ title: subnavTitle, Icon: SubnavIcon, ...item }) => (
        <ListItem
          key={subnavTitle + item.to}
          startElement={subNavHasIcons && (SubnavIcon ? <ListItem.Icon Icon={SubnavIcon} /> : <ListItem.Filler />)}
          primaryText={subnavTitle}
          {...item}
        />
      ))}
    </MenuOverlay>
  )
}

export const MobileNavLink = ({ title, Icon, ...props }: SimpleNavType): JSX.Element => (
  <ListItem startElement={Icon ? <ListItem.Icon Icon={Icon} /> : <ListItem.Filler />} primaryText={title} {...props} />
)

type MobileNavMenuProps = AdvancedNavType & {
  open: boolean
  setOpen: (open: boolean) => void
  avatarUrl?: string
  avatarMonogram?: string
}

export const MobileNavMenu = ({
  title,
  subnav,
  open,
  setOpen,
  avatarUrl,
  avatarMonogram,
}: MobileNavMenuProps): JSX.Element => (
  <ExpandableListItem
    primaryText={title}
    open={open}
    emphasized={Boolean(avatarUrl || avatarMonogram)}
    setOpen={setOpen}
    startElement={
      avatarUrl || avatarMonogram ? <ListItem.Avatar src={avatarUrl} monogram={avatarMonogram} /> : undefined
    }
  >
    {subnav.map((item) => (
      <MobileNavLink key={item.to} {...item} />
    ))}
  </ExpandableListItem>
)

type UserMenuProps = {
  name?: string
  portraitUrl?: string
  navLinks: SimpleNavType[]
  signInUrl?: string
}

export function LoginButton({ fat, signInUrl }: { fat?: boolean; signInUrl?: string }): JSX.Element {
  const { t } = useTranslation()

  return (
    <AdminHeaderButton
      onClick={() => {
        trackLink(null, signInUrl, 'click_action', 'lo_hdr19_sign_in')
        typeof window !== 'undefined' &&
          (window.location.href = `${signInUrl}?returnUrl=${encodeURIComponent(window.location.href)}`)
      }}
      data-outlined
      data-fat={boolAttr(fat)}
    >
      {t('common-ui:sign-in.action', 'Sign In')}
    </AdminHeaderButton>
  )
}

export function DesktopUserMenu({ name, portraitUrl, navLinks, signInUrl }: UserMenuProps): JSX.Element {
  if (!name) return <LoginButton signInUrl={signInUrl} />
  return (
    <MenuOverlay
      inline={false}
      menuButton={
        <TextButton text={name} className={cx(blueButtonCss, userButtonCss)}>
          <Avatar size="xs" src={portraitUrl} monogram={name[0]} /> {name}
        </TextButton>
      }
    >
      {navLinks.map(({ title, ...item }) => (
        <ListItem key={title + item.to} primaryText={title} {...item} />
      ))}
    </MenuOverlay>
  )
}

type MobileUserMenuProps = UserMenuProps & {
  open: boolean
  setOpen: (open: boolean) => void
}

export function MobileUserMenu({ name, portraitUrl, navLinks, open, setOpen }: MobileUserMenuProps): JSX.Element {
  if (!name) return null
  return (
    <MobileNavMenu
      title={name}
      subnav={navLinks}
      avatarUrl={portraitUrl}
      avatarMonogram={name[0]}
      open={open}
      setOpen={setOpen}
    />
  )
}

const LangPicker = lazy(() => import('@fs/zion-lang-picker'))

export function LangPickerButton({ additionalLangs }: { additionalLangs?: string[] }): JSX.Element {
  const overlay = useOverlay()
  const { t } = useTranslation()

  return (
    <>
      <AdminHeaderIconButton
        title={t('header.lang-picker.action', 'Select a Language')}
        Icon={PlaceWorld}
        onClick={overlay.handleClick}
      />
      <Suspense fallback={null}>
        {overlay.isOpen && <LangPicker overlay={overlay} additionalLangs={additionalLangs} />}
      </Suspense>
    </>
  )
}

export function HeaderHelpButton({ buttonProps }: { buttonProps?: ComponentProps<typeof BaseButton> }): JSX.Element {
  const { handleClick } = useHelpOverlay(window?.location?.href)
  const { t } = useTranslation()
  if (buttonProps === null) return null
  const props = buttonProps || { onClick: handleClick }
  return (
    <AdminHeaderIconButton
      title={t('nav.help', 'Help')}
      Icon={NoticeQuestion}
      target={props.to ? '_blank' : undefined}
      {...props}
    />
  )
}
