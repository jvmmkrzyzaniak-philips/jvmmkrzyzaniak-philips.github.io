import React, { useState, useEffect, useMemo, type ComponentProps } from 'react'
import { css } from '@linaria/core'

import { Link, useLocation } from '@fs/zion-router'
import { useTranslation } from 'react-i18next'
import { getProfilePortrait } from '@fs/zion-portrait-service'
import { LogoFamilysearch, Menu } from '@fs/zion-icon'
import {
  Cell,
  List,
  MarginBox,
  ModalInfoSheet,
  Paragraph,
  Row,
  colors,
  useContainerWidth,
  useInfoSheet,
} from '@fs/zion-ui'

import type { FeatureFlags, Flags } from '@fs/zion-flags'
import { useFeatureFlags } from '@fs/zion-flags'

import {
  AdminHeaderIconButton,
  DesktopUserMenu,
  HeaderHelpButton,
  LangPickerButton,
  LoginButton,
  MobileNavLink,
  MobileNavMenu,
  MobileUserMenu,
  NavLink,
  NavMenu,
} from './Buttons'
import { type AdvancedNavType, type NavType, type SimpleNavType } from './types'

type SignedInUser = {
  birthDate: string
  cisId: string
  contactName: string
  country: string
  cpUserId: string
  displayName: string
  email: string
  gender: 'MALE' | 'FEMALE' | 'UNKNOWN'
  helperPin?: string
  personId: string
  signedIn: true
  userLoading: false
}

type LoadingUser = {
  signedIn: boolean
  userLoading: true
}

type SignedOutUser = {
  signedIn: false
  userLoading: boolean
}

type User = SignedInUser | LoadingUser | SignedOutUser

const adminHeaderCss = css`
  background: ${colors.blue02};
  border-bottom: 1px solid ${colors.gray10};
`

const logoDividerCss = css`
  background: ${colors.transparent.gray60};
  width: 1px;
  height: 28px;
  border-radius: 2px;
`

const hasSubnav = (nav: NavType): nav is AdvancedNavType => Boolean((nav as AdvancedNavType).subnav)

const filterNavigation = (list: NavType[], permissions: string[], flags: FeatureFlags<Flags>): NavType[] => {
  return list
    .filter((nav) => {
      if (nav.permissions) {
        return nav.permissions.some((permission) => permissions.includes(permission))
      }
      return !nav.flag || (flags && flags[nav.flag]?.isOn)
    })
    .map((nav): NavType => {
      if (hasSubnav(nav)) {
        return {
          ...nav,
          subnav: filterNavigation(nav.subnav, permissions, flags) as SimpleNavType[],
        }
      }
      return nav
    })
}

const longestCommonPrefix = (a: string, b = ''): string => {
  let result = ''
  let temp = a
  while (temp.length) {
    if (b.startsWith(temp)) {
      if (temp.length > result.length) result = temp
      temp = ''
    }
    temp = temp.slice(0, -1)
  }

  temp = b
  while (temp.length) {
    if (a.startsWith(temp)) {
      temp = ''
      if (temp.length > result.length) result = temp
    }
    temp = temp.slice(0, -1)
  }

  return result
}

const getFlagsList = (nav: NavType[]): string[] =>
  Array.from(
    nav.reduce((flags, navItem) => {
      if (navItem.flag) flags.add(navItem.flag)
      if (hasSubnav(navItem)) getFlagsList(navItem.subnav).forEach((x) => flags.add(x))
      return flags
    }, new Set<string>())
  )

const getPermissionsList = (nav: NavType[]): string[] =>
  Array.from(
    nav.reduce((permissions, navItem) => {
      if (navItem.permissions) navItem.permissions.forEach((p) => permissions.add(p))
      if (hasSubnav(navItem)) {
        getPermissionsList(navItem.subnav).forEach((x) => permissions.add(x))
      }
      return permissions
    }, new Set<string>())
  )

type AdminHeaderProps = {
  /** The name of your Application. Will added next to the Logo */
  appName: string

  /** The URL of your Application. This will be used as the href on the AppName, next to the Logo. */
  baseUrl?: string

  /** The URL a user will be sent to (in a new tab) when they click the logo */
  logoUrl?: string

  /** A custom URL a user will be sent to when they click the sign in button */
  signInUrl?: string

  /** A custom URL a user will be sent to when they click the logout button */
  signOutUrl?: string

  /** A custom URL a user will be sent to after they click the logout button */
  signOutReturnUrl?: string

  /** The navigation to go next to your AppName on desktop, and in the Nav Drawer on mobile */
  nav?: NavType[]

  /** The navigation on the userMenuNav. Custom menu items can be added to this user navigation */
  userNav?: SimpleNavType[]

  /** You can define when the mobile drawer should be shown, and when to show the nav in the header. */
  mobileDrawerBreakpoint?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'

  /** Normally, the help button will open the HelpOverlay. But if your app needs users to go elsewhere
   * for help with your app (like confluence), use this property.
   *
   * **NOTE:** You can also pass `null` to this property to remove the help button.
   */
  helpButtonProps?: ComponentProps<typeof HeaderHelpButton> | null

  /** An array of additional language codes to add to the language picker */
  additionalLangs?: string[]

  /** If your nav array contains permissions, you can pass a function here that will be used to
   * determine which nav-items to show for which permissions.
   */
  getPermission?: (permission: string) => boolean

  /**
   * If you need to put any custom content in the header, you can pass a component here.
   *
   * When `mobile` is true, your custom content will be rendered at the bottom of the nav drawer
   *
   * When `mobile` is false, your custom content will be rendered inside the header, next to the
   * lang-picker.
   */
  CustomContent?: (props: { isMobile: boolean }) => JSX.Element

  /** The user object. This will be generated for you when you consume this inside of AdminRoot */
  user: User
}

const alwaysTrue = (): boolean => true
const Nothing = (): JSX.Element => null

/**
 * ### An alternative header, to be used **ONLY** for internal (non-patron-facing) use.
 *
 * AdminHeader is much more configurable than the patron-facing Header. It is meant to be
 * visually different from the patron-facing Header, helping its users understand that
 * they are working inside an app that isn't available to everyone.
 */
export default function AdminHeader({
  appName,
  baseUrl,
  logoUrl,
  signOutReturnUrl,
  helpButtonProps,
  additionalLangs,
  getPermission = alwaysTrue,
  nav = [],
  userNav = [],
  mobileDrawerBreakpoint = 'md',
  CustomContent = Nothing,
  user,
  signInUrl = '/auth/familysearch/login',
  signOutUrl = '/auth/logout',
}: AdminHeaderProps): JSX.Element {
  const isLargeDevice = useContainerWidth()({ [mobileDrawerBreakpoint]: true })
  const Wrapper = isLargeDevice ? LargeNav : SmallNav
  const permissionList = getPermissionsList(nav).filter(getPermission)
  const flags = useFeatureFlags(getFlagsList(nav))
  const filteredNav = filterNavigation(nav, permissionList, flags)

  const { cisId = null } = user as SignedInUser
  const [portraitThumb, setPortraitThumb] = useState<string>()
  useEffect(() => {
    if (cisId) getProfilePortrait(cisId).then(({ avatarUrl }) => setPortraitThumb(avatarUrl))
  }, [cisId])

  const [t] = useTranslation()

  const currentPath = useLocation().pathname
  const updatedNav = useMemo(() => {
    const substringsOfCurrentUrl = filteredNav.map((navItem) =>
      longestCommonPrefix(currentPath, (navItem as SimpleNavType).to)
    )
    const bestMatch = substringsOfCurrentUrl.reduce(
      ([bestOne, bestId], currentOne, currentId) =>
        currentOne.length > bestOne.length ? [currentOne, currentId] : [bestOne, bestId],
      ['/', -1] as [string, number]
    )
    return filteredNav.map((item, i) => (i === bestMatch[1] ? { ...item, selected: true } : item))
  }, [filteredNav, currentPath])

  const appNameLink = baseUrl ? (
    <Link to={baseUrl} noLinkStyles style={{ color: 'currentcolor' }}>
      {appName}
    </Link>
  ) : (
    appName
  )

  const logo = <LogoFamilysearch size="md" noShrinkX />
  const logoLink = logoUrl ? (
    <Link to={logoUrl} noLinkStyles style={{ color: 'currentcolor' }} target="_blank">
      {logo}
    </Link>
  ) : (
    logo
  )

  return (
    <MarginBox marginX="xs" marginY="xxs" className={adminHeaderCss}>
      <Row gutters="xxs" alignY="middle">
        {logoLink}
        <div className={logoDividerCss} noShrinkX />
        <Paragraph size="sm" noShrinkX>
          <strong>{appNameLink}</strong>
        </Paragraph>
        <Cell growX={!isLargeDevice}>&nbsp;</Cell>
        <Wrapper
          nav={updatedNav}
          helpButtonProps={helpButtonProps}
          additionalLangs={additionalLangs}
          growX={isLargeDevice}
          name={user.signedIn && !user.userLoading && (user as SignedInUser).displayName}
          portraitUrl={portraitThumb}
          userMenuNav={[
            {
              title: t('nav.settings', 'Settings'),
              to: '/identity/settings/profile',
              external: true,
              target: '_blank',
            },
            ...userNav,
            {
              title: t('account.sign-out.action', 'Sign Out'),
              to: `${signOutUrl}${signOutReturnUrl ? `?returnUrl=${signOutReturnUrl}` : ''}`,
              external: true,
            },
          ]}
          CustomContent={CustomContent}
          signInUrl={signInUrl}
        />
      </Row>
    </MarginBox>
  )
}

type NavState = {
  currentOpen: number | null
  states: boolean[]
}

type NavAction = number

const mobileNavReducer = (state: NavState, id: NavAction): NavState => {
  const { currentOpen, states } = state
  const newStates = [...states]
  newStates[currentOpen] = false
  if (id !== currentOpen) newStates[id] = true

  return {
    currentOpen: id === currentOpen ? null : id,
    states: newStates,
  }
}

type NavProps = {
  nav: NavType[]
  name?: string
  helpButtonProps?: ComponentProps<typeof HeaderHelpButton> | null
  additionalLangs?: string[]
  portraitUrl?: string
  userMenuNav?: SimpleNavType[]
  CustomContent: (props: { isMobile?: boolean }) => JSX.Element
  signInUrl: string
}

function SmallNav({
  nav,
  name,
  portraitUrl,
  helpButtonProps,
  additionalLangs,
  CustomContent,
  userMenuNav = [],
  signInUrl,
}: NavProps): JSX.Element {
  const infoSheet = useInfoSheet()
  const [state, dispatch] = React.useReducer(mobileNavReducer, {
    currentOpen: null,
    states: [...nav.map(() => false), false],
  })
  const modifiedNavMenu = userMenuNav.map((item) => ({ ...item, onClick: infoSheet.close }))
  return (
    <>
      <Row gutters="nano">
        <LangPickerButton additionalLangs={additionalLangs} />
        <HeaderHelpButton buttonProps={helpButtonProps} />
        <AdminHeaderIconButton Icon={Menu} title="Open Menu" onClick={infoSheet.handleClick} />
      </Row>
      <ModalInfoSheet
        {...infoSheet}
        size="sm"
        title={(name ? `\u{00A0}` : <LoginButton fat signInUrl={signInUrl} />) as string}
      >
        <List>
          <MobileUserMenu
            name={name}
            portraitUrl={portraitUrl}
            open={state.states[state.states.length - 1]}
            setOpen={() => dispatch(state.states.length - 1)}
            navLinks={modifiedNavMenu}
          />
          {nav.map((navItem, i) =>
            hasSubnav(navItem) ? (
              <MobileNavMenu
                key={navItem.title.toString()}
                {...navItem}
                open={state.states[i]}
                setOpen={() => dispatch(i)}
              />
            ) : (
              <MobileNavLink key={navItem.to} {...navItem} onClick={infoSheet.close} />
            )
          )}
          <CustomContent isMobile />
        </List>
      </ModalInfoSheet>
    </>
  )
}

function LargeNav({
  nav,
  name,
  portraitUrl,
  helpButtonProps,
  additionalLangs,
  CustomContent,
  userMenuNav = [],
  signInUrl,
}: NavProps): JSX.Element {
  return (
    <Row gutters="xs" alignY="middle">
      {nav.map((navItem, i) =>
        hasSubnav(navItem) ? (
          <NavMenu key={navItem.title.toString()} {...navItem} growX={i === nav.length - 1} />
        ) : (
          <NavLink key={navItem.to} {...navItem} growX={i === nav.length - 1} />
        )
      )}
      {nav.length === 0 && <Cell growX>&nbsp;</Cell>}
      <Row gutters="xxs" alignItemsY="middle">
        <CustomContent />
        <HeaderHelpButton buttonProps={helpButtonProps} />
        <LangPickerButton additionalLangs={additionalLangs} />
        <DesktopUserMenu name={name} portraitUrl={portraitUrl} navLinks={userMenuNav} signInUrl={signInUrl} />
      </Row>
    </Row>
  )
}
