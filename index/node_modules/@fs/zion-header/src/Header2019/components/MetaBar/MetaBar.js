import React, { lazy, Suspense } from 'react'
import { css } from '@linaria/core'
import { useTranslation } from 'react-i18next'
import { useCanAddPersonalData } from '@fs/zion-permissions'
import { getNotificationSummaries } from '@fs/zion-messages'
import useShowArabicExperience from '../../hooks/useShowArabicExperience'
import { ThreadSummariesProvider } from '../Header2019WithData/ThreadSummariesProvider'

const HeaderChatButton = lazy(() => import('../HeaderChatButton/HeaderChatButton'))
const UserDesktop = lazy(() => import('../UserDesktop/UserDesktop'))
const MobileDrawerButtonCombo = lazy(() => import('../MobileDrawer/MobileDrawerButtonCombo'))
const LocationIconButton = lazy(() => import('./LocationIconButton'))
const Notifications = lazy(() => import('../Notifications/Notifications'))
const HeaderHelpButton = lazy(() => import('../HeaderHelpButton/HeaderHelpButton'))
const LanguagePicker = lazy(() => import('./LanguagePicker'))
const AuthAccount = lazy(() => import('../AuthAccount/AuthAccount'))

const metaStyle = css`
  display: flex;
  align-items: center;
  position: relative;
  top: 6px;
  &[break='mobile'] {
    top: 0;
  }
`

const verticalSpacerCss = css`
  width: 8px;
`

export function UserDesktopSkeletonContent() {
  const userStyle = {
    width: 174,
    height: 62,
  }
  return <div style={userStyle} />
}

function UserOrAuth({ signedIn, breakMode, ...props }) {
  return signedIn ? (
    <Suspense fallback={<UserDesktopSkeletonContent />}>
      <UserDesktop {...props} breakMode={breakMode} />
    </Suspense>
  ) : (
    <>
      <div className={verticalSpacerCss} />
      <AuthAccount />
    </>
  )
}

export default function MetaBar({
  signedIn,
  notificationCount,
  lastNotificationTime,
  profileName,
  portraitUrl,
  activeRole,
  adminRoles,
  breakMode,
  signOutReturnUrl,
  showFHCLocations = true,
  showHelpOverlay = true,
  showMobileDrawer = true,
  showUserOrAuth = true,
  showNavLinksMobile = true,
  showChat = true,
  redirectNotifications = false,
  external = false,
}) {
  const { t } = useTranslation()
  const showArabicExperience = useShowArabicExperience()
  // Users in Russia do not have access to chats and notifications
  const [isAuthorized] = useCanAddPersonalData()
  return (
    <div className={metaStyle} break={breakMode}>
      <Suspense fallback="">
        {showFHCLocations && !showArabicExperience && (
          <LocationIconButton linkName={`${signedIn ? 'li' : 'lo'}_hdr_locator`} external={external} />
        )}
        <LanguagePicker />
        {showHelpOverlay && (
          <HeaderHelpButton linkName={`${signedIn ? 'li' : 'lo'}_hdr9_help`} aria-label={t('nav.help', 'Help')} />
        )}
        {signedIn && isAuthorized && (
          <>
            {showChat && (
              <Suspense fallback="">
                <HeaderChatButton />
              </Suspense>
            )}
            <ThreadSummariesProvider serviceFunction={getNotificationSummaries}>
              <Notifications
                lastNotificationTime={lastNotificationTime}
                notificationCount={notificationCount}
                redirectNotifications={redirectNotifications}
                external={external}
              />
            </ThreadSummariesProvider>
          </>
        )}

        {showMobileDrawer && (
          <MobileDrawerButtonCombo
            signedIn={signedIn}
            profileName={profileName}
            portraitUrl={portraitUrl}
            activeRole={activeRole}
            adminRoles={adminRoles}
            signOutReturnUrl={signOutReturnUrl}
            showNavLinksMobile={showNavLinksMobile}
            breakMode={breakMode}
          />
        )}

        {showUserOrAuth && breakMode !== 'mobile' && (
          <UserOrAuth
            signedIn={signedIn}
            profileName={profileName}
            portraitUrl={portraitUrl}
            activeRole={activeRole}
            adminRoles={adminRoles}
            breakMode={breakMode}
            signOutReturnUrl={signOutReturnUrl}
            external={external}
          />
        )}
      </Suspense>
    </div>
  )
}
