import React, { createContext, useContext, useMemo } from 'react'
import { useFeatureFlag } from '@fs/zion-flags'
import useAccountLinks from '../../../hooks/useLinks/useAccountLinks'
import useLinks from '../../../hooks/useLinks'
import useDynamicNavigation from './useDynamicNavigation'

const NavigationContext = createContext()

export const useNavigationContext = () => {
  const context = useContext(NavigationContext)
  if (!context) {
    throw new Error('useNavigationContext must be used within a NavigationProvider')
  }
  return context
}

export default function NavigationProvider({ children, canSeeTemple, nonReligiousMode, restrictedTemple }) {
  const { isOn: dynamicLinksOn } = useFeatureFlag('home_header_neverProdDynamicLinksPrototype')

  const originalHeaderNavigation = useLinks({ canSeeTemple, nonReligiousMode, restrictedTemple })
  const originalAccountNavigation = useAccountLinks()

  const {
    headerNavigation: dynamicHeaderNavigation,
    accountNavigation: dynamicAccountNavigation,
    isLoading,
    isError,
  } = useDynamicNavigation(dynamicLinksOn)

  const headerNavigation = dynamicLinksOn ? dynamicHeaderNavigation : originalHeaderNavigation
  const accountNavigation = dynamicLinksOn ? dynamicAccountNavigation : originalAccountNavigation

  // This can be removed once the flag is no longer used. (Then isLoading from useDynamicNavigation will map to isLoading in the `value` variable below.)
  // This is here for when the flag is toggled on and off
  const dynamicNavigationReady = dynamicLinksOn && dynamicHeaderNavigation && !isLoading

  const value = useMemo(
    () => ({
      dynamicLinksOn,
      headerNavigation,
      accountNavigation,
      isLoading: !dynamicLinksOn ? false : !dynamicNavigationReady,
      isError,
    }),
    [dynamicLinksOn, headerNavigation, accountNavigation, dynamicNavigationReady, isError]
  )

  return <NavigationContext.Provider value={value}>{children}</NavigationContext.Provider>
}
