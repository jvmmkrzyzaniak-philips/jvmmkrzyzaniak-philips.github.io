import React, { useState, useCallback, createContext, useContext } from 'react'

const pageSize = 6

const ThreadSummariesContext = createContext()

export const ThreadSummariesProvider = ({ serviceFunction, children }) => {
  const value = useLoadThreadSummaries(serviceFunction)
  return <ThreadSummariesContext.Provider value={value}>{children}</ThreadSummariesContext.Provider>
}

export default function useThreadSummaries() {
  return useContext(ThreadSummariesContext)
}

export function useLoadThreadSummaries(serviceFunction) {
  const [userThreadSummaries, setUserThreadSummaries] = useState([])
  const [error, setError] = useState()
  const [pageData, setPageData] = useState({ pageNumber: -1 })
  const [canLoadMore, setCanLoadMore] = useState(true)
  const [getter] = useState({ serviceFunction })
  const [initialized, setInitialized] = useState(false)
  const [loading, setLoading] = useState(false)

  const getNextPage = useCallback(
    ({ page }) => {
      if (getter.serviceFunction) {
        return getter.serviceFunction({ pageSize, page })
      }
      return null
    },
    [getter]
  )

  const loadMoreThreadSummaries = useCallback(
    () =>
      new Promise((resolve, reject) => {
        const load = async () => {
          const { pageNumber } = pageData

          try {
            const { userThreadSummaries: threadSummaries, page } = await getNextPage({
              page: pageNumber + 1,
            })

            setPageData(page)
            if (threadSummaries) {
              setUserThreadSummaries((old) => [...old, ...threadSummaries])
            }
            if (page.pageNumber + 1 >= page.totalPages) {
              setCanLoadMore(false)
            }

            resolve(page.pageNumber + 1 < page.totalPages)
            setLoading(false)
          } catch (e) {
            setError(e)
            reject(e)
          }
        }

        load()
      }),
    [getNextPage, pageData]
  )

  const loadInitialContent = useCallback(async () => {
    if (!initialized) {
      setLoading(true)
      await loadMoreThreadSummaries()
      setInitialized(true)
    }
  }, [initialized, loadMoreThreadSummaries])

  return {
    userThreadSummaries,
    initialized,
    error,
    loading,
    loadMoreThreadSummaries,
    canLoadMore,
    loadInitialContent,
  }
}
