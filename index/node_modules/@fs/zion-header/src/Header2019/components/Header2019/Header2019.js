import React, { lazy, Suspense, useRef, useEffect, useState } from 'react'
import PropTypes from 'prop-types'
import { boolAttr } from '@fs/zion-frontend-friends'
import { css } from '@linaria/core'
import Elevation from '@fs/zion-ui/elevation'
import { colors } from '@fs/zion-ui'
import { i18n } from '@fs/zion-locale'
import { useHeaderBreakString } from './useHeaderBreakString'
import useShowArabicExperience from '../../hooks/useShowArabicExperience'

import FSLogo from '../FSLogo/FSLogo'
import MetaBar from '../MetaBar/MetaBar'

const NavLinksDesktop = lazy(() => import('../NavLinksDesktop/NavLinksDesktop'))
const AlertBanner = lazy(() => import('@fs/zion-ui/alert-banner'))

const shadowCss = css`
  border-bottom: 1px solid ${colors.gray10};
  z-index: 2;
  &[sticky] {
    z-index: 2;
    position: sticky;
    top: -60px;
  }
`

const headerStyle = css`
  display: flex;
  justify-content: space-between;
  min-height: 60px;
  padding: 0 24px;
  &[break='tablet'] {
    padding: 0 12px;
  }
  &[break='mobile'] {
    padding: 0 2px 0 12px;
    [dir='rtl'] & {
      padding: 0 12px 0 2px;
    }
  }
  align-items: center;
  background: ${colors.gray00};
`
const headerNavGroupStyle = css`
  display: flex;
  margin-bottom: 1px;
  justify-content: flex-start;
  align-items: center;
`

const metaBarStyle = css`
  display: flex;
  justify-content: flex-end;
`

export const useHeaderHeight = (headerRef) => {
  const [headerHeight, setHeaderHeight] = useState(-1)
  useEffect(() => {
    const element = headerRef.current
    setHeaderHeight(element.offsetHeight + element.offsetTop)
  }, [headerRef])
  return headerHeight
}

export default function Header2019({
  profileName,
  signedIn,
  notificationCount,
  lastNotificationTime,
  portraitUrl,
  activeRole,
  adminRoles,
  alertBannerProps,
  headerHeightCallback,
  signOutReturnUrl,
  useBaseUrl = false,
  showFHCLocations = true,
  showHelpOverlay = true,
  showMobileDrawer = true,
  showNavLinksDesktop = true,
  showNavLinksMobile = true,
  showUserOrAuth = true,
  showChat = true,
  redirectNotifications = false,
  external = false,
}) {
  const ref = useRef(null)
  const headerHeight = useHeaderHeight(ref)

  const leftSectionRef = useRef(null)
  const rightSectionRef = useRef(null)

  const dir = i18n.dir()
  const breakString = useHeaderBreakString({ headerRef: ref, leftSectionRef, rightSectionRef, signedIn })

  const showArabicExperience = useShowArabicExperience()

  useEffect(() => {
    headerHeightCallback?.(headerHeight)
  }, [headerHeight, headerHeightCallback])

  const returnUrl = signOutReturnUrl ? `?returnUrl=${encodeURI(signOutReturnUrl)}` : ''

  return (
    <Elevation
      className={shadowCss}
      z={0}
      sticky={boolAttr(!breakString === 'mobile' && alertBannerProps?.open)}
      ref={ref}
    >
      {/* At some point, Header will need to handle adding AlertBanners above the header. */}
      {/* {alertBannerProps && alertBannerProps.position === 'above' && <AlertBanner {...alertBannerProps} />} */}
      <header className={headerStyle} break={breakString}>
        <div className={headerNavGroupStyle} ref={dir === 'ltr' ? leftSectionRef : rightSectionRef}>
          <FSLogo breakMode={breakString} signedIn={signedIn} useBaseUrl={useBaseUrl} />
          {!showArabicExperience && showNavLinksDesktop && breakString !== 'mobile' && (
            <Suspense fallback={<div />}>
              <NavLinksDesktop external={external} />
            </Suspense>
          )}
        </div>
        <div ref={dir === 'ltr' ? rightSectionRef : leftSectionRef}>
          <MetaBar
            className={metaBarStyle}
            profileName={profileName}
            notificationCount={notificationCount}
            lastNotificationTime={lastNotificationTime}
            signedIn={signedIn}
            portraitUrl={portraitUrl}
            activeRole={activeRole}
            adminRoles={adminRoles}
            breakMode={breakString}
            signOutReturnUrl={returnUrl}
            showFHCLocations={showFHCLocations}
            showHelpOverlay={showHelpOverlay}
            showMobileDrawer={showMobileDrawer}
            showUserOrAuth={showUserOrAuth}
            showNavLinksMobile={showNavLinksMobile}
            showChat={showChat}
            redirectNotifications={redirectNotifications}
            external={external}
          />
        </div>
      </header>
      {alertBannerProps && <AlertBanner {...alertBannerProps} />}
    </Elevation>
  )
}

Header2019.propTypes = {
  profileName: PropTypes.string,
  canSeeTemple: PropTypes.bool,
  signedIn: PropTypes.bool,
  notificationCount: PropTypes.number,
  lastNotificationTime: PropTypes.number,
  portraitUrl: PropTypes.string,
  activeRole: PropTypes.string,
  adminRoles: PropTypes.arrayOf(PropTypes.shape),
  alertBannerProps: PropTypes.shape({
    message: PropTypes.string.isRequired,
    confirmText: PropTypes.string,
    dismissText: PropTypes.string,
    onConfirm: PropTypes.func,
    onDismiss: PropTypes.func,
    type: PropTypes.oneOf(['warning', 'error', 'maintenance', 'info']),
  }),
  headerHeightCallback: PropTypes.func,
  /** Remove the chat button from the header */
  showChat: PropTypes.bool,
  /** If you want to return to a custom page that is not the home page. */
  signOutReturnUrl: PropTypes.string,
}
