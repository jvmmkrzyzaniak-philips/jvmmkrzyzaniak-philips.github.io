import React, { Suspense } from 'react'
import { baseUrl } from '@fs/zion-config'
import { Avatar, ListItem, MenuOverlay, fonts, useOverlay, Divider, colors, useTheme, Theme } from '@fs/zion-ui'
import { TextButton } from '@fs/zion-ui/quarks-authorized-use-only'
import { css } from '@linaria/core'
import debugLib from '@fs/zion-debug'
import { useTranslation } from 'react-i18next'
import { trackLink } from '@fs/zion-analytics'
import useShowHelpOthers from '../dataHooks/useShowHelpOthers'
import useFamilySearchCenterAdmin from '../dataHooks/useFamilySearchCenterAdmin'
import { useNavigationContext } from '../shared/NavigationProvider/NavigationProvider'

const HelperDialog = React.lazy(() => import('../shared/HelperDialogIntermediate'))

const debug = debugLib('header2019:UserDesktop')

const accountButtonContainer = css`
  background-color: transparent;
  border: 0px solid transparent;
  padding: 5px 8px;
  margin: 0 2px 6px;
  padding: 6px 2px 2px 6px;
  &:focus-visible {
    outline: 3px solid #316f8d;
    border-radius: 4px;
  }
`

// > div {} changes avatar size to correct overlay position
// !important is needed for text-transform due to upppercase styling from TextButton
// Nested div styling needed due to inline-block styling from TextButton
const accountButtonStyle = css`
  display: flex;
  gap: 10px;
  align-items: center;
  background-color: transparent;
  border-radius: 4px;
  font-family: ${fonts.body};
  font-size: 14px;
  line-height: 32px;
  text-transform: none !important;
  white-space: nowrap;
  max-width: 285px;
  margin-right: 0;
`

const usernameCss = css`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 131px;

  [lang|='zh'] &,
  [lang|='zh-hans'] &,
  [lang|='ja'] &,
  [lang|='ko'] & {
    font-size: 16px;
  }
`

const assignmentLabelStyle = css`
  font-weight: bold;
  font-size: 0.75em;
  margin-right: 1em;
  top: -0.1em;
`

export default function UserDesktop({
  profileName = '',
  portraitUrl,
  activeRole,
  adminRoles = [],
  breakMode,
  signOutReturnUrl,
  external,
}) {
  const { t } = useTranslation()
  const showHelpOthers = useShowHelpOthers(adminRoles)
  const isFSCAdmin = useFamilySearchCenterAdmin()
  const avatarLetter = profileName[0]
  const helpOthersOverlay = useOverlay()
  const theme = useTheme()

  function handleAdminEnter(assignment) {
    if (assignment !== activeRole) {
      import('@fs/zion-admin-mode')
        .then(({ enterRole }) => enterRole(activeRole, assignment))
        .catch((error) => {
          debug('Admin Mode Error in UserDesktop.js:', error)
        })
    }
  }

  const { accountNavigation } = useNavigationContext()

  return (
    /* Best practice for aria-labels is to have them in the interactive element (TextButton in this case).
    However, because of the necessity of the nested div here for styling, the aria-label needs to be placed
    in the div or the subnav items can't be accessed by screen readers on Windows. */
    <>
      <MenuOverlay
        menuButton={
          <TextButton className={accountButtonContainer}>
            <Theme theme={theme}>
              <div className={accountButtonStyle} aria-label={`${t('header.account', 'Account')}: ${profileName}`}>
                <Avatar
                  monogram={avatarLetter}
                  src={portraitUrl}
                  size="xs"
                  alt={t('header.user.portrait.label', 'User Portrait')}
                />
                {breakMode === 'desktop' ? <span className={usernameCss}>{profileName}</span> : null}
              </div>
            </Theme>
          </TextButton>
        }
      >
        {accountNavigation.sub.map(({ text, url, id, target }) => (
          <ListItem
            key={url}
            to={
              id === 'sign_out'
                ? `${external && url.startsWith('/') ? baseUrl : ''}${url}${signOutReturnUrl}`
                : `${external && url.startsWith('/') ? baseUrl : ''}${url}`
            }
            onClick={() => trackLink(null, url, 'click_action', `hdr19_${accountNavigation.id}:${id}`)}
            primaryText={text}
            target={target}
            external
          />
        ))}
        {showHelpOthers && (
          <>
            <Divider />
            <ListItem
              data-testid="hdr-help-others"
              onClick={() => {
                trackLink(null, 'click_action', `hdr19_help_others`)
                helpOthersOverlay.handleClick()
              }}
              primaryText={t('account.help-others.action', 'Help Others')}
            />
          </>
        )}
        {isFSCAdmin && (
          <>
            <Divider />
            <ListItem
              to={`${external ? baseUrl : ''}/locations/mycenters`}
              linkName="hdr19_fsc_tools"
              primaryText={t('account.center-tools.action', 'Center Tools')}
              external
            />
          </>
        )}
        {adminRoles.length > 0 && (
          <>
            {adminRoles.map(({ assignment }) => (
              <ListItem
                title={`Role: ${assignment}`}
                key={assignment}
                data-admin-role
                onClick={() => handleAdminEnter(assignment)}
                primaryText={
                  <span style={assignment === activeRole ? { color: colors.red70 } : null}>
                    <span className={assignmentLabelStyle}>ADM</span>
                    {assignment}
                  </span>
                }
              />
            ))}
          </>
        )}
      </MenuOverlay>
      <Suspense>
        {helpOthersOverlay.isOpen && <HelperDialog overlay={helpOthersOverlay} adminActiveRole={activeRole} />}
      </Suspense>
    </>
  )
}
