import { useState, useEffect, useCallback } from 'react'
import PropTypes from 'prop-types'
import { useCache } from '@fs/zion-cache'

export default function useShowDot({ name }) {
  // initial cache values put in a hook to prevent eternal re-renders from useCache.
  const [cacheInit] = useState({
    cache: { storeName: name, type: 'local' },
    key: name,
    initialValue: { latestCheck: null },
  })
  const [cache, setCache] = useCache({
    cache: cacheInit.cache,
    key: cacheInit.key,
    initialValue: cacheInit.initialValue,
  })
  const [showDot, setShowDot] = useState()
  const [latestUnreadTimestamp, setLatestUnreadTimestamp] = useState()

  const setLatestUnreadDate = useCallback((unreadDate) => {
    setLatestUnreadTimestamp(new Date(unreadDate).getTime())
  }, [])
  function setHasChecked() {
    setCache({ latestCheck: Date.now() })
  }

  useEffect(() => {
    if (cache && latestUnreadTimestamp) {
      setShowDot(shouldShowDot({ cache, latestUnreadTimestamp }))
    }
  }, [cache, latestUnreadTimestamp])

  return [showDot, setHasChecked, setLatestUnreadDate]
}

function shouldShowDot({ cache, latestUnreadTimestamp }) {
  const cachedLatestUnreadTimestamp = cache.latestCheck || 0
  return cachedLatestUnreadTimestamp < latestUnreadTimestamp
}

useShowDot.propTypes = {
  /** string used to set cache */
  name: PropTypes.string.isRequired,
}
