import React, { useState, useEffect } from 'react'
import { baseUrl } from '@fs/zion-config'
import { useTranslation } from 'react-i18next'
import { trackLink } from '@fs/zion-analytics'
import { Notice } from '@fs/zion-icon'
import { useContainerWidth } from '@fs/zion-ui'
import HeaderIconButton from '../HeaderIconButton/HeaderIconButton'
import useShowDot from '../useShowDot/useShowDot'

const NotificationListOverlay = React.lazy(() => import('./NotificationListOverlay'))

export default function Notifications({ notificationCount, lastNotificationTime, redirectNotifications, external }) {
  const { t } = useTranslation()
  const atWidth = useContainerWidth()
  const isMobile = atWidth({ default: true, xl: false })
  const displayNotificationListOverlay = !isMobile && !redirectNotifications
  const [hasSetShowDotTimestamp, setHasSetShowDotTimestamp] = useState()
  const [hasNewNotification, setLastCheckedNotificationsTimeStamp, setLatestUnreadDate] = useShowDot({
    name: 'headerNotifications',
  })

  const setHasCheckedNotifications = () => {
    if (hasNewNotification) {
      setLastCheckedNotificationsTimeStamp()
    }
  }

  useEffect(() => {
    if (lastNotificationTime && !hasSetShowDotTimestamp) {
      setHasSetShowDotTimestamp(true)
      setLatestUnreadDate(lastNotificationTime)
    }
  }, [setLatestUnreadDate, hasSetShowDotTimestamp, lastNotificationTime])

  if (displayNotificationListOverlay) {
    return (
      <NotificationListOverlay
        hasNewNotification={hasNewNotification}
        onOpen={setHasCheckedNotifications}
        footerButtonText={t('notify.show-all-notifications', 'Show All Notifications')}
      />
    )
  }

  if (!displayNotificationListOverlay) {
    return (
      <HeaderIconButton
        Icon={Notice}
        title={
          hasNewNotification
            ? t('header.notifications.new', 'New notifications available')
            : t('header.notifications', 'Notifications')
        }
        to={`${external ? baseUrl : ''}/notifications/`}
        external
        onClick={() => {
          setLastCheckedNotificationsTimeStamp()
          trackLink(null, '/notifications/', 'click_action', 'hdr19_notifications_menu')
        }}
        dotted={hasNewNotification}
      />
    )
  }

  return (
    <HeaderIconButton
      Icon={Notice}
      title={t('nav.notifications', 'Notifications')}
      to={`${external ? baseUrl : ''}/notifications/`}
      external
      onClick={() => trackLink(null, '/notifications/', 'click_action', 'hdr19_notifications_menu')}
      dotted={notificationCount > 0}
    />
  )
}
