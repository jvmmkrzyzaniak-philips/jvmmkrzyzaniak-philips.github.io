import React from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { useTranslation } from 'react-i18next'
import { VisuallyHidden } from '@reach/visually-hidden' // this can come from zion at some point - its getting wrapped in there
import Person from '../Person/Person'

// Styles
const styles = {
  wrapper: css`
    padding: 10px 0;

    & > *:nth-of-type(2) {
      margin-top: 6px;
    }
  `,
}
// // JSX Snippets - mini components
// // screen reader component to read out the sex of the person
const AriaSpousePosition = ({ position }) => {
  const [t] = useTranslation()
  const positionTranslations = {
    spouse1: t('person.couple.spouse-position.spouse1-label'),
    spouse2: t('person.couple.spouse-position.spouse2-label'),
  }
  const translatedPosition = positionTranslations[position]

  if (!position) return null
  return <VisuallyHidden>{translatedPosition}</VisuallyHidden>
}

AriaSpousePosition.propTypes = {
  position: PropTypes.oneOf(['spouse1', 'spouse2']),
}

/**
 * Couple accepts two tree-data person objects, and displays two stacked Person components.
 *
 * @param {object} props - The props passed into the element. Any props not specific to Couple are passed to the Person components.
 * @param {object} [props.spouse1Obj] - A tree-data personObj to send to Person.
 * @param {object} [props.spouse2Obj] - A tree-data personObj to send to Person.
 * @returns {HTMLElement} - The React element itself.
 */
export default function Couple({
  spouse1Obj,
  spouse2Obj,
  'data-testid': dataTestId,
  onClickPerson1,
  onClickPerson2,
  ...personProps
}) {
  const person1Props = onClickPerson1
    ? {
        onClick: onClickPerson1,
      }
    : {}
  const person2Props = onClickPerson2
    ? {
        onClick: onClickPerson2,
      }
    : {}

  return (
    <div className={styles.wrapper} data-testid={dataTestId || 'couple'}>
      {spouse1Obj ? (
        <>
          {spouse2Obj ? <AriaSpousePosition position="spouse1" /> : null}
          <Person
            avatarSize="smaller"
            componentSize="sm"
            hidePid
            hideLifespan
            openPersonOverlay
            {...personProps}
            personObj={spouse1Obj}
            {...person1Props}
            data-testid="spouse1"
          />
        </>
      ) : null}
      {spouse2Obj ? (
        <>
          {spouse1Obj ? <AriaSpousePosition position="spouse2" /> : null}
          <Person
            avatarSize="smaller"
            componentSize="sm"
            hidePid
            hideLifespan
            openPersonOverlay
            {...personProps}
            personObj={spouse2Obj}
            {...person2Props}
            data-testid="spouse2"
          />
        </>
      ) : null}
    </div>
  )
}

const spouseShape = PropTypes.shape({
  gender: PropTypes.string,
  id: PropTypes.string,
  name: PropTypes.string,
  nameConclusion: PropTypes.shape({
    details: PropTypes.shape({
      nameForms: PropTypes.array,
    }),
  }),
  portraitUrl: PropTypes.string,
  customPersonLink: PropTypes.string,
})

Couple.propTypes = {
  spouse1Obj: spouseShape,
  spouse2Obj: spouseShape,
  onClickPerson1: PropTypes.func,
  onClickPerson2: PropTypes.func,
}

Couple.defaultProps = {}
