import React from 'react'
import PropTypes from 'prop-types'
import * as PersonDataService from '@fs/zion-person-service'
import ClickToCopy from '@fs/zion-click-to-copy'
import { Ellipsis } from '@fs/zion-ui'

/**
 * Sub-component for Person, handles lifespan and pid logic, styling, and rendering.
 * @param {object} props - The props passed into the element.
 * @param {boolean} [props.hideLifespan=false] - Do not show the lifespan.
 * @param {boolean} [props.hidePid=false] - Do not show the PID.
 * @param {string} [props.lifespanSize="short"] - Which lifespan value to display - tree-data returns both a lifespan which is short and a fullLifeSpan which is longer. Valid values are "short" or "long".
 * @param {boolean} [props.multiLineDisplay=false] - display the lifespan and pid on separate lines
 * @param {boolean} [props.disableTruncation=false] - Whether to wrap the lifespan in an Ellipsis
 * @param {object} [props.personObj={}] - A tree-data person to display. This person must be normalized by running through personDataService's normalizePersonObj function
 * @returns {HTMLElement} - The React element itself.
 */
export default function Pid({ personObj, inline, ...props }) {
  const person = personObj.normalized ? personObj : PersonDataService.normalizePersonObj(personObj)
  const analyticsEventName = 'copy_pid'
  const pid = person.id
  // we want each of the characters of the pid to be read out separately to screen readers
  const ariaPid = pid.replace('-', '').split('').join(' ')

  const pidIsUnknown = pid === PersonDataService.unknownPerson.id

  return (
    <>
      {pidIsUnknown ? (
        <Ellipsis data-testid="unclickable-pid" aria-hidden="true">
          {pid}
        </Ellipsis>
      ) : (
        <ClickToCopy
          analyticsEventName={analyticsEventName}
          aria-label={ariaPid}
          value={pid}
          inline={inline}
          data-testid="pid"
          emphasis="low"
          {...props}
        />
      )}
    </>
  )
}

Pid.propTypes = {
  personObj: PropTypes.shape({
    fullLifespan: PropTypes.string,
    gender: PropTypes.string,
    id: PropTypes.string,
    lifespan: PropTypes.string,
    name: PropTypes.string,
    nameConclusion: PropTypes.shape({
      details: PropTypes.shape({
        nameForms: PropTypes.array,
      }),
    }),
    portraitUrl: PropTypes.string,
  }),
}

Pid.defaultProps = {
  personObj: {},
}
