import React from 'react'
import PropTypes from 'prop-types'
import { getFirstRomanNameForm } from '@fs/zion-person-service'
import Name from './Name'
/**
 * Component to display the person's Secondary Nameform if in cjk mode.
 * @param {object} props - The Component's props.
 * @param {object} [props.personObj] - A tree-data structured person to display.
 * @param {Boolean} [props.hasCJKName] - True if person has a cjk nameform.
 * @param {boolean} [props.cjk] - Used for determining whether or not to show PrimaryName.
 * @param {object} [props.rest] -  Pass along props.
 * @returns {HTMLElement} - The React element itself.
 */
export default function SecondName({
  personObj,
  hasCJKName,
  cjk,
  alwaysShowName,
  doNotLinkToPersonPage,
  openPersonOverlay,
  ...rest
}) {
  const moreThanOneNameForm = personObj.nameConclusion?.details?.nameForms?.length > 1

  // Only render secondary nameform if in cjk mode
  // and the person multiple nameForms
  // and one of those nameForms is a cjkNameForm
  if ((!cjk || !hasCJKName || !moreThanOneNameForm) && !alwaysShowName) {
    return null
  }

  const romanNameForm = getFirstRomanNameForm(
    personObj?.nameConclusion?.details?.nameForms,
    personObj?.nameConclusion?.details?.nameForms[1]
  )
  const romanNameConclusion = { details: { ...personObj.nameConclusion?.details, nameForms: [romanNameForm] } }

  return (
    <Name
      personObj={{
        id: personObj.id,
        nameConclusion: romanNameConclusion,
        name: romanNameConclusion?.details?.nameForms[0]?.fullText,
      }}
      doNotLinkToPersonPage={alwaysShowName ? true : doNotLinkToPersonPage}
      openPersonOverlay={alwaysShowName ? undefined : openPersonOverlay}
      {...rest}
    />
  )
}

SecondName.propTypes = {
  hasCJKName: PropTypes.bool,
  cjk: PropTypes.bool,
  personObj: PropTypes.shape({
    fullLifespan: PropTypes.string,
    gender: PropTypes.string,
    id: PropTypes.string,
    lifespan: PropTypes.string,
    name: PropTypes.string,
    nameConclusion: PropTypes.shape({
      details: PropTypes.shape({
        nameForms: PropTypes.array,
      }),
    }),
    portraitUrl: PropTypes.string,
  }),
}

SecondName.defaultProps = {
  personObj: {},
  hasCJKName: false,
  cjk: false,
}
