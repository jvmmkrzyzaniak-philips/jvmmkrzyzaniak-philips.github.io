import React, { lazy, Suspense } from 'react'
import PropTypes from 'prop-types'
import { css } from '@linaria/core'
import { trackLink, trackEvent } from '@fs/zion-analytics'
import { boolAttr, propsToAttributes } from '@fs/zion-frontend-friends'
import { normalizePersonObj, getNameRelatedData } from '@fs/zion-person-service'
import { usePreference } from '@fs/zion-preferences'
import { useOverlay, Ellipsis, Row } from '@fs/zion-ui'
import LinkOrSpan from './components/LinkOrSpan'

// lazy import to help mitigate this cycle
const PersonOverlay = lazy(() => import('../PersonOverlay/PersonOverlay'))
const AssociatedUserIcon = lazy(() => import('../AssociatedUser/AssociatedUserIcon'))

const nameCss = css`
  color: inherit !important;
  text-decoration: none;

  a&:not([unknown-person]):hover {
    text-decoration: underline;
  }

  &[unknown-person] {
    text-decoration: none;
    cursor: default;
  }
`

// needed to mute some props because we want to avoid errors like:
// "React does not recognize the `noTooltip` prop on a DOM element"
// because we swap this with Ellipsis as needed
const Span = ({ noTooltip, children, ...props }) => <span {...props}>{children}</span>

/**
 * Component to display a person's name.
 * @param {object} props - The props passed into the element.
 * @param {string} [props.doNotLinkToPersonPage=false] - turns off destination link.
 * @param {boolean} [props.multiLineDisplay=false] - display the name parts on multiple lines (except for CJK).
 * @param {boolean} [props.openPersonOverlay=false] - Whether to open the person overlay when the name is clicked on.
 * @param {object} [props.personObj] - A tree-data structured person to display.
 * @param {object} [props.customPersonLink] - The URL (instead of the person page URL) to go to when name is clicked. If the "${pid}" string is in the URL, it will be replaced with the person ID.
 * @param {boolean} [props.linksOpenNewTab] - Whether to open link in new tab or not
 * @param {boolean} [props.noBoldName] - If true, the name will not be bold.
 * @param {boolean} [props.disableTruncation] - stop the name from using ellipsis
 * @returns {HTMLElement} - The React element itself.
 */
export default function Name(props = {}) {
  const {
    doNotLinkToPersonPage,
    multiLineDisplay,
    customPersonLink,
    openPersonOverlay,
    personObj,
    linksOpenNewTab,
    linkName,
    disableTruncation,
  } = props
  const person = personObj.normalized ? personObj : normalizePersonObj(personObj)
  const pid = person.id
  const mePersonCisId = person.treeId && person.mePersonCisId

  const formattedDestination = (customPersonLink || '/tree/person/${pid}').replace(/\$\{pid\}/g, pid) // eslint-disable-line no-template-curly-in-string -- this is a deliberate format, as the consumer may want to provide a custom link, but not know the pid itself
  const personNameIsLinkOrSpan = doNotLinkToPersonPage ? 'span' : 'link'
  const showNameInRomanScriptPreference = usePreference('tree.showNamesInRomanScript')
  const { fullName, namePart1, namePart2, nameLangIfDifferentFromCurrentLang, forceSingleLineDisplay } =
    getNameRelatedData(person, showNameInRomanScriptPreference)
  const hideNamePartFields = !multiLineDisplay || forceSingleLineDisplay

  const attributesToReflect = ['aria-haspopup']
  const attrs = propsToAttributes(attributesToReflect, {
    'aria-haspopup': openPersonOverlay,
  })

  const personOverlayOverlay = useOverlay()

  const openOverlay = (evt) => {
    // the event was a keypress, but not one that mimics a click - do nothing
    if (evt.type === 'keypress' && evt.key !== 'Enter' && evt.key !== ' ') return

    // when the user clicks with the cmd/ctrl key, we want to just let the browser do its thing in case the user clicked on a link that should then open in a new tab - or whatever the browsers are doing these days.
    const letDefaultBehaviorContinue = Boolean(evt.metaKey || evt.ctrlKey)

    if (letDefaultBehaviorContinue || (!openPersonOverlay && !person.unknown)) {
      trackLink('person_name', formattedDestination, linkName || `click_name_${person.gender}`)
    } else if (person.unknown) {
      // Do not open the person overlay or link to the person for unknown persons
      evt.preventDefault()
      evt.nativeEvent.preventDefault()
      trackEvent({ event_name: 'clicked_unknown_person' })
      // console.warn('Opening a person overlay for an unknown person is not permitted') // this is commented out so it doesn't show up in our tests
    } else if (openPersonOverlay) {
      evt.preventDefault()
      evt.nativeEvent.preventDefault()

      trackEvent({ event_name: 'open_person_overlay' })
      // we need a way to determine how to open this differently/special when we are inside a zoom/pan so that the person card scales and positions appropriately
      personOverlayOverlay.open({ target: evt.currentTarget })
    }
  }

  const starIcon = (
    <Suspense fallback="" noShrinkX>
      {mePersonCisId && <AssociatedUserIcon cisId={mePersonCisId} />}
    </Suspense>
  )

  const TextWrapper = disableTruncation ? Span : Ellipsis

  return (
    <>
      <Row
        as={LinkOrSpan}
        draggable={false}
        gutters="pico"
        alignY="middle"
        wrap
        alignX={multiLineDisplay ? 'center' : 'start'}
        linksOpenNewTab={linksOpenNewTab}
        href={formattedDestination}
        data-testid="person-name-component" // this is here for the linter, but it gets overridden in LinkOrSpan
        {...attrs}
        className={nameCss}
        linkOrSpan={personNameIsLinkOrSpan}
        onClick={openOverlay}
        onKeyPress={openOverlay}
        unknown-person={boolAttr(person.unknown)}
        associated-user={boolAttr(mePersonCisId)}
        multi-line={boolAttr(multiLineDisplay)}
      >
        {[
          ...(hideNamePartFields
            ? [
                <Row gutters="pico" alignItemsY="middle" key="fullname">
                  <TextWrapper noTooltip lang={nameLangIfDifferentFromCurrentLang} data-testid="fullName">
                    {fullName}
                  </TextWrapper>
                  {starIcon}
                </Row>,
              ]
            : [
                <TextWrapper
                  key="namepart1"
                  aria-label={fullName}
                  lang={nameLangIfDifferentFromCurrentLang}
                  data-testid="namePart1"
                  noTooltip
                >
                  {namePart1}
                </TextWrapper>,
                <Row gutters="pico" alignItemsY="middle" key="namepart2">
                  <TextWrapper
                    aria-hidden="true"
                    lang={nameLangIfDifferentFromCurrentLang}
                    data-testid="namePart2"
                    noTooltip
                  >
                    {namePart2}
                  </TextWrapper>
                  {starIcon}
                </Row>,
              ]),
        ]}
      </Row>

      {openPersonOverlay && (
        <Suspense fallback={null}>
          <PersonOverlay personId={pid} overlay={personOverlayOverlay} />
        </Suspense>
      )}
    </>
  )
}

Name.propTypes = {
  doNotLinkToPersonPage: PropTypes.bool,
  multiLineDisplay: PropTypes.bool,
  openPersonOverlay: PropTypes.bool,
  customPersonLink: PropTypes.string,
  personObj: PropTypes.shape({
    fullLifespan: PropTypes.string,
    gender: PropTypes.string,
    id: PropTypes.string,
    lifespan: PropTypes.string,
    name: PropTypes.string,
    nameConclusion: PropTypes.shape({
      details: PropTypes.shape({
        nameForms: PropTypes.array,
      }),
    }),
    portraitUrl: PropTypes.string,
  }),
  /** @deprecated */
  noBoldName: PropTypes.bool,
}

Name.defaultProps = {
  doNotLinkToPersonPage: false,
  multiLineDisplay: false,
  openPersonOverlay: false,
  personObj: {},
  noBoldName: false,
}
