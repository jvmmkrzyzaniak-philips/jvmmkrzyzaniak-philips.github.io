import React from 'react'
import PropTypes from 'prop-types'
import { getFirstCJKNameForm } from '@fs/zion-person-service'
import Name from './Name'

/**
 * Component to display the person's Primary Nameform
 * @param {object} props - The Component's props.
 * @param {object} [props.personObj] - A tree-data structured person to display.
 * @param {boolean} [props.avatarShowing] - True if portrait url is defined and showing.
 * @param {boolean} [props.cjk] - Used for determining whether or not to show PrimaryName.
 * @param {Boolean} [props.hasCJKName] - True if person has a cjk nameform.
 * @param {object} [props.rest] -  Pass along props.
 * @returns {HTMLElement} - The React element itself.
 */
export default function PrimaryName({ personObj, avatarShowing, cjk, hasCJKName, orientation, ...rest }) {
  // Just return Name and pass everything along if not in cjk mode, or if the person doesn't have a cjk name
  if (!hasCJKName || !cjk || orientation === 'landscape') {
    return <Name personObj={personObj} {...rest} />
  }

  // In cjk mode, the primary nameform is rendered as a vertical monogram where the avatar goes instead of here.
  if (!avatarShowing) {
    return null
  }

  const cjkNameForm = getFirstCJKNameForm(personObj?.nameConclusion?.details?.nameForms)
  const cjkNameConclusion = {
    details: { ...personObj.nameConclusion?.details, nameForms: [cjkNameForm] },
  }

  return (
    <Name
      personObj={{
        id: personObj.id,
        nameConclusion: cjkNameConclusion,
        name: cjkNameConclusion?.details?.nameForms[0]?.fullText,
      }}
      {...rest}
    />
  )
}

PrimaryName.propTypes = {
  doNotLinkToPersonPage: PropTypes.bool,
  avatarShowing: PropTypes.bool,
  hasCJKName: PropTypes.bool,
  personObj: PropTypes.shape({
    fullLifespan: PropTypes.string,
    gender: PropTypes.string,
    id: PropTypes.string,
    lifespan: PropTypes.string,
    name: PropTypes.string,
    nameConclusion: PropTypes.shape({
      details: PropTypes.shape({
        nameForms: PropTypes.array,
      }),
    }),
    portraitUrl: PropTypes.string,
  }),
}

PrimaryName.defaultProps = {
  personObj: {},
  avatarShowing: false,
  hasCJKName: false,
}
