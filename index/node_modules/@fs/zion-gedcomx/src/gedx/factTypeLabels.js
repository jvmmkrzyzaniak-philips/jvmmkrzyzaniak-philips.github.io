import { i18n } from '@fs/zion-locale'
import '../locales' // this import tells the coalesceLocales function to include it in the per-locale bundle.

// delay initializing the labels until the first time they are needed (when translations are available)
let factTypeLabels

function initFactTypeLabels() {
  return {
    AccountJournal: i18n.t('gedcomx.fact.account-journal', 'Account Journal'),
    Administration: i18n.t('gedcomx.fact.administration', 'Administration'),
    AdministrationRecord: i18n.t('gedcomx.fact.administration-record', 'Administration Record'),
    Adoption: i18n.t('gedcomx.fact.adoption', 'Adoption'),
    AdoptiveParent: i18n.t('gedcomx.fact.adoptive-parent', 'Adoptive Parent'),
    AdultChristening: i18n.t('gedcomx.fact.adult-christening', 'Adult Christening'),
    AncestralHome: i18n.t('gedcomx.fact.ancestral-home', 'Ancestral Home'),
    AfricanAmerican: i18n.t('gedcomx.fact.AfricanAmerican', 'African American'),
    Age: i18n.t('gedcomx.fact.age', 'Age'),
    Affiliation: i18n.t('gedcomx.fact.affiliation', 'Affiliation'),
    Amnesty: i18n.t('gedcomx.fact.amnesty', 'Amnesty'),
    Annulment: i18n.t('gedcomx.fact.annulment', 'Annulment'),
    Application: i18n.t('gedcomx.fact.application', 'Application'),
    Apprenticeship: i18n.t('gedcomx.fact.apprenticeship', 'Apprenticeship'),
    Arrest: i18n.t('gedcomx.fact.arrest', 'Arrest'),
    Award: i18n.t('gedcomx.fact.award', 'Award'),
    Bank: i18n.t('gedcomx.fact.bank', 'Bank'),
    BackgroundCheck: i18n.t('gedcomx.fact.background-check', 'Background Check'),
    Background: i18n.t('gedcomx.fact.background', 'Background'),
    Banns: i18n.t('gedcomx.fact.banns', 'Banns'),
    Baptism: i18n.t('gedcomx.fact.baptism', 'Baptism'),
    BaptismalCertificate: i18n.t('gedcomx.fact.baptismal-certificate', 'Baptismal Certificate'),
    BarMitzvah: i18n.t('gedcomx.fact.bar-mitzvah', 'Bar Mitzvah'),
    BatMitzvah: i18n.t('gedcomx.fact.bat-mitzvah', 'Bat Mitzvah'),
    Biography: i18n.t('gedcomx.fact.biography', 'Biography'),
    BiologicalParent: i18n.t('gedcomx.fact.biological-parent', 'Biological Parent'),
    Birth: i18n.t('gedcomx.fact.birth', 'Birth'),
    BirthCertificate: i18n.t('gedcomx.fact.birth-certificate', 'Birth Certificate'),
    BirthNotice: i18n.t('gedcomx.fact.birth-notice', 'Birth Notice'),
    Birthplace: i18n.t('gedcomx.fact.birthplace', 'Birthplace'),
    BirthRecordsIndex: i18n.t('gedcomx.fact.birth-records-index', 'Birth Records Index'),
    BirthRegistration: i18n.t('gedcomx.fact.birth-registration', 'Birth Registration'),
    Blessing: i18n.t('gedcomx.fact.blessing', 'Blessing'),
    BranchName: i18n.t('gedcomx.fact.branch-name', 'Branch Name'),
    Burial: i18n.t('gedcomx.fact.burial', 'Burial'),
    BurialRecord: i18n.t('gedcomx.fact.burial', 'Burial'),
    Caste: i18n.t('gedcomx.fact.caste', 'Caste'),
    Census: i18n.t('gedcomx.fact.census', 'Census'),
    CensusIndex: i18n.t('gedcomx.fact.census-index', 'Census Index'),
    ChildOrder: i18n.t('gedcomx.fact.child-order', 'Child Order'),
    Christening: i18n.t('gedcomx.fact.christening', 'Christening'),
    ChurchRecord: i18n.t('gedcomx.fact.church-record', 'Church Record'),
    Circumcision: i18n.t('gedcomx.fact.circumcision', 'Circumcision'),
    Citizenship: i18n.t('gedcomx.fact.citizenship', 'Citizenship'),
    CivilUnion: i18n.t('gedcomx.fact.civil-union', 'Civil Union'),
    CivilRecordOfEcclesiasticalMarriage: i18n.t(
      'gedcomx.fact.civil-record-of-ecclesiastical-marriage',
      'Civil Record Of Ecclesiastical Marriage'
    ),
    CommonLawMarriage: i18n.t('gedcomx.fact.common-law-marriage', 'Common Law Marriage'),
    ComingOfAge: i18n.t('gedcomx.fact.coming-of-age', 'Coming of Age'),
    Clan: i18n.t('gedcomx.fact.clan', 'Clan'),
    ConcurrentHeir: i18n.t('gedcomx.fact.concurrent-heir', 'Concurrent Heir'),
    Confirmation: i18n.t('gedcomx.fact.confirmation', 'Confirmation'),
    ContractRecord: i18n.t('gedcomx.fact.contract-record', 'Contract Record'),
    CoupleNeverHadChildren: i18n.t('gedcomx.fact.couple-never-had-children', 'Couple Never Had Children'),
    Court: i18n.t('gedcomx.fact.court', 'Court'),
    Cremation: i18n.t('gedcomx.fact.cremation', 'Cremation'),
    Criminal: i18n.t('gedcomx.fact.criminal', 'Criminal'),
    CriminalBackgroundCheck: i18n.t('gedcomx.fact.criminal-background-check', 'Criminal Background Check'),
    Death: i18n.t('gedcomx.fact.death', 'Death'),
    DeathRecordIndex: i18n.t('gedcomx.fact.death-record-index', 'Death Record Index'),
    DeathRegistration: i18n.t('gedcomx.fact.death-registration', 'Death Registration'),
    DeedIndex: i18n.t('gedcomx.fact.deed-index', 'Deed Index'),
    Deed: i18n.t('gedcomx.fact.deed', 'Deed'),
    DiedBeforeEight: i18n.t('gedcomx.fact.died-before-eight', 'Died before Eight'),
    Directory: i18n.t('gedcomx.fact.directory', 'Directory'),
    Distinction: i18n.t('gedcomx.fact.distinction', 'Distinction'),
    Divorce: i18n.t('gedcomx.fact.divorce', 'Divorce'),
    DivorceFiling: i18n.t('gedcomx.fact.divorce-filing', 'Divorce Filing'),
    DomesticPartnership: i18n.t('gedcomx.fact.domestic-partnership', 'Domestic Partnership'),
    Draft: i18n.t('gedcomx.fact.draft', 'Draft'),
    Education: i18n.t('gedcomx.fact.education', 'Education'),
    EducationEnrollment: i18n.t('gedcomx.fact.education-enrollment', 'Education Enrollment'),
    Emigration: i18n.t('gedcomx.fact.emigration', 'Emigration'),
    Employment: i18n.t('gedcomx.fact.employment', 'Employment'),
    Engagement: i18n.t('gedcomx.fact.engagement', 'Engagement'),
    EnteringHeir: i18n.t('gedcomx.fact.entering-heir', 'Entering Heir'),
    Ethnicity: i18n.t('gedcomx.fact.ethnicity', 'Ethnicity'),
    EventRegistration: i18n.t('gedcomx.fact.event-registration', 'Event Registration'),
    EventType: i18n.t('gedcomx.fact.event-type', 'Event Type'),
    Excommunication: i18n.t('gedcomx.fact.excommunication', 'Excommunication'),
    ExitingHeir: i18n.t('gedcomx.fact.exiting-heir', 'Exiting Heir'),
    FederalPopulationCensus: i18n.t('gedcomx.fact.federal-population-census', 'Federal Population Census'),
    Financial: i18n.t('gedcomx.fact.financial', 'Financial'),
    FinancialRecord: i18n.t('gedcomx.fact.financial-record', 'Financial Record'),
    FinancialTransaction: i18n.t('gedcomx.fact.financial-transaction', 'Financial Transaction,'),
    FirstCommunion: i18n.t('gedcomx.fact.first-communion', 'First Communion'),
    Flourish: i18n.t('gedcomx.fact.flourish', 'Flourish'),
    FosterParent: i18n.t('gedcomx.fact.foster-parent', 'Foster Parent'),
    Freedmen: i18n.t('gedcomx.fact.freedmen', 'Freedmen'),
    FreedmansBureau: i18n.t('gedcomx.fact.freedmens-bureau', `Freedmen's Bureau`),
    Funeral: i18n.t('gedcomx.fact.funeral', 'Funeral'),
    Gender: i18n.t('gedcomx.fact.sex', 'Sex'),
    GenderChange: i18n.t('gedcomx.fact.sex-change', 'Sex Change'),
    GenealogyRecord: i18n.t('gedcomx.fact.genealogy-record', 'Genealogy Record'),
    GenerationNumber: i18n.t('gedcomx.fact.generation-number', 'Generation Number'),
    Graduation: i18n.t('gedcomx.fact.graduation', 'Graduation'),
    GuardianParent: i18n.t('gedcomx.fact.guardian-parent', 'Guardian Parent'),
    GuardianshipRecord: i18n.t('gedcomx.fact.guardianship-record', 'Guardianship Record'),
    Homeland: i18n.t('gedcomx.fact.homeland', 'Homeland'),
    Homestead: i18n.t('gedcomx.fact.homestead', 'Homestead'),
    HomesteadFinalCertificate: i18n.t('gedcomx.fact.homesteadFinalCertificate', 'Homestead Final Certificate'),
    Illness: i18n.t('gedcomx.fact.illness', 'Illness'),
    ImmigrationRegistration: i18n.t('gedcomx.fact.immigrationRegistration', 'Immigration Registration'),
    Immigration: i18n.t('gedcomx.fact.immigration', 'Immigration'),
    Imprisonment: i18n.t('gedcomx.fact.imprisonment', 'Imprisonment'),
    Index: i18n.t('gedcomx.fact.index', 'Index'),
    Inquest: i18n.t('gedcomx.fact.inquest', 'Inquest'),
    IntendedMarriage: i18n.t('gedcomx.fact.intended-marriage', 'Intended Marriage'),
    Inventory: i18n.t('gedcomx.fact.inventory', 'Inventory'),
    InventoryRecord: i18n.t('gedcomx.fact.inventory-record', 'Inventory Record'),
    LandAssessment: i18n.t('gedcomx.fact.land-assessment', 'Land Assessment'),
    LandTransaction: i18n.t('gedcomx.fact.land-transaction', 'Land Transaction'),
    Land: i18n.t('gedcomx.fact.land', 'Land'),
    Language: i18n.t('common-ui:language.label', 'Language'),
    Legal: i18n.t('gedcomx.fact.legal', 'Legal'),
    Legitimation: i18n.t('gedcomx.fact.legitimation', 'Legitimation'),
    Letter: i18n.t('gedcomx.fact.letter', 'Letter'),
    LifeSketch: i18n.t('gedcomx.fact.life-sketch', 'Life Sketch'),
    LivedTogether: i18n.t('gedcomx.fact.lived-together', 'Lived Together'),
    Living: i18n.t('gedcomx.fact.living', 'Living'),
    Map: i18n.t('gedcomx.fact.map', 'Map'),
    MaritalStatus: i18n.t('gedcomx.fact.marital-status', 'Marital Status'),
    Marriage: i18n.t('gedcomx.fact.marriage', 'Marriage'),
    MarriageBanns: i18n.t('gedcomx.fact.marriage-banns', 'Marriage Banns'),
    MarriageBannsRecord: i18n.t('gedcomx.fact.marriage-banns', 'Marriage Banns'),
    MarriageCertificate: i18n.t('gedcomx.fact.marriage-certificate', 'Marriage Certificate'),
    MarriageContract: i18n.t('gedcomx.fact.marriage-contract', 'Marriage Contract'),
    MarriageDissolution: i18n.t('gedcomx.fact.marriage-dissolution', 'Marriage Dissolution'),
    MarriageLicense: i18n.t('gedcomx.fact.marriage-license', 'Marriage License'),
    MarriageNotice: i18n.t('gedcomx.fact.marriage-notice', 'Marriage Notice'),
    MarriageRecordIndex: i18n.t('gedcomx.fact.marriage-record-index', 'Marriage Record Index'),
    MarriageRegistration: i18n.t('gedcomx.fact.marriage-registration', 'Marriage Registration'),
    MarriageSettlement: i18n.t('gedcomx.fact.marriage-settlement', 'Marriage Settlement'),
    Medical: i18n.t('gedcomx.fact.medical', 'Medical'),
    MedicalRecord: i18n.t('gedcomx.fact.medical-record', 'Medical Record'),
    Membership: i18n.t('gedcomx.fact.membership', 'Membership'),
    Migration: i18n.t('gedcomx.fact.migration', 'Migration'),
    MilitaryAward: i18n.t('gedcomx.fact.military-award', 'Military Award'),
    Military: i18n.t('gedcomx.fact.military', 'Military'),
    MilitaryCasualty: i18n.t('gedcomx.fact.military-casualty', 'Military Casualty'),
    MilitaryCorrespondence: i18n.t('gedcomx.fact.military-correspondence', 'Military Correspondence'),
    MilitaryDischarge: i18n.t('gedcomx.fact.military-discharge', 'Military Discharge'),
    MilitaryDisposition: i18n.t('gedcomx.fact.military-disposition', 'Military Disposition'),
    NamingCeremony: i18n.t('gedcomx.fact.naming-ceremony', 'Naming Ceremony'),
    MilitaryDraftRegistration: i18n.t('gedcomx.fact.military-draft-registration', 'Military Draft Registration'),
    MilitaryEnlistment: i18n.t('gedcomx.fact.military-enlistment', 'Military Enlistment'),
    MilitaryInduction: i18n.t('gedcomx.fact.military-induction', 'Military Induction'),
    MilitaryService: i18n.t('gedcomx.fact.military-service', 'Military Service'),
    MilitaryTour: i18n.t('gedcomx.fact.military-tour', 'Military Tour'),
    Mission: i18n.t('gedcomx.fact.mission', 'Mission'),
    Miscellaneous: i18n.t('gedcomx.fact.miscellaneous', 'Miscellaneous'),
    MiscellaneousRecord: i18n.t('gedcomx.fact.miscellaneous-record', 'Miscellaneous Record'),
    Move: i18n.t('gedcomx.fact.move-from', 'Move'),
    MoveFrom: i18n.t('gedcomx.fact.move-from', 'Move From'),
    MoveTo: i18n.t('gedcomx.fact.move-to', 'Move To'),
    MultipleBirth: i18n.t('gedcomx.fact.multiple-birth', 'Multiple Birth'),
    MunicipalCensus: i18n.t('gedcomx.fact.municipal-census', 'Municipal Census'),
    Name: i18n.t('common-ui:name.person', 'Name'),
    NationalId: i18n.t('gedcomx.fact.national-id', 'National ID'),
    Nationality: i18n.t('gedcomx.fact.nationality', 'Nationality'),
    NativeAmerican: i18n.t('gedcomx.fact.native-american', 'Native American'),
    Naturalization: i18n.t('gedcomx.fact.naturalization', 'Naturalization'),
    NaturalizationPetitions: i18n.t('gedcomx.fact.naturalization-petitions', 'Naturalization Petitions'),
    Newspaper: i18n.t('gedcomx.fact.newspaper', 'Newspaper'),
    NewspaperArticle: i18n.t('gedcomx.fact.newspaper-article', 'Newspaper Article'),
    NoChildren: i18n.t('gedcomx.fact.no-children', 'No Children'),
    NoCoupleRelationships: i18n.t('gedcomx.fact.no-couple-relationships', 'No Couple Relationships'),
    Note: i18n.t('gedcomx.fact.note', 'Note'),
    NumberOfChildren: i18n.t('gedcomx.fact.number-of-children', 'Number of Children'),
    NumberOfMarriages: i18n.t('gedcomx.fact.number-of-marriages', 'Number of Marriages'),
    Obituary: i18n.t('gedcomx.fact.obituary', 'Obituary'),
    Occupation: i18n.t('gedcomx.fact.occupation', 'Occupation'),
    Ordinance: i18n.t('gedcomx.fact.ordinance', 'Ordinance'),
    Ordination: i18n.t('gedcomx.fact.ordination', 'Ordination'),
    Other: i18n.t('gedcomx.fact.other', 'Other'),
    OTHER: i18n.t('gedcomx.fact.other', 'Other'),
    Pardon: i18n.t('gedcomx.fact.pardon', 'Pardon'),
    Passport: i18n.t('gedcomx.fact.passport', 'Passport'),
    PassportApplication: i18n.t('gedcomx.fact.passport-application', 'Passport Application'),
    Pension: i18n.t('gedcomx.fact.pension', 'Pension'),
    Photograph: i18n.t('gedcomx.fact.photograph', 'Photograph'),
    PhysicalDescription: i18n.t('gedcomx.fact.physical-description', 'Physical Description'),
    Population: i18n.t('gedcomx.fact.population', 'Population'),
    PropertySaleRecord: i18n.t('gedcomx.fact.property-sale-record', 'Property Sale Record'),

    // Dynamic Label/Count for Previous Residence
    PreviousResidence: i18n.t('gedcomx.fact.previous-residence_one', 'Previous Residence'),
    PreviousResidenceCount: { key: 'gedcomx.fact.previous-residence_other', fallback: 'Previous Residence {count}' },
    PrevResCount: { key: 'gedcomx.fact.previous-residence_other', fallback: 'Previous Residence {count}' },

    Probate: i18n.t('gedcomx.fact.probate', 'Probate'),
    Property: i18n.t('gedcomx.fact.property', 'Property'),
    PropertySale: i18n.t('gedcomx.fact.property-sale', 'Property Sale'),
    Race: i18n.t('gedcomx.fact.race', 'Race'),
    Receipt: i18n.t('gedcomx.fact.receipt', 'Receipt'),
    RelationshipToHead: i18n.t('gedcomx.fact.relationship-to-head', 'Relationship to Head'),
    Religion: i18n.t('gedcomx.fact.religion', 'Religion'),
    Religious: i18n.t('gedcomx.fact.religious', 'Religious'),
    Residence: i18n.t('gedcomx.fact.residence', 'Residence'),
    Retirement: i18n.t('gedcomx.fact.retirement', 'Retirement'),
    Roll: i18n.t('gedcomx.fact.roll', 'Roll'),
    School: i18n.t('gedcomx.fact.school', 'School'),
    SchoolRecord: i18n.t('gedcomx.fact.school-record', 'School Record'),
    Separation: i18n.t('gedcomx.fact.separation', 'Separation'),
    SetApart: i18n.t('gedcomx.fact.set-apart', 'Set Apart'),
    SlavePurchaseRecord: i18n.t('gedcomx.fact.slave-purchase-record', 'Slave Purchase Record'),
    SocialProgramApplication: i18n.t('gedcomx.fact.social-program-application', 'Social Program Application'),
    SocialProgramClaim: i18n.t('gedcomx.fact.social-program-claim', 'Social Program Claim'),
    SocialProgramCorrespondence: i18n.t('gedcomx.fact.social-program-correspondence', 'Social Program Correspondence'),
    SocialProgramDocument: i18n.t('gedcomx.fact.social-program-document', 'Social Program Document'),
    StillBirth: i18n.t('gedcomx.fact.stillbirth', 'Stillbirth'),
    Stillbirth: i18n.t('gedcomx.fact.stillbirth', 'Stillbirth'),
    StepParent: i18n.t('gedcomx.fact.step-parent', 'Step Parent'),
    SociologicalParent: i18n.t('gedcomx.fact.sociological-parent', 'Sociological Parent'),
    SurrogateParent: i18n.t('gedcomx.fact.surrogate-parent', 'SurrogateParent'),
    Tax: i18n.t('gedcomx.fact.tax', 'Tax'),
    TaxAssessment: i18n.t('gedcomx.fact.tax-assessment', 'Tax Assessment'),
    TitleOfNobility: i18n.t('gedcomx.fact.title-of-nobility', 'Title of Nobility'),
    Travel: i18n.t('gedcomx.fact.travel', 'Travel'),
    Tribe: i18n.t('gedcomx.fact.tribe', 'Tribe'),
    TribeName: i18n.t('gedcomx.fact.tribe-name', 'Tribe Name'),
    Unknown: i18n.t('gedcomx.fact.unknown', 'Unknown'),
    VestryMinutes: i18n.t('gedcomx.fact.vestry-minutes', 'Vestry Minutes'),
    Visit: i18n.t('gedcomx.fact.visit', 'Visit'),
    Vital: i18n.t('gedcomx.fact.vital', 'Vital'),
    Vote: i18n.t('gedcomx.fact.vote', 'Vote'),
    Voting: i18n.t('gedcomx.fact.voting', 'Voting'),
    VoterRegistration: i18n.t('gedcomx.fact.voter-registration', 'Voter Registration'),
    Will: i18n.t('gedcomx.fact.will', 'Will'),
    WillIndex: i18n.t('gedcomx.fact.will-index', 'Will Index'),
    WillRecord: i18n.t('gedcomx.fact.will-record', 'Will Record'),
    WorkhouseAdmission: i18n.t('gedcomx.fact.workhouse-admission', 'Workhouse Admission'),
    Yahrzeit: i18n.t('gedcomx.fact.yahrzeit', 'Yahrzeit'),
  }
}
/**
 * Return the label (for display) for the given factType.
 * Note: If the factType isn't found then an 'Other' label will be returned with the fact type embedded in it.
 * @param {string} factType The fact type (e.g. 'http://gedcomx.org/<something>')
 * @returns {string} The label to be displayed. This should never be empty or null.
 */
export function getFactTypeLabel(factType, includeOther = true) {
  // We have to re-intialize the first time the function is run
  if (!factTypeLabels) {
    factTypeLabels = initFactTypeLabels()
  }
  factType = factType.split('/').pop()

  // Checks to see if factType is plural/ends in a number, if so it sets isPlural to true, sets label to ...Count to find matching translation (ex. prevResCount),
  // and finds a match of factType to be used for dynamic translation.
  let label = factType
  let isPlural = false
  let match
  const endsWithNumberRegExp = /(?<factType>[a-zA-Z]+?)(?<count>\d+)$/

  if (endsWithNumberRegExp.test(factType)) {
    match = factType.match(endsWithNumberRegExp)
    label = `${match.groups.factType}Count`
    isPlural = true
  }

  // If is plural returns a translation with count interpolated (i.e. "Previous Residence 3" if count is 3)
  if (hasFactKey(label)) {
    return isPlural
      ? i18n.t(factTypeLabels[label].key, factTypeLabels[label].fallback, { count: match.groups.count })
      : factTypeLabels[label]
  }

  if (factType.indexOf('data:,') === 0) {
    try {
      factType = decodeURI(factType.substring('data:,'.length))
    } catch (decodeErr) {
      console.error(`Could not parse ${factType}: ${decodeErr.message}`)
      factType = i18n.t('gedcomx.fact.unknown', 'Unknown')
    }
    if (!includeOther) {
      // Get rid of spaces before accessing factTypeLabels
      factType = factType.replaceAll(' ', '')
      factType = factTypeLabels[factType]
    }
  } else {
    console.error(`Could not translate factType: ${factType} - see factTypeLabels`)
  }

  return includeOther ? i18n.t('gedcomx.fact.otherfacttype', 'Other ({factType})', { factType }) : factType
}

/**
 * Return true if the label has a translation.
 * @param {string} factType The fact type (e.g. 'http://gedcomx.org/<something>')
 * @returns {boolean} True if the fact type has a translation, otherwise false.
 */
export function hasFactKey(factType) {
  // We have to re-intialize the first time the function is run
  if (!factTypeLabels) {
    factTypeLabels = initFactTypeLabels()
  }
  // Sometimes `hasFactKey` is called on its own. We need to make sure that in those cases, the
  // factType is still parsed.
  factType = factType.split('/').pop()

  return !!factTypeLabels[factType]
}
