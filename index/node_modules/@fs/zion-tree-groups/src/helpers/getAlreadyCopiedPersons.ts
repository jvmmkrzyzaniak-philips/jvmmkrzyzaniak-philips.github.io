import type { AxiosError } from '@fs/zion-tree-types/zion-axios'
import { type TfTreeCopyResult, type TfTreeCopyResults } from '../types/copy'

type AxiosErrorWithResponse<T> = AxiosError<T> & { response: NonNullable<AxiosError<T>['response']> }

function isTreeCopyResultsError(error: unknown): error is AxiosErrorWithResponse<TfTreeCopyResults> {
  return Boolean(
    error &&
      typeof error === 'object' &&
      'response' in error &&
      typeof error.response === 'object' &&
      error.response &&
      'data' in error.response &&
      typeof error.response.data === 'object' &&
      error.response.data &&
      'personCopyResults' in error.response.data &&
      error.response.data.personCopyResults
  )
}

export function getPersonCopyResults(error: unknown): Record<string, TfTreeCopyResult> {
  if (!isTreeCopyResultsError(error)) return {}
  return error.response.data.personCopyResults
}

/* This is a helper that will return an array of persons that had the ALREADY_COPIED status when using that groupsCopyPersons endpoint */
export default function getAlreadyCopiedPersons(error: unknown): string[] {
  const personCopyResults = getPersonCopyResults(error)
  return Object.entries(personCopyResults).reduce<string[]>(
    (privateSpacePersonIds, [privateSpacePersonId, statusObj]) => {
      if (statusObj.status === 'ALREADY_COPIED') {
        privateSpacePersonIds.push(privateSpacePersonId)
      }
      return privateSpacePersonIds
    },
    []
  )
}
