import React, { useEffect } from 'react'
import { Row, Skeleton } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { Thinganator } from '@fs/zion-ui/quarks-authorized-use-only'
import { useSelectPersonContext } from '../../providers/SelectPersonProvider'
import { usePrivatePersons } from '../../providers/PrivatePersonsProvider'

/** Our paginator to be used in conjunction with the private person provider. This Component is exported so consumers can have the flexibility of where it is rendered on the page.
 */
export default function TreePaginator(): JSX.Element | null {
  const { paginatorState, setPaginatorState } = useSelectPersonContext() ?? {}
  if (!paginatorState || !setPaginatorState) {
    throw new Error('TreePaginator can only be used within a Select Person Provider.')
  }

  const [t] = useTranslation()
  const {
    loading,
    nextToken,
    getNextPrivatePersonBatch,
    getPreviousPrivatePersonBatch,
    privatePersonsCount,
    privatePersonsPageCount,
    filterText,
  } = usePrivatePersons()

  const totalPages = Math.ceil(Number(privatePersonsCount) / privatePersonsPageCount)
  const paginatorIndex = paginatorState.token.length - 1

  useEffect(() => {
    // reset paginator state if we clear the filter
    if (filterText !== '') {
      setPaginatorState((prev) => ({ ...prev, token: [undefined] }))
    }
  }, [filterText, setPaginatorState])

  function handlePageChange(pageIndex: number): void {
    // paginatorState and setPaginatorState will be defined in this scope.
    if (paginatorState!.token[pageIndex] || pageIndex === 0) {
      paginatorState!.token.pop()
      getPreviousPrivatePersonBatch(paginatorState!.token[pageIndex])
    } else {
      setPaginatorState!((prev) => ({ ...prev, token: [...prev.token, nextToken] }))
      getNextPrivatePersonBatch()
    }
  }

  if (loading)
    return (
      <Row>
        <div growX />
        <Skeleton.Chip minWidth={120} noShrinkX />
      </Row>
    )

  if (totalPages === 1) return null

  return (
    <div
      style={{
        margin: '0 -12px', // Align Paginator arrows to the end of Bleedable paddings.
      }}
    >
      <Row gutters="none">
        <div growX />
        <Thinganator
          noTextField
          label={t('zion.paginator.page', 'Page')}
          setIndex={handlePageChange}
          length={totalPages}
          index={paginatorIndex}
        />
      </Row>
    </div>
  )
}
