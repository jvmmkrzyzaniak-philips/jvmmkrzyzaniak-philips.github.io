import React, { type ComponentProps, useEffect, Suspense, lazy } from 'react'
import { SelectSiblingPedigreeButton } from '@fs/zion-tree-pedigree'
import { useEffectiveUser } from '@fs/zion-user'
import { ListItem, useOverlay, useStatusOverlay } from '@fs/zion-ui'
import { NoticeLoading } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'
import { useZionAxios as useZionAxiosUntyped } from '@fs/zion-axios'

import type { useZionAxios as useZionAxiosTyped } from '@fs/zion-tree-types/zion-axios'
import { useFeatureFlag } from '@fs/zion-flags'
import { type ShowStatusOverlayProps } from '@fs/zion-tree-types/zion-ui'
import { type TreeId } from '@fs/zion-tree-types'
import useCopyPrivatePersons from './hooks/useCopyPrivatePersons'
import type { GroupsValue } from '../../../types/groups'
import { GroupsProvider } from '../../../providers/GroupsProvider/GroupsProvider'
import { useGroupsContext } from '../../../providers/GroupsProvider/InnerGroupsProvider'
import { type TreeMatchResult } from '../../../types/matchMePersons'

const CopyMatchesOverlay = lazy(() => import('./CopyMatchesOverlay/CopyMatchesOverlay'))
const CopyAllOverlay = lazy(() => import('./CopyAllOverlay'))

const useZionAxios = useZionAxiosUntyped as typeof useZionAxiosTyped

type ListItemProps = Record<string, unknown>

type Props = {
  treeId?: TreeId | '' | 'PRIVATE'
  selectTree?: GroupsValue['selectTree']
  /**
   * buttonProps.disabled will only override the Button's enabled state to disabled state.
   * buttonProps.Icon will only show when item is not loading.
   * */
  buttonProps?: ComponentProps<typeof SelectSiblingPedigreeButton>['buttonProps']
  onLoadingChange?: (loading: boolean) => void
  onCopyComplete?: () => void
  asListItem?: boolean
  /**
   * listItemProps.disabled will only override the ListItem's enabled state to disabled state.
   * listItemProps.startElement will only show when item is not loading.
   */
  listItemProps?: Omit<ListItemProps, 'primaryText'>
  ProviderLoadingComponent?: () => JSX.Element
}

/** CopyBranchButton will launch the sibling pedigree in copy mode in its own stand alone theater overview.
 */
export default function CopyBranchButton({
  treeId,
  selectTree,
  buttonProps: { disabled: buttonDisabled, Icon, ...buttonProps } = {},
  listItemProps: { disabled: listItemDisabled, startElement, ...listItemProps } = {},
  onLoadingChange,
  onCopyComplete,
  asListItem,
  ProviderLoadingComponent,
}: Props): JSX.Element | null {
  const [t] = useTranslation()
  const { personId, userLoading } = useEffectiveUser()
  const { currentTreeId } = useGroupsContext()
  const treeMatchUsingMatchFeatureIsOn = useFeatureFlag('TreeData_treeMatchUsingMatch').isOn
  const copyAllOverlay = useOverlay()

  const actions = [
    {
      label: t('groups.copy-all.action'),
      'data-testid': 'copy-all-button',
      onClick: copyAllOverlay.handleClick,
    },
  ]

  const {
    loading: copyBranchLoading,
    copyType,
    handleCopy,
  } = useCopyPrivatePersons({
    selectTree,
    treeId: treeId ?? currentTreeId,
    onCopyComplete,
    stopPathProgression: true,
  })

  const showStatusOverlay: (props: ShowStatusOverlayProps) => void = useStatusOverlay()

  const queries = new URLSearchParams({
    treeMatchUsingMatchEx: treeMatchUsingMatchFeatureIsOn.toString(),
  })

  const [{ loading: loadingMatchData, data: matchData }, fetchMatches] = useZionAxios<TreeMatchResult[], string[]>(
    {
      url: `/service/tree/tree-data/user/CURRENT/tree/${treeId ?? currentTreeId}/match-persons?${queries.toString()}`,
      method: 'POST',
    },
    { manual: true }
  )

  const overlay = useOverlay()
  const matchesOverlay = useOverlay()
  const handleMatchesCopyComplete = (): void => {
    matchesOverlay.close()
    overlay.close()
    onCopyComplete?.()
  }
  const handleDone = async (pids: string[]): Promise<void> => {
    try {
      const { data } = await fetchMatches({ data: pids })
      if (data.length === 0) {
        throw new Error('No pids returned in response')
      }
      const hasMatches = data.some(({ type }) => type !== 'NOT_A_MATCH')

      if (hasMatches) {
        matchesOverlay.open()
      } else {
        await handleCopy('ids', pids)
        overlay.close()
      }
    } catch (err) {
      showStatusOverlay({
        type: 'error',
        message: t('groups.copy-from-private-tree-general.error'),
        actionLabel: t('groups.retry.action'),
        actionCallback: () => handleDone(pids),
      })
    }
  }

  const pedigreeProps = {
    selectProps: [{ living: true }, { living: false, visibleToAllWhenUsingFamilySearchApps: false }],
  }

  useEffect(() => {
    onLoadingChange?.(Boolean(copyBranchLoading))
  }, [copyBranchLoading, onLoadingChange])

  if (userLoading) return null

  return (
    <>
      <GroupsProvider treeIdOverride="PRIVATE" LoadingComponent={ProviderLoadingComponent}>
        <SelectSiblingPedigreeButton
          asListItem={asListItem}
          personId={personId}
          pedigreeProps={pedigreeProps}
          overlay={overlay}
          theaterOverlayProps={{
            actions,
            title: t('groups.select-people-to-copy.heading'),
            subtitle: t('groups.people-will-be-copied.subtitle'),
          }}
          doneLabel={t('groups.copy-to-group.action')}
          CopyToGroupButtonProps={{
            disabled: loadingMatchData || copyBranchLoading,
            Icon: loadingMatchData || copyBranchLoading ? NoticeLoading : false,
          }}
          listItemProps={{
            'data-testid': 'copy-select-people',
            ...listItemProps,
            primaryText: t('groups.copy-select-people.action'),
            disabled: copyBranchLoading || listItemDisabled,
            startElement:
              copyBranchLoading && copyType === 'ids' ? <ListItem.Icon Icon={NoticeLoading} /> : startElement,
          }}
          buttonProps={{
            fullWidth: true,
            'data-testid': 'copy-select-people',
            emphasis: 'medium',
            ...buttonProps,
            disabled: copyBranchLoading || buttonDisabled,
            Icon: copyBranchLoading && copyType === 'ids' ? NoticeLoading : Icon,
          }}
          handleDone={handleDone}
        >
          {t('groups.copy-select-people.action')}
        </SelectSiblingPedigreeButton>
      </GroupsProvider>

      <Suspense fallback="">
        {(matchesOverlay.isOpen || matchesOverlay.transitioning) && (
          <CopyMatchesOverlay
            overlay={matchesOverlay}
            matchData={matchData}
            treeId={(treeId ?? currentTreeId)!}
            onCopyComplete={handleMatchesCopyComplete}
          />
        )}
        {(copyAllOverlay.isOpen || copyAllOverlay.transitioning) && (
          <CopyAllOverlay
            overlay={copyAllOverlay}
            onCopyComplete={() => {
              overlay.close()
              onCopyComplete?.()
              copyAllOverlay.close()
            }}
          />
        )}
      </Suspense>
    </>
  )
}
