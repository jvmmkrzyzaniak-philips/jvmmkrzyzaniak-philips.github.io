import React, { type Dispatch, type SetStateAction, useMemo, useState } from 'react'
import type { UseOverlayReturnOptions } from '@fs/zion-ui'
import { TransitioningDialogOverlay } from '@fs/zion-ui'
import { Route, RouteToParentRouter, Switch } from '@fs/zion-router'
import { useUser } from '@fs/zion-user'
import type { GroupMember } from '@fs/zion-tree-types'
import type { History } from 'history'
import SettingMePersonErrorRouteView from './SettingMePersonErrorRouteView'
import SelectMePersonRouteView from './SelectMePersonRouteView'
import LoadingRouteView from '../../common-components/LoadingRouteView'
import { useGroupMemberDetails, useGroupMembers } from '../../../services/groupCalls'
import { usePrivatePersons } from '../../../providers/PrivatePersonsProvider'
import SelectPersonProvider from '../../../providers/SelectPersonProvider'
import JoinGroupWelcomeRouteView from '../../_routeViews/join-group-welcome/JoinGroupWelcomeRouteView'
import FamilyGroupTermsRouteView from '../../_routeViews/legal-terms/FamilyGroupTermsRouteView'
import { AdminOnboardingOverview } from '../onboarding-flows/AdminOnboardingOverview'

type Props = {
  /** Get these props from useOverlay from ZionUI. */
  overlay: UseOverlayReturnOptions
  /** Group Id that the group member is a part of */
  groupId: string | undefined
  /** Tree Id of the tree the group has created */
  treeId: string | undefined
  /** If no groupMemberDetails is passed in we will fetch the data, not needed if group member information is passed via groupMembers  */
  groupMemberDetails?: GroupMember
  /** A callback the gets called when the user leaves the group or accept terms in an empty family group tree */
  onClose?: () => void
  /** Only use replaceMePerson when replacing a me person */
  replaceMePerson?: boolean
  /** An Array of groupMember objects of the group */
  groupMembers?: GroupMember[]

  onAccept?: () => Promise<void>

  setShowOnboardingFlow: Dispatch<SetStateAction<boolean>>
}

function SetMePersonOverlayContent({
  overlay,
  groupMemberDetails,
  groupId,
  treeId,
  onClose,
  onAccept,
  replaceMePerson,
  setShowOnboardingFlow,
  groupMembers,
}: Props): JSX.Element {
  const [nonClosable, setNonClosable] = useState(false)
  const { userLoading, cisId, gender } = useUser()
  const currentMemberDetails = groupMemberDetails || groupMembers?.find((member) => member.memberCisId === cisId)
  const { memberDetails } = useGroupMemberDetails({
    groupId,
    cisId,
    defaultState: currentMemberDetails,
    ignoreDataCall: replaceMePerson,
  })
  const { adminCisIds, isLoading: isLoadingAdminCisIds } = useGroupMembers({ groupId, defaultState: groupMembers })
  const isAdmin = adminCisIds.includes(cisId)
  const { privatePersons, loading: privatePersonsLoading } = usePrivatePersons() ?? {}
  const { recommendedPersonId, personSharingAccepted } = memberDetails ?? {}

  const recommendedPerson = privatePersons.find((person) => person.id === recommendedPersonId && !person.mePersonCisId)
  const viewPersonPath = '/person'
  const selectPersonPath = '/select'
  const errorPath = '/error'

  const startingRoute = useMemo(() => {
    let route = '/terms'
    if (personSharingAccepted || replaceMePerson) {
      route = '/select'
    }
    return route
  }, [replaceMePerson, personSharingAccepted])

  function onStage1Close(): void {
    onClose?.()
    overlay.close()
  }

  async function onStage1OnAccept(history: History): Promise<void> {
    setShowOnboardingFlow(true)
    await onAccept?.()
    if (privatePersons.length === 0) {
      overlay.close()
    } else if (recommendedPersonId) {
      history.replace(viewPersonPath)
    } else {
      history.replace(selectPersonPath)
    }
  }

  const loading =
    userLoading ||
    isLoadingAdminCisIds ||
    !groupId ||
    !cisId ||
    (!replaceMePerson &&
      (privatePersonsLoading || !memberDetails || (startingRoute === viewPersonPath && !recommendedPerson)))

  return (
    <TransitioningDialogOverlay
      {...overlay}
      initialEntries={['/loading']}
      initialIndex={0}
      maxHeight={600}
      minHeight={600}
      closeOnClickAway={false}
      nonClosable={nonClosable}
    >
      <Route path="/loading">
        <LoadingRouteView loading={loading} initialEntries={[startingRoute]} initialIndex={0} />
      </Route>
      <Route path="/terms">
        <FamilyGroupTermsRouteView
          groupId={groupId}
          cisId={cisId}
          onClose={onStage1Close}
          onAccept={onStage1OnAccept}
          setNonClosable={setNonClosable}
        />
      </Route>
      <Route path={[viewPersonPath, selectPersonPath]}>
        {/* We are only using SelectPersonProvider because the paginator needs it. */}
        <SelectPersonProvider>
          <Switch>
            <Route path={viewPersonPath}>
              <JoinGroupWelcomeRouteView
                treeId={treeId}
                settingMePersonErrorPath={errorPath}
                searchListPath={selectPersonPath}
                recommendedPerson={recommendedPerson}
              />
            </Route>
            <Route path={selectPersonPath}>
              <SelectMePersonRouteView
                userGender={gender}
                to={viewPersonPath}
                adminCisIds={adminCisIds}
                isAdmin={isAdmin}
              />
            </Route>
            <Route path="*">
              <RouteToParentRouter />
            </Route>
          </Switch>
        </SelectPersonProvider>
      </Route>
      <Route path={errorPath}>
        <SettingMePersonErrorRouteView groupId={groupId} />
      </Route>
      <Route path="*">
        <RouteToParentRouter />
      </Route>
    </TransitioningDialogOverlay>
  )
}

/** SetMePersonOverlay is a flow to set the users me person in a FGT that is being used as their starting person too. Don't gate with isOpen and transitioning.
 */
export default function SetMePersonOverlay({ overlay, ...args }: Omit<Props, 'setShowOnboardingFlow'>): JSX.Element {
  const [showOnboardingFlow, setShowOnboardingFlow] = useState(false)

  return (
    <>
      {(overlay.isOpen || overlay.transitioning) && (
        <SetMePersonOverlayContent setShowOnboardingFlow={setShowOnboardingFlow} overlay={overlay} {...args} />
      )}
      {showOnboardingFlow && <AdminOnboardingOverview />}
    </>
  )
}
