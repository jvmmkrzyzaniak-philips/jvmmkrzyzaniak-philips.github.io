import React, { useEffect } from 'react'
import { DialogOverlayActions, useOverlayUpdate, Paragraph, Row, Grid, useContainerWidth } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { ChatCreateButton, CHAT_ROUTE_KEY, buildChatRoute } from '@fs/zion-chat'
import { NoticeLoading } from '@fs/zion-icon'
import type { Gender, Person } from '@fs/zion-tree-types'
import SearchPrivatePersonsRouteView from '../../common-components/SearchPrivatePersonsRouteView'

const goToNextRoute = async (): Promise<true> => true

function getNonMePersons(privatePersons: Person[]): Person[] {
  return privatePersons.filter((privatePerson) => !privatePerson.mePersonCisId)
}

type Props = {
  // The gender of the current user
  userGender: Gender
  // An Array of the admin CisIds of the group that the tree belongs to
  adminCisIds: string[]
  // The route to go to when the person is selected
  to: string
  loading?: boolean
  isAdmin?: boolean
}

/** SelectMePersonRouteView displays a list of private persons that can be set as the me person. It is used as a part of the join flow in the group-management app.
 */
export default function SelectMePersonRouteView({ userGender, to, adminCisIds, loading, isAdmin }: Props): JSX.Element {
  const [t] = useTranslation()
  const atWidth = useContainerWidth()
  const updateTitle = useOverlayUpdate('title')
  const updateFooter = useOverlayUpdate('footer')

  const footerColumns = atWidth({
    default: 12,
    sm: 6,
  })

  useEffect(() => {
    updateTitle(t('groups.select-me-person.heading'))
  }, [t, updateTitle])

  useEffect(() => {
    updateFooter(
      !isAdmin && (
        <Grid guttersX="md" alignY="middle">
          <Paragraph size="sm" columns={footerColumns}>
            {t('groups.select-me-person.help.description')}
          </Paragraph>

          <DialogOverlayActions columns={footerColumns}>
            <ChatCreateButton
              chatRoute={buildChatRoute(CHAT_ROUTE_KEY.CREATE_DIRECT_CHAT)}
              supportChatInformation={{
                to: adminCisIds,
                about: { text: t('groups.ask-admin-suggestion-text.description') },
              }}
              useIconButton={false}
              hideIcon
              buttonText={t('groups.admin-help.action')}
              disabled={adminCisIds?.length === 0}
            />
          </DialogOverlayActions>
        </Grid>
      )
    )
  }, [adminCisIds, footerColumns, isAdmin, t, updateFooter])

  if (loading)
    return (
      <Row alignX="center">
        <NoticeLoading size="lg" />
      </Row>
    )

  return (
    <SearchPrivatePersonsRouteView
      to={to}
      buttonText={t('groups.select.action')}
      alreadySelectedText={t('groups.already-selected.label')}
      onSelect={goToNextRoute}
      linkName="select me person"
      filterPersons={getNonMePersons}
      sexFilter={userGender}
      disableUseInvites
    />
  )
}
