import { Button, DialogOverlayActions, type UseOverlayReturnOptions } from '@fs/zion-ui'
import React, { Suspense, lazy } from 'react'
import { useTranslation } from 'react-i18next'
import PreferredTreeButton from './PreferredTreeButton'
import type usePreferredGroupTree from './usePreferredGroupTree'
import { useGroupsContext } from '../../providers/GroupsProvider/InnerGroupsProvider'

const PreferredTreeOverlay = lazy(() => import('./PreferredTreeOverlay'))
const FamilySearchAsPreferredTreeOverlay = lazy(() => import('./FamilySearchAsPreferredTreeOverlay'))

type Props = {
  preferredTreeOverlay: UseOverlayReturnOptions
  familySearchAsPreferredTreeOverlay: UseOverlayReturnOptions
} & Pick<
  ReturnType<typeof usePreferredGroupTree>,
  'disableOverlay' | 'currentTreeName' | 'preferredTreeName' | 'updatePreferredTree' | 'isUpdatingPreferredTree'
>

export default function PreferredTreeOverlays({
  preferredTreeOverlay,
  familySearchAsPreferredTreeOverlay,
  preferredTreeName,
  currentTreeName,
  disableOverlay,
  updatePreferredTree,
  isUpdatingPreferredTree,
}: Props): JSX.Element {
  const [t] = useTranslation()
  const { currentTreeId } = useGroupsContext()
  const showCancel = Boolean(currentTreeId)

  return (
    <Suspense fallback="">
      {(preferredTreeOverlay.isOpen || preferredTreeOverlay.transitioning) && (
        <PreferredTreeOverlay
          overlay={preferredTreeOverlay}
          preferredTreeName={preferredTreeName}
          currentTreeName={currentTreeName}
          footer={
            <DialogOverlayActions>
              <Button
                data-testid="dismiss-set-preferred-tree-overlay"
                onClick={() => {
                  disableOverlay()
                  preferredTreeOverlay.close()
                }}
              >
                {t('groups.my-private-tree-overlay.action')}
              </Button>
              <PreferredTreeButton
                data-testid="set-preferred-tree-overlay-button"
                emphasis="medium"
                onClick={() => {
                  updatePreferredTree().then(() => preferredTreeOverlay.close())
                }}
                isUpdatingPreferredTree={isUpdatingPreferredTree}
              />
            </DialogOverlayActions>
          }
        />
      )}

      {(familySearchAsPreferredTreeOverlay.isOpen || familySearchAsPreferredTreeOverlay.transitioning) && (
        <FamilySearchAsPreferredTreeOverlay
          overlay={familySearchAsPreferredTreeOverlay}
          showCancel={showCancel}
          onContinue={() => {
            updatePreferredTree('PRIVATE')
            familySearchAsPreferredTreeOverlay.close()
          }}
        />
      )}
    </Suspense>
  )
}
