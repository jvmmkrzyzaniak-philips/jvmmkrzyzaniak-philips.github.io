import { Button, IconButton, Paragraph, QuickGlanceOverlay, Row, useOverlay } from '@fs/zion-ui'
import React from 'react'
import type { EventHandler, MouseEvent, KeyboardEvent, ComponentProps } from 'react'
import { useTranslation } from 'react-i18next'
import { NoticeInfo, NoticeLoading } from '@fs/zion-icon'

type Props = {
  emphasis?: ComponentProps<typeof Button>['emphasis']
  labelSize?: ComponentProps<typeof Paragraph>['size']
  'data-testid'?: string
  onClick?: EventHandler<MouseEvent | KeyboardEvent>
  isUpdatingPreferredTree: boolean
  isPreferredTreeSelected?: boolean
}

export default function PreferredTreeButton({
  'data-testid': dataTestId = 'pref-tree-button',
  emphasis,
  labelSize,
  onClick,
  isUpdatingPreferredTree,
  isPreferredTreeSelected,
}: Props): JSX.Element {
  const [t] = useTranslation()
  const overlay = useOverlay()

  return isPreferredTreeSelected ? (
    <>
      <Row alignItemsY="middle" alignX="center">
        <Paragraph size={labelSize}>{t('groups.your-preferred-tree.label')}</Paragraph>
        <IconButton title="" data-testid="your-pref-tree-info-button" Icon={NoticeInfo} onClick={overlay.handleClick} />
      </Row>
      <QuickGlanceOverlay {...overlay} placement={['bottom', 'top']}>
        <Paragraph size="sm">{t('groups.your-preferred-tree.description')}</Paragraph>
      </QuickGlanceOverlay>
    </>
  ) : (
    <Button
      data-testid={dataTestId}
      emphasis={emphasis}
      fullWidth
      disabled={isUpdatingPreferredTree}
      Icon={isUpdatingPreferredTree ? NoticeLoading : undefined}
      onClick={onClick}
    >
      {t('groups.set-preferred-tree.action')}
    </Button>
  )
}
