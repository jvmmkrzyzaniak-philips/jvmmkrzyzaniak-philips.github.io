import { useStatusOverlay } from '@fs/zion-ui'
import { useTranslation } from 'react-i18next'
import { usePreference as usePreferenceUntyped, setPreference } from '@fs/zion-preferences'
import { type usePreference as usePreferenceTyped } from '@fs/zion-tree-types/zion-preferences'
import { useGroupsContext } from '../../providers/GroupsProvider/InnerGroupsProvider'

const usePreference = usePreferenceUntyped as typeof usePreferenceTyped

const PRIVATE_AS_DEFAULT_OVERLAY_PREF = 'tree.newPreferredTreeOverlay'

type TreeId = string

type ReturnValue = {
  hasDismissedOverlay: boolean
  updatePreferredTree: (treeIdOverride?: 'PRIVATE') => Promise<void>
  isUpdatingPreferredTree: boolean
  isPreferredTreeSelected: boolean
  canSetPreferredTree: boolean
  preferredTreeName: string
  currentTreeName: string
  disableOverlay: () => Promise<void>
}

export default function usePreferredGroupTree(): ReturnValue {
  const [t] = useTranslation()
  const showStatusOverlay = useStatusOverlay()
  const dismissOverlayCount = usePreference<[string], number>(PRIVATE_AS_DEFAULT_OVERLAY_PREF)
  const { currentTreeId, currentGroup, groups, preferredTreeId, loading, setPreferredTreeId, loadingPreferredTreeId } =
    useGroupsContext()

  // NOTE May 22, 2024: currentTreeId returns an empty string for a PRIVATE tree due to legacy reasons. That will be updated. If it is undefined, then it is in helper mode, so we want to return null.
  const privateTreeId = currentTreeId === '' ? 'PRIVATE' : undefined
  const treeId: TreeId | 'PRIVATE' | undefined = currentTreeId || privateTreeId

  const hasDismissedOverlay = typeof dismissOverlayCount === 'number' && dismissOverlayCount > 0

  const disableOverlay = async (): Promise<void> =>
    !hasDismissedOverlay ? setPreference(PRIVATE_AS_DEFAULT_OVERLAY_PREF, 1) : undefined

  const updatePreferredTree = async (treeIdOverride?: 'PRIVATE'): Promise<void> => {
    if (!treeId || !setPreferredTreeId) {
      return
    }
    await setPreferredTreeId(treeIdOverride || treeId)
    showStatusOverlay({
      message: t('groups.set-preferred-tree.success', {
        groupName:
          treeIdOverride || !currentGroup ? t('groups.navigation.family-search-tree.label') : currentGroup.name,
      }),
    })
  }

  const isPreferredTreeSelected = preferredTreeId === treeId
  const canSetPreferredTree = Boolean(!loading || treeId || dismissOverlayCount === undefined)
  const preferredGroupTreeName = groups
    ?.filter((group) => group.treeIds?.[0] === preferredTreeId)
    .map((group) => group.name)?.[0]

  const preferredTreeName: string = preferredGroupTreeName || t('groups.navigation.family-search-tree.label')

  const currentTreeName = currentGroup ? currentGroup.name : t('groups.navigation.family-search-tree.label')

  return {
    hasDismissedOverlay,
    updatePreferredTree,
    isUpdatingPreferredTree: Boolean(loadingPreferredTreeId),
    isPreferredTreeSelected,
    canSetPreferredTree,
    preferredTreeName,
    currentTreeName,
    disableOverlay,
  }
}
