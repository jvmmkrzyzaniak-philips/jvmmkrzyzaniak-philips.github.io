import React, { useEffect } from 'react'
import { Button, DialogOverlayActions, useOverlayUpdate, useStatusOverlay } from '@fs/zion-ui'
import ZionForm, { useWatch, useZionForm } from '@fs/zion-form'
import { trackLink } from '@fs/zion-analytics'
import { useHistory } from '@fs/zion-router'
import { useTranslation } from 'react-i18next'
import type { History } from 'history'
import FamilyGroupTreeLegalTerms from '../../legal-terms/FamilyGroupTreeLegalTerms'
import { leaveGroup } from '../../../services/cacheGroupCalls'
import { setPersonSharingAccepted } from '../../../services/updateMember'

type Props = {
  groupId: string | undefined
  cisId: string
  onClose: () => void
  onAccept?: (history: History) => Promise<void> | void
  setNonClosable: (isNonClosable: boolean) => void
}

export default function FamilyGroupTermsRouteView({
  groupId,
  cisId,
  onClose,
  onAccept,
  setNonClosable,
}: Props): JSX.Element {
  const [t] = useTranslation()
  const updateTitle = useOverlayUpdate('title')
  const updateFooter = useOverlayUpdate('footer')
  const title = t('group.shared-group-tree.heading')
  const history: History = useHistory()
  const statusOverlay = useStatusOverlay()
  const methods = useZionForm({
    mode: 'onSubmit',
    defaultValues: { agreeJoinCheckTree1: false, agreeJoinCheckTree2: false },
  })
  const [agreeJoinCheckTree1, agreeJoinCheckTree2] = useWatch({
    name: ['agreeJoinCheckTree1', 'agreeJoinCheckTree2'],
    control: methods.control,
  })

  async function acceptTerms(): Promise<void> {
    if (groupId && cisId) {
      try {
        await setPersonSharingAccepted(groupId, cisId, true)
        setNonClosable(false)
        await onAccept?.(history)
      } catch (error) {
        statusOverlay({ message: t('groups.general-error.error'), type: 'error' })
      }
    }
  }

  useEffect(() => {
    updateTitle(title)
  }, [title, updateTitle])

  useEffect(() => {
    function leaveGroupFunc(): void {
      leaveGroup(groupId!).then(() => {
        // groupId will always be defined when this function is called because the button that calls it is disabled if there is no groupId.
        trackLink({ name: 'existing group to FGT:group:leave' })
        onClose?.()
      })
    }

    updateFooter(
      <DialogOverlayActions>
        <Button data-testid="leave-group-button" onClick={leaveGroupFunc} disabled={!groupId}>
          {t('groups.leave-group.action')}
        </Button>
        <Button
          data-testid="accept-FGT-terms-button"
          form="FGT_terms"
          emphasis="high"
          type="submit"
          disabled={!agreeJoinCheckTree1 || !agreeJoinCheckTree2}
        >
          {t('groups.accept.action')}
        </Button>
      </DialogOverlayActions>
    )
  }, [agreeJoinCheckTree1, agreeJoinCheckTree2, groupId, onClose, t, updateFooter])

  useEffect(() => {
    setNonClosable(true)
  }, [setNonClosable])

  return (
    <ZionForm id="FGT_terms" methods={methods} onSubmit={acceptTerms}>
      <FamilyGroupTreeLegalTerms />
    </ZionForm>
  )
}
