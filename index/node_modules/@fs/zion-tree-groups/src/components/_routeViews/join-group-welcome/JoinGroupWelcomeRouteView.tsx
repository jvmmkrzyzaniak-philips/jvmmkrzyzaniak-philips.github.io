import { NoticeLoading } from '@fs/zion-icon'
import { Paragraph, Button, DialogOverlayActions, useOverlayUpdate, Separator } from '@fs/zion-ui'
import axios from '@fs/zion-axios'
import React, { useCallback, useEffect, useRef, useState } from 'react'
import { useTranslation } from 'react-i18next'
import { useHistory } from '@fs/zion-router'
import type { Person, TreeId } from '@fs/zion-tree-types'
import type { History } from 'history'
import PersonOneHopCard from './PersonOneHopCard'
import { useGroupsContext } from '../../../providers/GroupsProvider/InnerGroupsProvider'
import type { PersonsState } from './updatePersons'
import updatePersons from './updatePersons'
import { clearStartingPidCache } from '../../../services/cacheGroupCalls'

type Props = {
  treeId: string | undefined
  settingMePersonErrorPath: string
  searchListPath: string
  recommendedPerson?: Person
  redirectUrl?: string
}

/** @deprecated JoinGroupWelcomeRouteView is the route view the shows the details of the person that is being used to perform the next action. This was originally a part of the join flow in the group-management app
 */
export default function JoinGroupWelcomeRouteView({
  treeId,
  settingMePersonErrorPath,
  searchListPath,
  recommendedPerson,
  redirectUrl,
}: Props): JSX.Element {
  const [t] = useTranslation()
  const [{ loading, error, person, spouses, parentSets }, setPersons] = useState<PersonsState>({
    loading: true,
  })
  const { selectTree } = useGroupsContext()
  const [isSettingMePerson, setIsSettingMePerson] = useState(false)
  const isCurrent = useRef(true)
  const history: History<{ person: Person } | undefined> = useHistory()
  const updateTitle = useOverlayUpdate('title')
  const updateFooter = useOverlayUpdate('footer')
  const newSelectedPerson = history.location.state?.person
  /* Why we are doing this? We ran into one of two issues when using the SelectPersonProvider.
   * 1- The recommended person would always show even when selecting a new person.
   * 2- When there was a recommendedPersonId the selected person would always be undefined when going directly to this route.
   */
  const personSelected = newSelectedPerson || recommendedPerson

  const onYesClick = useCallback(() => {
    if (person) {
      setIsSettingMePerson(true)
      axios
        .put(`/service/tree/tree-data/user/CURRENT/tree/${treeId}/person/${person.id}`)
        .then(() => clearStartingPidCache())
        .then(() => {
          window.location.assign(redirectUrl ?? `/tree/pedigree/portrait/${person.id}/?treeId=${treeId}`)
          return undefined
        })
        .catch(() => {
          setIsSettingMePerson(false)
          history.replace(settingMePersonErrorPath)
        })
    }
  }, [person, treeId, redirectUrl, history, settingMePersonErrorPath])

  const onNotMeClick = useCallback(() => {
    treeId &&
      selectTree?.(treeId as TreeId)
        .then(() => history.replace(searchListPath))
        .catch(console.error)
  }, [history, searchListPath, selectTree, treeId])

  useEffect(() => {
    isCurrent.current = true

    personSelected?.id &&
      updatePersons({
        isCurrent,
        pid: personSelected.id,
        setPersons,
        treeId,
        fallbackPerson: personSelected,
      })

    return () => {
      isCurrent.current = false
    }
  }, [personSelected, personSelected?.id, treeId])

  useEffect(() => {
    if (error) history.replace(settingMePersonErrorPath)
  }, [error, history, settingMePersonErrorPath])

  useEffect(() => {
    updateFooter(
      <DialogOverlayActions>
        <Button
          data-testid="not-me-button"
          linkName="Join Welcome Group:Not Me"
          onClick={onNotMeClick}
          disabled={loading || isSettingMePerson || !!error}
          Icon={loading ? NoticeLoading : undefined}
        >
          {t('groups.change-starting-person.action')}
        </Button>
        <Button
          emphasis="high"
          data-testid="yes-continue-button"
          linkName="Join Welcome Group: Yes"
          onClick={onYesClick}
          disabled={loading || isSettingMePerson || !!error}
          Icon={loading || isSettingMePerson ? NoticeLoading : undefined}
        >
          {t('groups.yes-continue.action')}
        </Button>
      </DialogOverlayActions>
    )
  }, [error, isSettingMePerson, loading, onNotMeClick, onYesClick, t, updateFooter])

  useEffect(() => {
    updateTitle(t('groups.welcome.heading'))
  }, [updateTitle, t])

  return (
    <>
      <Paragraph size="sm">{t('groups.is-this-you.heading')}</Paragraph>
      <Separator size="nano" />

      {!error && person && (
        <PersonOneHopCard isLoading={loading} person={person} spouses={spouses} parentSets={parentSets} />
      )}
    </>
  )
}
