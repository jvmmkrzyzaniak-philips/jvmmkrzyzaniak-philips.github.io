import { Conclusion } from '@fs/zion-conclusion'
import { Person } from '@fs/zion-person'
import type { FamilyMemberPerson, Person as PersonType } from '@fs/zion-tree-types'
import {
  Paragraph,
  Cell,
  DataPreview,
  Grid,
  LayoutBand,
  MarginBox,
  Separator,
  Skeleton,
  colors,
  usePageWidth,
} from '@fs/zion-ui'
import React from 'react'
import { useTranslation } from 'react-i18next'

type Props = {
  isLoading: boolean
  person: PersonType & { fallbackPerson?: true }
  parentSets?: FamilyMemberPerson[][]
  spouses?: FamilyMemberPerson[]
}

export default function PersonOneHopCard({ isLoading, person, parentSets, spouses }: Props): JSX.Element {
  const [t] = useTranslation()
  const isMobile = usePageWidth()({ default: true, md: false })
  const thereAreOneHops = (spouses && spouses.length > 0) || (parentSets && parentSets.length > 0)
  const conclusion = person?.birth || person?.christening

  return (
    <div>
      <DataPreview.Loading loading={isLoading}>
        <div data-testid="loading-skeletons">
          <Skeleton.PersonBlock size="md" />

          <Separator />
          <Grid guttersY="none" gutters="md">
            <Grid columns={isMobile ? 12 : 6}>
              <Skeleton.H5 maxWidth={200} subheadingLineCount={1} />
              <Skeleton.H5 maxWidth={200} subheadingLineCount={1} />
            </Grid>

            {isMobile && <Separator />}

            <Grid columns={isMobile ? 12 : 6}>
              <Cell>
                <Skeleton.Paragraph maxWidth={100} size="xs" />
                <Skeleton.PersonBlock maxWidth={200} />
              </Cell>
              <Cell>
                <Skeleton.Paragraph maxWidth={100} size="xs" />
                <Skeleton.PersonBlock maxWidth={200} />
                <Skeleton.PersonBlock maxWidth={200} />
              </Cell>
            </Grid>
          </Grid>
        </div>
      </DataPreview.Loading>

      <DataPreview.Ready loading={isLoading}>
        {person && (
          <MarginBox marginX="xxs">
            <LayoutBand
              columns={!!conclusion && !isMobile ? 6 : 12}
              color={colors.gray02}
              style={{ borderRadius: '8px' }}
            >
              <MarginBox marginX="nano" marginY="xs">
                <Person personObj={person} componentSize="md" avatarSize="smaller" />
                <Separator />
                {person.fallbackPerson && <Paragraph size="sm">{t('groups.not-all-info-displayed.error')}</Paragraph>}
                <Grid guttersY="none" gutters="md">
                  {!!conclusion && (
                    <Cell columns={thereAreOneHops && !isMobile ? 6 : 12}>
                      <Conclusion disableOverlay hideWarnings conclusion={conclusion} />
                    </Cell>
                  )}
                  {thereAreOneHops && (
                    <div columns={!!conclusion && !isMobile ? 6 : 12}>
                      {isMobile && <Separator />}

                      <Grid>
                        {spouses && spouses.length > 0 && (
                          <>
                            <Paragraph size="xs">{t('groups.spouses.label', { count: spouses.length })}</Paragraph>
                            <Separator size="nano" />
                            {spouses.map((spouse) => (
                              <Person
                                noBoldName
                                key={spouse.id}
                                personObj={spouse}
                                componentSize="sm"
                                avatarSize="smaller"
                              />
                            ))}
                          </>
                        )}
                        {parentSets && parentSets.length > 0 && (
                          <>
                            <Paragraph size="xs">{t('groups.parents.label')}</Paragraph>
                            <Separator size="nano" />
                            <Grid>
                              {parentSets.map((parentSet) => (
                                <Cell key={`set:${parentSet.map((parent) => parent.id)}`}>
                                  {parentSet.map((parent) => (
                                    <Person
                                      noBoldName
                                      key={parent.id}
                                      personObj={parent}
                                      componentSize="sm"
                                      avatarSize="smaller"
                                    />
                                  ))}
                                </Cell>
                              ))}
                            </Grid>
                          </>
                        )}
                      </Grid>
                    </div>
                  )}
                </Grid>
              </MarginBox>
            </LayoutBand>
          </MarginBox>
        )}
      </DataPreview.Ready>
    </div>
  )
}
