import axios from '@fs/zion-axios'
import type { FamilyMemberPerson, FamilyMembers, Person } from '@fs/zion-tree-types'
import type { Dispatch, MutableRefObject, SetStateAction } from 'react'
import type { Axios } from '@fs/zion-tree-types/zion-axios'

export type PersonsState =
  | {
      loading: true
      error?: undefined
      person?: undefined
      spouses?: undefined
      parentSets?: undefined
    }
  | {
      loading: false
      error: true
      person?: undefined
      spouses?: undefined
      parentSets?: undefined
    }
  | {
      loading: false
      error?: undefined
      person: Person & { fallbackPerson?: true }
      spouses?: FamilyMemberPerson[] | undefined
      parentSets?: FamilyMemberPerson[][] | undefined
    }

type Props = {
  isCurrent: MutableRefObject<boolean>
  pid: string
  setPersons: Dispatch<SetStateAction<PersonsState>>
  treeId: string | undefined
  fallbackPerson?: Person
}

export default async function updatePersons({
  isCurrent,
  pid,
  setPersons,
  treeId,
  fallbackPerson,
}: Props): Promise<void> {
  setPersons({ loading: true })
  try {
    const [{ data: family }, { data: person }] = await Promise.all([
      (axios as Axios).get<FamilyMembers>(
        `/service/tree/tree-data/r9/family-members/person/${pid}?includePhotos=true&treeId=${treeId}`
      ),
      (axios as Axios).get<Person>(`/service/tree/tree-data/v8/person/${pid}/card?treeId=${treeId}`),
    ])

    if (isCurrent.current) {
      const spouses = family.spouses.reduce<FamilyMemberPerson[]>((accum, spouseFamily) => {
        if (spouseFamily.parent1?.id === person.id && spouseFamily.parent2 && spouseFamily.parent2.id !== 'UNKNOWN') {
          accum.push(spouseFamily.parent2)
        } else if (
          spouseFamily.parent2?.id === person.id &&
          spouseFamily.parent1 &&
          spouseFamily.parent1.id !== 'UNKNOWN'
        ) {
          accum.push(spouseFamily.parent1)
        }
        return accum
      }, [])

      const parentSets = family.parents.reduce<FamilyMemberPerson[][]>((accum, parentSetFamily) => {
        const parentSet: FamilyMemberPerson[] = []
        if (parentSetFamily.parent1 && parentSetFamily.parent1.id !== 'UNKNOWN') parentSet.push(parentSetFamily.parent1)
        if (parentSetFamily.parent2 && parentSetFamily.parent2.id !== 'UNKNOWN') parentSet.push(parentSetFamily.parent2)
        if (parentSet.length > 0) accum.push(parentSet)
        return accum
      }, [])

      setPersons({
        loading: false,
        person,
        spouses,
        parentSets,
      })
    }
  } catch (error) {
    console.error(error)
    if (fallbackPerson) {
      setPersons({ loading: false, person: { ...fallbackPerson, fallbackPerson: true } })
    } else {
      setPersons({ loading: false, error: true })
    }
  }
}
