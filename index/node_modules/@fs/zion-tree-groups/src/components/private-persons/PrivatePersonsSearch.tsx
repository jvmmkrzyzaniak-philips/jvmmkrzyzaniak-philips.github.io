import React, { useCallback, useEffect, useState, useRef } from 'react'
import { useTranslation } from 'react-i18next'
import { Paragraph, TextField } from '@fs/zion-ui'
import { trackEvent } from '@fs/zion-analytics'
import { VisuallyHidden } from '@reach/visually-hidden'
import { usePrivatePersons } from '../../providers/PrivatePersonsProvider'

type Props = {
  /** How long (ms) to debounce user input before filtering private persons list. */
  debounceTime?: number
  /** Props to pass onto TextField */
  textFieldProps?: Record<string, unknown> & {
    disabled: boolean
    emphasis: string
  }
  initialSearchText?: string
  overridePersonsCount?: number
}
/** PrivatePersonsSearch allows the users to search the private persons.
 *  It is exported to provide consumers control over placement of the search input.
 */
export default function PrivatePersonsSearch({
  debounceTime = 500,
  textFieldProps,
  initialSearchText = '',
  overridePersonsCount,
}: Props): JSX.Element {
  const [t] = useTranslation()
  const [searchText, setSearchText] = useState(initialSearchText)
  const { setFilterText, privatePersonsCount, loading } = usePrivatePersons()
  const loadingCount = loading || !Number.isInteger(overridePersonsCount ?? privatePersonsCount)
  const hasTracked = useRef(false)
  const hasTyped = useRef(false)
  const enterPressed = useRef(false)

  const clearFilter = useCallback(() => {
    setSearchText('')
    setFilterText('')
    enterPressed.current = true
  }, [setFilterText])

  // Prevent every key stroke from filtering results
  useEffect(() => {
    const debounceTimeout = setTimeout(() => {
      if (searchText && !hasTracked.current) {
        hasTracked.current = true
        hasTyped.current = true
        trackEvent({ event_name: 'filtered private person search' })
      }
      if (hasTyped.current && !enterPressed.current) {
        setFilterText(searchText)
      }
      enterPressed.current = false
    }, debounceTime)

    return () => {
      clearTimeout(debounceTimeout)
    }
  }, [searchText, setFilterText, debounceTime])

  const handleOnEnter = (event): void => {
    if (event.key === 'Enter') {
      enterPressed.current = true
      setFilterText(searchText)
    }
  }

  return (
    /** The TextField expands to take up the space of the container it is in, if we dont add a div here there is no container
     * in the SearchPrivatePersonsRouteView and so when we filter and only a couple of persons are showing they appear
     * at the bottom of the list instead of the top
     */
    <div>
      <TextField
        aria-label={t('private-person-search.aria-label.search-field')}
        clearable
        data-testid="private-persons-search"
        maxLength={64}
        name="private-persons-search"
        placeholder={t('private-person-search.placeholder.search-by-name')}
        {...textFieldProps}
        // Don't allow `textFieldProps` to override these props
        onChange={(e) => setSearchText(e.target.value)}
        onKeyDown={handleOnEnter}
        onClear={clearFilter}
        value={searchText || ''}
      />

      <VisuallyHidden>
        <div role="region" id="personListResults" aria-live="polite">
          {loadingCount && <Paragraph>{t('groups.loading-persons.description')}</Paragraph>}
          {!loadingCount && (
            <Paragraph>
              {t('groups.show-person-count.description', {
                personCount: (overridePersonsCount || privatePersonsCount) ?? 0,
              })}
            </Paragraph>
          )}
        </div>
      </VisuallyHidden>
    </div>
  )
}
