import React, { Suspense, lazy, useRef } from 'react'
import { Ellipsis, ListItem, ListSubSection, useMenuOverlay, Button, Row } from '@fs/zion-ui'
import { ArrowCaret, LogoFamilysearch } from '@fs/zion-icon'
import { useTranslation } from 'react-i18next'
import { css } from '@linaria/core'
import { type TreeId, type TreeGroupSummary } from '@fs/zion-tree-types'
import { getSessionId } from '@fs/zion-session'
import { useGroupsContext } from '../../providers/GroupsProvider/InnerGroupsProvider'

const MenuOverlay = lazy(() => import('../common-components/TreeMenuOverlay'))

const buttonLabelClassName = css`
  font-weight: bold;
  text-transform: none;
`
const ellipsisCustomStyles = css`
  padding-bottom: 2px;
`

type TreeGroupSummaryWithTreeId = TreeGroupSummary & { treeIds: NonNullable<TreeGroupSummary['treeIds']> }

type Props = {
  /** Disable navigating to /tree/pedigree to switch trees on list item click.  */
  disableNavigation?: boolean // TODO deprecate disableNavigation and only use onListITemClickOverride in a major bump.
  /** Override selectTree-ing onClick behavior on list item click; menuOverlay is still closed afterward. This also disables navigation. */
  onListItemClickOverride?: (treeId: 'PRIVATE' | TreeId) => void
}

export default function GroupsNavigation({ disableNavigation, onListItemClickOverride }: Props): JSX.Element {
  const [t] = useTranslation()
  const menuOverlay = useMenuOverlay()

  const familySearchTreeLabel = t('groups.navigation.family-search-tree.label')

  const context = useGroupsContext()
  const { canAccessCET, canAccessFGT, currentGroup, groups, currentTreeId, treeDetails, selectTree } = context

  const { familyGroupTreeGroups, cetGroups } =
    groups?.reduce<{ familyGroupTreeGroups: TreeGroupSummaryWithTreeId[]; cetGroups: TreeGroupSummaryWithTreeId[] }>(
      (acc, group) => {
        if (group.types.includes('PRIVATE_PERSON_SHARING') && group.treeIds) {
          acc.familyGroupTreeGroups.push(group as TreeGroupSummaryWithTreeId)
        } else if (group.types.includes('RESEARCHER_TREE') && group.treeIds) {
          acc.cetGroups.push(group as TreeGroupSummaryWithTreeId)
        }
        return acc
      },
      { familyGroupTreeGroups: [], cetGroups: [] }
    ) ?? {}

  const buttonRef = useRef(null)

  const onClick = (treeId: 'PRIVATE' | TreeId): void => {
    if (onListItemClickOverride) {
      onListItemClickOverride(treeId)
    } else if (disableNavigation) {
      selectTree?.(treeId)
    }
    menuOverlay.close()
  }

  const willNavigate = !disableNavigation && !onListItemClickOverride

  return (
    <>
      {/* @ts-expect-error: Button only allows strings as children, but we need the span in order to get the truncated text to work */}
      <Button ref={buttonRef} onClick={menuOverlay.handleClick} data-testid="default-family-tree">
        <span className={buttonLabelClassName}>
          <Row alignY="middle" gutters="nano">
            <Ellipsis className={ellipsisCustomStyles}>
              {currentGroup?.name ?? treeDetails?.name ?? familySearchTreeLabel}
            </Ellipsis>
            <ArrowCaret noShrinkX direction="down" size="xs" />
          </Row>
        </span>
      </Button>
      {/* If targetRef.current is true then it means the menuOverlay has already been opened and we want to keep it in the dom to prevent refetching the group images again */}
      {(menuOverlay.isOpen || menuOverlay.transitioning || !!menuOverlay.targetRef.current) && (
        <Suspense fallback="">
          <MenuOverlay inline={false} {...menuOverlay}>
            <>
              <ListItem
                linkName="Navigation: To FamilySearch Tree"
                startElement={<ListItem.Icon Icon={LogoFamilysearch} />}
                primaryText={familySearchTreeLabel}
                secondaryText={t('groups.navigation.family-search-tree.description')}
                selected={currentTreeId === 'PRIVATE' || currentTreeId === ''}
                to={willNavigate && '/tree/pedigree/?treeId=PRIVATE'}
                external
                data-testid="tree-group-My-Private-Tree"
                onClick={() => onClick('PRIVATE')}
              />

              {canAccessFGT && familyGroupTreeGroups && familyGroupTreeGroups.length > 0 && (
                <ListSubSection
                  heading={t('groups.navigation.family-group-trees')}
                  fullWidth
                  aria-label={t('groups.navigation.family-group-trees')}
                >
                  {familyGroupTreeGroups.map((group) => (
                    <ListItem
                      linkName="Navigation: To FGT"
                      key={group.id}
                      startElement={
                        <ListItem.Avatar
                          monogram={group.name[0].toUpperCase()}
                          src={group.imageUrl ? `${group.imageUrl}?sessionId=${getSessionId()}` : undefined}
                        />
                      }
                      primaryText={<Ellipsis>{group.name}</Ellipsis>}
                      selected={group.treeIds[0] === currentTreeId}
                      to={willNavigate && `/tree/pedigree/?treeId=${group.treeIds[0]}`}
                      external
                      data-testid={`tree-group-${group.treeIds[0]}`}
                      onClick={() => onClick(group.treeIds[0])}
                    />
                  ))}
                </ListSubSection>
              )}

              {canAccessCET && cetGroups && cetGroups.length > 0 && (
                <ListSubSection
                  heading={t('groups.navigation.researcher-trees')}
                  fullWidth
                  aria-label={t('groups.navigation.researcher-trees')}
                >
                  {cetGroups.map((group) => (
                    <ListItem
                      linkName="Navigation: To ReT"
                      key={group.id}
                      startElement={
                        <ListItem.Avatar
                          monogram={group.name[0].toUpperCase()}
                          src={group.imageUrl ? `${group.imageUrl}?sessionId=${getSessionId()}` : undefined}
                        />
                      }
                      primaryText={<Ellipsis>{group.name}</Ellipsis>}
                      selected={group.treeIds[0] === currentTreeId}
                      to={willNavigate && `/tree/pedigree/?treeId=${group.treeIds[0]}`}
                      external
                      data-testid={`tree-society-${group.name}`}
                      onClick={() => onClick(group.treeIds[0])}
                    />
                  ))}
                </ListSubSection>
              )}
            </>
          </MenuOverlay>
        </Suspense>
      )}
    </>
  )
}
