import {
  List,
  QuickGlanceOverlay,
  Divider,
  ListItem,
  Skeleton,
  Separator,
  useOverlay,
  type UseOverlayReturnOptions,
} from '@fs/zion-ui'
import React, { type ChangeEventHandler } from 'react'
import { ContentAdd, ContentHistory } from '@fs/zion-icon'
import { Link } from '@fs/zion-router'
import { useTranslation } from 'react-i18next'
import { useGroupsContext } from '../../providers/GroupsProvider/InnerGroupsProvider'
import InviteMemberListItem from '../common-components/InviteMemberListItem'
import CopyBranchButton from '../_flows/copy-persons/CopyBranchButton'
import GroupBlock from '../common-components/GroupBlock'
import usePreferredGroupTree from '../PreferredTreeManager/usePreferredGroupTree'
import PreferredTreeToggle from '../PreferredTreeManager/PreferredTreeToggle'
import PreferredTreeOverlays from '../PreferredTreeManager/PreferredTreeOverlays'

type Props = {
  overlay: UseOverlayReturnOptions
}

export default function GroupDetailsOverlay({ overlay }: Props): JSX.Element {
  const [t] = useTranslation()
  const { selectTree, currentTreeId, isResearcherGroup, currentGroup } = useGroupsContext()
  const preferredTreeOverlay = useOverlay()
  const familySearchAsPreferredTreeOverlay = useOverlay()

  const {
    preferredTreeName,
    currentTreeName,
    disableOverlay,
    isUpdatingPreferredTree,
    updatePreferredTree,
    isPreferredTreeSelected,
    hasDismissedOverlay,
  } = usePreferredGroupTree()

  const onClick = (): void => {
    if (!hasDismissedOverlay) {
      preferredTreeOverlay.open()
    } else {
      updatePreferredTree(!currentTreeId ? 'PRIVATE' : undefined)
    }
  }

  const onToggle: ChangeEventHandler<HTMLInputElement> = (event) => {
    // NOTE: if the user un-checks the toggle, this will show as false
    if (!event.target.checked) {
      familySearchAsPreferredTreeOverlay.open()
    } else {
      onClick()
    }
  }

  return (
    <>
      <QuickGlanceOverlay placement="bottom-start" {...overlay}>
        {!currentTreeId ? (
          <PreferredTreeToggle onToggle={onToggle} isPreferredTreeSelected={isPreferredTreeSelected} />
        ) : (
          <>
            <GroupBlock />
            <Separator size="nano" />
            <List>
              <InviteMemberListItem />
              {!isResearcherGroup ? (
                <CopyBranchButton
                  asListItem
                  listItemProps={{ startElement: <ListItem.Icon Icon={ContentAdd} /> }}
                  treeId={currentTreeId}
                  selectTree={selectTree}
                  ProviderLoadingComponent={Skeleton.ListItem}
                />
              ) : (
                <ListItem
                  linkName="Navigation: Latest Changes Button"
                  data-testid="latest-changes-button"
                  startElement={<ListItem.Icon Icon={ContentHistory} />}
                  primaryText={t('groups.cet-latest-changes.action')}
                  target="_blank"
                  external
                  to={`/groups/research-tree/${currentGroup?.id}/changes`}
                />
              )}
            </List>
            <Divider marginY="nano" />

            <PreferredTreeToggle onToggle={onToggle} isPreferredTreeSelected={isPreferredTreeSelected} />
            <Separator size="nano" />

            {!isResearcherGroup ? (
              <Link
                to="https://www.familysearch.org/help/helpcenter/family-group-trees-learning-center"
                target="_blank"
              >
                {t('groups.need-help.label')}
              </Link>
            ) : (
              <Link
                to="https://www.familysearch.org/en/help/helpcenter/labs/researcher-trees-early-preview"
                target="_blank"
              >
                {t('groups.need-help-cet.label')}
              </Link>
            )}
          </>
        )}
      </QuickGlanceOverlay>

      <PreferredTreeOverlays
        preferredTreeOverlay={preferredTreeOverlay}
        familySearchAsPreferredTreeOverlay={familySearchAsPreferredTreeOverlay}
        preferredTreeName={preferredTreeName}
        currentTreeName={currentTreeName}
        disableOverlay={disableOverlay}
        updatePreferredTree={updatePreferredTree}
        isUpdatingPreferredTree={isUpdatingPreferredTree}
      />
    </>
  )
}
