import { useState, useEffect } from 'react'
import { getPreference, setPreference } from '@fs/zion-preferences'
import Cache from '@fs/zion-cache'
import type CacheType from '@fs/zion-tree-types/zion-cache'

export const cache = new Cache({ storeName: 'commonRouting', type: 'session' }) as CacheType<string>

export const pedigrees = ['first-ancestor', 'landscape', 'fanchart', 'descendancy', 'portrait', 'sibling']
export const views = ['person', 'pedigree']

const getLastViewedPidKey = (view: string): string => `${views.includes(view) ? view : 'person'}:lastViewedPid`
/*
 * Last Viewed Pedigree (cached in preferences)
 */
export const getLastViewedPedigree = async (): Promise<string> => {
  const pedigree = await getPreference(`tree.defaultPedigreeView`)
  return pedigrees.find((p) => p === pedigree) || ''
}

export const setLastViewedPedigree = (type: string): Promise<string> => {
  return setPreference(`tree.defaultPedigreeView`, pedigrees.includes(type) ? type : '')
}

/*
 * Last Viewed PID (cached in session storage)
 */
export const getLastViewedPid = (view = 'person'): Promise<unknown> => {
  const key = getLastViewedPidKey(view)
  return cache.getItem(key)
}

export const useLastViewedPid = (view = 'person'): { loading: boolean; pid: unknown | undefined } => {
  const [pid, setPid] = useState<unknown>()
  const [loading, setLoading] = useState(true)
  useEffect(() => {
    let mounted = true
    getLastViewedPid(view)
      .then((data) => mounted && setPid(data))
      .catch(() => mounted && setPid(null))
      .finally(() => mounted && setLoading(false))
    return () => {
      mounted = false
    }
  }, [view])
  return { loading, pid }
}

export const setLastViewedPid = (pid: string, view = 'person'): Promise<void> => {
  const key = getLastViewedPidKey(view)
  return cache.setItem(key, pid)
}

export const clearLastViewedPid = (view = 'person'): Promise<void> => {
  const key = getLastViewedPidKey(view)
  return cache.removeItem(key)
}

/*
 * Last Viewed Person View - Person page subPages (cached in session storage)
 */
export const getLastViewedPersonView = (): Promise<string | null> => {
  return cache.getItem(`lastViewedPersonView`)
}

export const setLastViewedPersonView = (view: string): Promise<void> => {
  return cache.setItem(`lastViewedPersonView`, view)
}
export const clearLastViewedPersonView = (): Promise<void> => {
  return cache.removeItem(`lastViewedPersonView`)
}
export const useLastViewedPersonView = (): { loading: boolean; view: string | undefined | null } => {
  const [view, setView] = useState<string | null>()
  const [loading, setLoading] = useState(true)
  useEffect(() => {
    let mounted = true
    getLastViewedPersonView()
      .then((data) => mounted && setView(data))
      .catch(() => mounted && setView(null))
      .finally(() => mounted && setLoading(false))
    return () => {
      mounted = false
    }
  }, [])
  return { loading, view }
}
