import axios from '@fs/zion-axios'
import type { Axios } from '@fs/zion-tree-types/zion-axios'
import type { Person } from '@fs/zion-tree-types'
import type { SortValue, UnusedSortValue } from '../types/privatePersons'

const treeDataBaseUrl = '/service/tree/tree-data'

type Props = {
  treeId?: string
  nameFilter?: string
  nextPageToken?: number
  size?: number
  sort?: SortValue | UnusedSortValue
  includeCreatorNames?: boolean
  includePhotos?: boolean
  usePersonSummaries?: boolean
}

type Response = {
  persons: Person[]
  nextPageToken?: string
  totalPersonsInSpace: number
  totalMatchingPersons: number
}

export default async function getPrivatePeople({
  treeId,
  nameFilter,
  nextPageToken = 0,
  size = 20,
  sort,
  includeCreatorNames = false,
  includePhotos = false,
  usePersonSummaries = true,
}: Props): Promise<Response> {
  const queryParamObj: {
    nameFilter: string
    nextPageToken: string
    pageSize: string
    sort: SortValue | UnusedSortValue
    includeCreatorNames: string
    includePhotos: string
    usePersonSummaries: string
  } = {
    nameFilter: nameFilter || '',
    nextPageToken: String(nextPageToken),
    pageSize: String(size),
    sort: sort || 'CREATED_ASC',
    includeCreatorNames: String(includeCreatorNames),
    includePhotos: String(includePhotos),
    usePersonSummaries: String(usePersonSummaries),
  }

  const queryParams = new URLSearchParams(queryParamObj).toString()
  let url = `${treeDataBaseUrl}/trees/${treeId || 'PRIVATE'}/persons`
  if (queryParams) url += `?${queryParams}`
  const config = { headers: {} }

  return (axios as Axios).get<Response>(url, config).then((res) => res.data)
}
