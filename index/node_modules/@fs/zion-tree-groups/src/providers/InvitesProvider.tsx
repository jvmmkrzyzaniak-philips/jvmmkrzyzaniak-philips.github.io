import type { ReactNode } from 'react'
import React, { createContext, useContext, useMemo } from 'react'
import type { Invite } from '../types/invites'

export type InviteValue = {
  groupId: string | undefined
  singleUseInvites: Invite[] | undefined
  refetchInvites: () => void
  alreadyInvitedArray: string[] | undefined
}

const InviteContext = createContext<InviteValue | null>(null)

export const useInvites = (disable = false): InviteValue | Record<string, never> => {
  const context = useContext(InviteContext)
  if (!context && !disable) throw new Error('You need to use InvitesProvider to use useInvite.')
  return context ?? {}
}

type Props = {
  children: ReactNode
  groupId: string | undefined
  singleUseInvites: Invite[] | undefined
  refetchInvites: () => void
}

/** Provider for getting and refetching single use invites */
export default function InvitesProvider({ children, groupId, singleUseInvites, refetchInvites }: Props): JSX.Element {
  const alreadyInvitedArray = useMemo(
    () =>
      singleUseInvites?.reduce<string[]>((personIdsArray, invite) => {
        if (invite.personId) personIdsArray.push(invite.personId)
        return personIdsArray
      }, []),
    [singleUseInvites]
  )

  const value = useMemo(
    () => ({
      groupId,
      singleUseInvites,
      refetchInvites,
      alreadyInvitedArray,
    }),
    [groupId, refetchInvites, singleUseInvites, alreadyInvitedArray]
  )

  return <InviteContext.Provider value={value}>{children}</InviteContext.Provider>
}
