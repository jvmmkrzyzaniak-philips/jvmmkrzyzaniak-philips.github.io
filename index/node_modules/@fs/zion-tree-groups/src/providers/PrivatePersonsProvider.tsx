import type { Dispatch, ReactNode, SetStateAction } from 'react'
import React, { createContext, useCallback, useContext, useMemo, useState } from 'react'
import type { Person } from '@fs/zion-tree-types'
import usePrivatePersonsHook from './usePrivatePersonsHook'
import usePrivatePersonsSort from './usePrivatePersonsSort'
import type { SortBy, SortDirection } from '../types/privatePersons'

export type PrivatePersonsValue = {
  loading: boolean
  privatePersons: Person[]
  setSortBy: Dispatch<SetStateAction<SortBy>>
  setSortDirection: Dispatch<SetStateAction<SortDirection>>
  setFilterText: Dispatch<SetStateAction<string>>
  sortBy: SortBy
  sortDirection: SortDirection
  getNextPrivatePersonBatch: () => Promise<void>
  getPreviousPrivatePersonBatch: (pastToken: string | undefined) => Promise<void>
  nextToken: string | undefined
  privatePersonsCount: number | undefined
  privatePersonsPageCount: number
  filterText: string
  refreshPrivatePeople: ReturnType<typeof usePrivatePersonsHook>['refreshPrivatePeople']
  isSorting: boolean | undefined
  setShowOnlyDuplicates: Dispatch<SetStateAction<boolean>>
  showOnlyDuplicates: boolean
}

const PrivatePersonsContext = createContext<PrivatePersonsValue | undefined>(undefined)

export const usePrivatePersons = (): PrivatePersonsValue => {
  const context = useContext(PrivatePersonsContext)
  if (!context) throw new Error('You need to use PrivatePersonsProvider to use usePrivatePersons.')
  return context
}

type Props = {
  /** If no treeId is passed it will use the treeId of the default tree */
  treeId?: string
  pageCount?: number
  /** Only use if not using PrivatePersonsOptions and want a different sortBy */
  sortByOverride?: SortBy
  /** Only use if not using PrivatePersonsOptions and want a different sortDirection */
  sortDirectionOverride?: SortDirection
  /** If you need to get sorting preferences */
  isSorting?: boolean
  children: ReactNode
  includeCreatorNames?: boolean
  includePhotos?: boolean
  usePersonSummaries?: boolean
}

/** To get private persons optionally with the use of PrivatePersonsOptions and PrivatePersonsSearch */
export default function PrivatePersonsProvider({
  children,
  treeId,
  pageCount,
  sortByOverride,
  sortDirectionOverride,
  isSorting,
  includeCreatorNames,
  includePhotos,
  usePersonSummaries,
}: Props): JSX.Element {
  const [filterText, setFilterText] = useState('')
  const [showOnlyDuplicates, setShowOnlyDuplicates] = useState(false)
  const { sortBy, sortDirection, loading: loadingSort, setSortBy, setSortDirection } = usePrivatePersonsSort(isSorting)

  const {
    loadingPersons: loadingPrivatePersons,
    loadingCount,
    privatePersons,
    getNextPrivatePersonBatch,
    getPreviousPrivatePersonBatch,
    nextToken,
    privatePersonsCount,
    pageCount: privatePersonsPageCount,
    refreshPrivatePeople,
  } = usePrivatePersonsHook({
    treeId,
    nameFilter: filterText,
    pageCount,
    sortBy: sortByOverride || sortBy,
    sortDirection: sortDirectionOverride || sortDirection,
    loadingSort,
    includeCreatorNames,
    includePhotos,
    usePersonSummaries,
  })

  const setFilterTextWrapper = useCallback(
    (text) => {
      setFilterText(text)
      refreshPrivatePeople(text)
    },
    [refreshPrivatePeople]
  )

  const value = useMemo(
    () => ({
      loading: loadingPrivatePersons || loadingSort,
      loadingCount,
      privatePersons,
      setSortBy,
      setSortDirection,
      setFilterText: setFilterTextWrapper,
      sortBy,
      sortDirection,
      getNextPrivatePersonBatch,
      getPreviousPrivatePersonBatch,
      nextToken,
      privatePersonsCount,
      privatePersonsPageCount,
      filterText,
      refreshPrivatePeople,
      isSorting,
      setShowOnlyDuplicates,
      showOnlyDuplicates,
    }),
    [
      isSorting,
      filterText,
      getNextPrivatePersonBatch,
      getPreviousPrivatePersonBatch,
      loadingPrivatePersons,
      loadingSort,
      loadingCount,
      nextToken,
      privatePersons,
      privatePersonsCount,
      privatePersonsPageCount,
      refreshPrivatePeople,
      setFilterTextWrapper,
      setSortBy,
      setSortDirection,
      sortBy,
      sortDirection,
      setShowOnlyDuplicates,
      showOnlyDuplicates,
    ]
  )
  return <PrivatePersonsContext.Provider value={value}>{children}</PrivatePersonsContext.Provider>
}
