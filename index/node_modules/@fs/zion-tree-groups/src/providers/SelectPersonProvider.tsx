import type { Person } from '@fs/zion-tree-types'
import type { Dispatch, ReactNode, SetStateAction } from 'react'
import React, { createContext, useContext, useEffect, useMemo, useState } from 'react'

type PaginatorState = {
  nameFilter: string
  token: (string | undefined)[]
}

export type SelectValue = {
  selectedPerson: Person | undefined
  setSelectedPerson: Dispatch<SetStateAction<Person | undefined>>
  paginatorState: PaginatorState
  setPaginatorState: Dispatch<SetStateAction<PaginatorState>>
}

const SelectPersonContext = createContext<SelectValue | null>(null)

export const useSelectPersonContext = (): SelectValue | null => useContext(SelectPersonContext)

type Props = {
  children: ReactNode
  preSelectPerson?: Person
  initialPaginatorState?: PaginatorState
}

/** The SelectPersonProvider keeps tracks the person information that we need to render in subsequent route views. It is also required in our TreePaginator.
 *  initialPaginatorState is meant for tests only
 */
export default function SelectPersonProvider({ children, preSelectPerson, initialPaginatorState }: Props): JSX.Element {
  const [selectedPerson, setSelectedPerson] = useState<Person | undefined>(preSelectPerson)
  const [paginatorState, setPaginatorState] = useState<PaginatorState>(
    initialPaginatorState ?? { token: [undefined], nameFilter: '' }
  )

  useEffect(() => setSelectedPerson(preSelectPerson), [preSelectPerson])

  const value = useMemo(
    () => ({
      selectedPerson,
      setSelectedPerson,
      paginatorState,
      setPaginatorState,
    }),
    [paginatorState, selectedPerson]
  )

  return <SelectPersonContext.Provider value={value}>{children}</SelectPersonContext.Provider>
}
