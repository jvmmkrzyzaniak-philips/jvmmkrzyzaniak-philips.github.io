import type { Dispatch, SetStateAction } from 'react'
import { useEffect, useRef, useState } from 'react'
import { getPreference as getPreferenceUntyped } from '@fs/zion-preferences'
import type { getPreference } from '@fs/zion-tree-types/zion-preferences'
import type { SortBy, SortDirection } from '../types/privatePersons'

const getPreferenceTyped = getPreferenceUntyped as typeof getPreference

type ReturnValue = {
  setSortBy: Dispatch<SetStateAction<SortBy>>
  sortBy: SortBy
  setSortDirection: Dispatch<SetStateAction<SortDirection>>
  sortDirection: SortDirection
  loading: boolean
}

export default function usePrivatePersonsSort(isSorting?: boolean): ReturnValue {
  const [sortBy, setSortBy] = useState<SortBy>('fullName')
  const [sortDirection, setSortDirection] = useState<SortDirection>('asc')
  const [loading, setLoading] = useState(!!isSorting)
  const hasFetched = useRef(false)

  useEffect(() => {
    let isCurrent = true
    if (isSorting && !hasFetched.current) {
      hasFetched.current = true
      getPreferenceTyped<['private.direction', 'private.sort'], SortBy | SortDirection>(
        'private.direction',
        'private.sort'
      )
        .then((prefs) => {
          if (isCurrent) {
            prefs?.['private.sort']?.value && setSortBy(prefs['private.sort'].value as SortBy)
            prefs?.['private.direction']?.value && setSortDirection(prefs['private.direction'].value as SortDirection)
            setLoading(false)
          }
        })
        .catch((error) => {
          console.error(error)
          setLoading(false)
        })
    }
    return () => {
      isCurrent = false
    }
  }, [isSorting])

  return {
    setSortBy,
    sortBy,
    sortDirection,
    setSortDirection,
    loading,
  }
}
