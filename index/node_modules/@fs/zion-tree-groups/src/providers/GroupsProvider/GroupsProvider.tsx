import type { ReactNode } from 'react'
import React, { useRef, useReducer, useEffect } from 'react'
import { getUser, getHelpee } from '@fs/zion-user'
import {
  setPreference as setPreferenceUntyped,
  preCachePreferences as preCachePreferencesUntyped,
} from '@fs/zion-preferences'
import { useQueryParams } from '@fs/zion-router'
import { useEvent } from '@fs/zion-frontend-friends'
import { exhaustiveCheck, type TreeId } from '@fs/zion-tree-types'
import getPermission from '@fs/zion-permissions'
import type {
  setPreference as setPreferenceTyped,
  preCachePreferences as preCachePreferencesTyped,
} from '@fs/zion-tree-types/zion-preferences'
import LoadingSpinner from './LoadingSpinner'
import { prefCetStr, queryCetStr } from './utils'
import { InnerGroupsProvider } from './InnerGroupsProvider'

const setPreference = setPreferenceUntyped as typeof setPreferenceTyped
const preCachePreferences = preCachePreferencesUntyped as typeof preCachePreferencesTyped

type ReducerState = Record<
  'loading' | 'signedIn' | 'isHelpee' | 'cetPrefIsOn' | 'canAccessCET' | 'canAccessFGT',
  boolean
>

type SetDataAction = { type: 'SET_DATA' } & Record<
  'signedIn' | 'isHelpee' | 'cetPrefIsOn' | 'canAccessCET' | 'canAccessFGT',
  boolean
>
type SetLoadingAction = { type: 'SET_LOADING'; loading: boolean }

type ReducerAction = Partial<ReducerState> & (SetDataAction | SetLoadingAction)

const outerInitialState = {
  loading: true,
  signedIn: false,
  isHelpee: false,
  cetPrefIsOn: false,
  canAccessFGT: false,
  canAccessCET: false,
} satisfies ReducerState

const reducer = (
  state: ReducerState,
  { type, signedIn, isHelpee, cetPrefIsOn, loading, canAccessFGT, canAccessCET }: ReducerAction
): ReducerState => {
  switch (type) {
    case 'SET_DATA': {
      return {
        loading: false,
        signedIn,
        isHelpee,
        cetPrefIsOn,
        canAccessFGT,
        canAccessCET,
      }
    }
    case 'SET_LOADING':
      return { ...state, loading }
    default:
      return exhaustiveCheck(type)
  }
}

type GroupsProviderProps = {
  children: ReactNode
  LoadingComponent?: () => JSX.Element
  treeIdOverride?: TreeId | 'PRIVATE'
}

/** GroupsProvider is used to access and control the information in shared trees.
 * It exports the current state of the default tree in addition to many functions that can be used in conjunction with other shared components in tree-groups package.
 */
export const GroupsProvider = ({ children, LoadingComponent, treeIdOverride }: GroupsProviderProps): JSX.Element => {
  const { query, removeQuery } = useQueryParams({ replaceState: true })

  const cetQueryExists = query[queryCetStr]
  const isCetOptedIn = cetQueryExists === 'true'
  const isCetOptedOut = cetQueryExists === 'false'
  const [{ loading, signedIn, isHelpee, cetPrefIsOn, canAccessFGT, canAccessCET }, dispatch] = useReducer(
    reducer,
    outerInitialState
  )
  const initialized = useRef<boolean>()

  // removeQuery is not stable
  const removeQueryParams = useEvent((...keys: string[]) => removeQuery(...keys))

  useEffect(() => {
    let mounted = true

    const updatePrefsFromQueryParams = async (): Promise<void> => {
      const queriesToRemove = new Set<typeof queryCetStr>()
      if (isCetOptedIn) {
        await setPreference(prefCetStr, true)
        queriesToRemove.add(queryCetStr)
      }
      if (isCetOptedOut) {
        await setPreference(prefCetStr, false)
        queriesToRemove.add(queryCetStr)
      }

      removeQueryParams(...Array.from(queriesToRemove))
    }

    const init = async (): Promise<void> => {
      initialized.current = true
      try {
        const [user, helpee] = await Promise.all([getUser(), getHelpee()])

        if (!user) {
          mounted && dispatch({ type: 'SET_LOADING', loading: false })
          return
        }

        let cetShouldBeOn = false
        // if either pref is not set, use the cache
        if (!cetQueryExists) {
          const cetPref = await preCachePreferences<[typeof prefCetStr], boolean>(prefCetStr)

          if (cetPref !== undefined) {
            cetShouldBeOn = Boolean(cetPref) && !isCetOptedOut
          }
        }

        // update cet prefs based on query params
        if (cetQueryExists) {
          cetShouldBeOn = isCetOptedIn && !isCetOptedOut
        }

        // CanAddPersonalData - Check if the user is a Russian citizen and block fgt and cet
        // CanAccessFamilyGroupTrees - Check if the user is in a restricted country for fgt
        // CanAccessControlledEditTreesPermission - Check if the user is in a restricted country for cet
        const [
          { authorized: canAddPersonalData },
          { authorized: canAccessFamilyGroupTrees },
          { authorized: canAccessControlledEditTrees },
        ] = await Promise.all([
          getPermission('CanAddPersonalDataPermission', 'FamilyTree'),
          getPermission('CanAccessFamilyGroupTreesPermission', 'FamilyTree'),
          getPermission('CanAccessControlledEditTreesPermission', 'FamilyTree'),
        ])

        if (mounted) {
          dispatch({
            type: 'SET_DATA',
            signedIn: Boolean(user),
            isHelpee: Boolean(helpee),
            cetPrefIsOn: cetShouldBeOn,
            canAccessFGT: canAddPersonalData && canAccessFamilyGroupTrees,
            canAccessCET: canAddPersonalData && canAccessControlledEditTrees,
          })
        }
        // update prefs and remove query params from url
        updatePrefsFromQueryParams()
      } catch (err) {
        console.error(err)
        mounted && dispatch({ type: 'SET_LOADING', loading: false })
        return
      }
      mounted && dispatch({ type: 'SET_LOADING', loading: false })
    }

    !initialized.current && init()

    return () => {
      mounted = false
    }
  }, [cetQueryExists, isCetOptedIn, isCetOptedOut, removeQueryParams])

  const Loader = LoadingComponent || LoadingSpinner

  if (loading) return <Loader />
  if (!signedIn || isHelpee) return <>{children}</>

  return (
    <InnerGroupsProvider
      cetPrefIsOn={cetPrefIsOn}
      canAccessFGT={canAccessFGT}
      canAccessCET={canAccessCET}
      LoadingComponent={LoadingComponent}
      treeIdOverride={treeIdOverride}
    >
      {children}
    </InnerGroupsProvider>
  )
}
