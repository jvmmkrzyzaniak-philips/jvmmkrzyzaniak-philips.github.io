import React, { createContext, type ReactNode, useCallback, useContext, useMemo, useState } from 'react'
import { trackEvent } from '@fs/zion-analytics'
import { type UseOverlayReturnOptions } from '@fs/zion-ui'
import PrivatePersonsProvider from '../PrivatePersonsProvider'
import SetMePersonOverlay from '../../components/_flows/set-me-person/SetMePersonOverlay'
import { type GroupsValue } from '../../types/groups'

type ProviderValue = {
  showSetMePersonOverlay: boolean
  openSetMePersonOverlay: () => void
}

const SetMePersonContext = createContext<ProviderValue | undefined>(undefined)

export const useSetMePersonOverlayContext = (): ProviderValue => {
  const context = useContext(SetMePersonContext)
  if (!context)
    throw new Error('You need to use the SetMePersonOverlayProvider to use the useSetMePersonOverlayContext')
  return context
}

type ProviderProps = {
  groupsValue: Partial<GroupsValue>
  overlay: UseOverlayReturnOptions
  children: ReactNode
}
export default function SetMePersonOverlayProvider({ groupsValue, overlay, children }: ProviderProps): JSX.Element {
  const [showSetMePersonOverlay, setShowSetMePersonOverlay] = useState(false)
  const openSetMePersonOverlay = useCallback(() => {
    setShowSetMePersonOverlay(true)
    trackEvent({
      event_name: 'Family Group starting person manually select me person',
    })
  }, [])

  const value = useMemo(() => {
    return { showSetMePersonOverlay, openSetMePersonOverlay }
  }, [openSetMePersonOverlay, showSetMePersonOverlay])

  return (
    <SetMePersonContext.Provider value={value}>
      <>
        {children}
        {groupsValue?.currentGroup?.id && showSetMePersonOverlay && (
          <PrivatePersonsProvider treeId={groupsValue.currentTreeId}>
            <SetMePersonOverlay
              overlay={overlay}
              groupId={groupsValue.currentGroup.id}
              treeId={groupsValue.currentTreeId}
            />
          </PrivatePersonsProvider>
        )}
      </>
    </SetMePersonContext.Provider>
  )
}
