import React, { Suspense, lazy } from 'react'
import { Button, useOverlay, ActionChip } from '@fs/zion-ui'
import { useIsHelping } from '@fs/zion-user'
import { useTranslation } from 'react-i18next'
import { HelpPreserver } from '@fs/zion-icon'
// import { usePreference, setPreference } from '@fs/zion-preferences'
import useIsAuthorized from './useIsAuthorized'

const HelperDialog = lazy(() => import('./HelperDialog'))
const ConfirmationDialog = lazy(() => import('./ConfirmationDialog'))

export default function HelperButton({
  buttonLabel,
  asChip,
  showIcon,
  emphasis,
  redirectUrl,
  linkName,
  ...buttonProps
}) {
  const isAuthorized = useIsAuthorized()
  const helping = useIsHelping()
  const startOverlay = useOverlay()
  const stopOverlay = useOverlay()
  const { t } = useTranslation()
  // const [preferredTab, setPreferredTab] = useState(0)
  const stopLinkName = linkName ? `${linkName}: Stop` : undefined
  const startLinkName = linkName ? `${linkName}: Start` : undefined
  // LEAVING THIS IN UNTIL WE FIGURE OUT PREFERRED TAB PREFERENCE:
  // const tabPreference = usePreference('help.helperDialog.preferredTab')

  // useEffect(() => {
  //   if (tabPreference) setPreferredTab(tabPreference)
  // }, [tabPreference])

  if (isAuthorized) {
    if (helping) {
      return (
        <>
          {asChip ? (
            <ActionChip
              linkName={stopLinkName}
              {...buttonProps}
              onClick={stopOverlay.handleClick}
              emphasis={emphasis}
              Icon={showIcon ? HelpPreserver : undefined}
              label={t('btn_stopHelping_text', 'Stop Helping Others')}
            />
          ) : (
            <Button
              linkName={stopLinkName}
              {...buttonProps}
              onClick={stopOverlay.handleClick}
              emphasis={emphasis}
              Icon={showIcon ? HelpPreserver : undefined}
            >
              {t('btn_stopHelping_text', 'Stop Helping Others')}
            </Button>
          )}

          <Suspense fallback="">
            {stopOverlay.isOpen && <ConfirmationDialog overlay={stopOverlay} redirectAfterStopUrl={redirectUrl} />}
          </Suspense>
        </>
      )
    }
    return (
      <>
        {asChip ? (
          <ActionChip
            linkName={startLinkName}
            {...buttonProps}
            onClick={startOverlay.handleClick}
            emphasis={emphasis}
            Icon={showIcon ? HelpPreserver : undefined}
            label={buttonLabel || t('btn_startHelping_text', 'Help Others')}
          />
        ) : (
          <Button
            linkName={startLinkName}
            {...buttonProps}
            onClick={startOverlay.handleClick}
            emphasis={emphasis}
            Icon={showIcon ? HelpPreserver : undefined}
          >
            {buttonLabel || t('btn_startHelping_text', 'Help Others')}
          </Button>
        )}

        <Suspense fallback="">
          {startOverlay.isOpen && (
            <HelperDialog
              overlay={startOverlay}
              redirectAfterStartUrl={redirectUrl}
              // preferredTab={preferredTab}
              // setPreferredTab={(newTabPreference) => {
              //   setPreferredTab(newTabPreference)
              //   setPreference('help.helperDialog.preferredTab', newTabPreference)
              // }}
            />
          )}
        </Suspense>
      </>
    )
  }
  return null
}
