import React, { Suspense, lazy, useEffect } from 'react'
import PropTypes from 'prop-types'
import { useHelpee } from '@fs/zion-user'
import { useRoleIndicator } from '@fs/zion-role-indicator'
import { useOverlay, colors } from '@fs/zion-ui'
import { Trans, useTranslation } from 'react-i18next'
import { useFeatureFlag } from '@fs/zion-flags'

const ConfirmationDialog = lazy(() => import('./ConfirmationDialog'))

export default function HelperMode({ redirectAfterStopUrl }) {
  const helpee = useHelpee()
  const overlay = useOverlay()
  const { t } = useTranslation()
  const { setRole } = useRoleIndicator()
  const { isOn: useNameIsHelpingPhraseOn } = useFeatureFlag('home_helperMode_useNameInHelpingPhrase')

  useEffect(() => {
    if (helpee.contactName) {
      setRole({
        text: useNameIsHelpingPhraseOn ? (
          <Trans
            i18nKey="helping_phrase_with_name"
            defaults="You are helping <strong>{name}</strong>"
            values={{ name: helpee.contactName }}
          />
        ) : (
          <>
            {t('helping_phrase', 'You are helping')} <strong>{helpee.contactName}</strong>
          </>
        ),
        color: colors.green60,
        onExit: overlay.handleClick,
        exitTitle: t('stop_helping', 'Stop Helping'),
      })
    }
  }, [setRole, helpee.contactName, overlay.handleClick, t, useNameIsHelpingPhraseOn])

  return helpee.contactName ? (
    <Suspense fallback={<div>{t('common-ui:loading.ellipsis.label', 'Loading...')}</div>}>
      {overlay.isOpen && <ConfirmationDialog overlay={overlay} redirectAfterStopUrl={redirectAfterStopUrl} />}
    </Suspense>
  ) : null
}

HelperMode.propTypes = {
  /** URL to redirect the user to.
   This can be a relative or an absolute URL.
   If not provided, it will just reload the page.
   */
  redirectAfterStopUrl: PropTypes.string,
}
