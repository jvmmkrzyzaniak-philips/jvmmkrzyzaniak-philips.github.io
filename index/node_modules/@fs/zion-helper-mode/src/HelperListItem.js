import React, { Suspense, lazy } from 'react'
import PropTypes from 'prop-types'
import { useOverlay, ListItem } from '@fs/zion-ui'
import { useIsHelping } from '@fs/zion-user'
import { useTranslation } from 'react-i18next'
import { HelpPreserver } from '@fs/zion-icon'
import useIsAuthorized from './useIsAuthorized'

const HelperDialog = lazy(() => import('./HelperDialog'))
const ConfirmationDialog = lazy(() => import('./ConfirmationDialog'))

export default function HelperListItem({ primaryText, showIcon, redirectUrl, linkName, ...props }) {
  const isAuthorized = useIsAuthorized()
  const helping = useIsHelping()
  const startOverlay = useOverlay()
  const stopOverlay = useOverlay()
  const { t } = useTranslation()
  const stopLinkName = linkName ? `${linkName}: Stop` : undefined
  const startLinkName = linkName ? `${linkName}: Start` : undefined

  if (!isAuthorized) return null

  if (helping) {
    return (
      <>
        <ListItem
          {...props}
          linkName={stopLinkName}
          onClick={stopOverlay.handleClick}
          startElement={showIcon ? <ListItem.Icon Icon={HelpPreserver} /> : undefined}
          primaryText={t('btn_stopHelping_text', 'Stop Helping Others')}
        />

        <Suspense fallback="">
          {stopOverlay.isOpen && <ConfirmationDialog overlay={stopOverlay} redirectAfterStopUrl={redirectUrl} />}
        </Suspense>
      </>
    )
  }

  return (
    <>
      <ListItem
        {...props}
        linkName={startLinkName}
        onClick={startOverlay.handleClick}
        startElement={showIcon ? <ListItem.Icon Icon={HelpPreserver} /> : undefined}
        primaryText={primaryText || t('btn_startHelping_text', 'Help Others')}
      />

      <Suspense fallback="">
        {startOverlay.isOpen && <HelperDialog overlay={startOverlay} redirectAfterStartUrl={redirectUrl} />}
      </Suspense>
    </>
  )
}

HelperListItem.propTypes = {
  /** The text to display inviting user to help others */
  primaryText: PropTypes.node,

  /** Whether to show the icon as the `ListItem`'s `startElement` */
  showIcon: PropTypes.bool,

  /** Where to redirect after a user stops helping. By default it will reload the current page. */
  redirectUrl: PropTypes.string,

  /** Link name to send in analytics event when starting and stopping helper mode. */
  linkName: PropTypes.string,
}
