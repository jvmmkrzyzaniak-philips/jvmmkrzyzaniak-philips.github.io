import React, { useState, createContext, useContext, Suspense, lazy, useMemo } from 'react'
import { useInfoSheet } from '@fs/zion-ui'

const GenDetailsInfoSheet = lazy(() => import('./GenDetailsInfosheet'))

const GenDetailsSheetContext = createContext()

export const useGenDetailsSheet = () => {
  return useContext(GenDetailsSheetContext)
}

export const GenDetailsSheetProvider = ({ children, ark: arkPath }) => {
  // Do not call `setArk` directly, use `checkAndSetArk` instead
  const [ark, setArk] = useState(arkPath)

  const checkAndSetArk = (newArk) => {
    // Follows ark format of:
    // digit:digit:alphaNumericChar*4-alphaNumericChar*3
    // ex. 2:2:QZ2B-CG5
    const arkPattern = /\d:\d:[A-Za-z0-9]{4}-[A-Za-z0-9]{3}/i
    if (arkPattern.test(newArk)) {
      setArk(newArk)
    }
  }

  const infoSheet = useInfoSheet({ initiallyOpen: true })

  const value = useMemo(() => ({ ark, setArk: checkAndSetArk, infoSheet }), [ark, infoSheet])

  return (
    <GenDetailsSheetContext.Provider value={value}>
      {children}
      <Suspense fallback="">{ark && <GenDetailsInfoSheet infoSheetOverlay={infoSheet} ark={ark} />}</Suspense>
    </GenDetailsSheetContext.Provider>
  )
}
