import React, { useState, createContext, useContext, useEffect, useMemo, useRef, useCallback } from 'react'
import debounce from 'lodash.debounce'
import { getPreference, setPreference } from '@fs/zion-preferences'
import { showTemple as getShowTemple, getIsNonReligiousMode } from '@fs/zion-permissions'
import { useUser } from '@fs/zion-user'
import Cache from '@fs/zion-cache'
import { useGroupsContext } from '@fs/zion-tree-groups'

const viewOptionsCache = new Cache({ storeName: 'pedigreeViewOptions', lifetime: 'hour' })

const treeViewOptionsKey = 'tree.view-options'

const shouldReload = (oldPrefs, newPrefs) => {
  const prefsToCheck = [
    'fanchartGens',
    'showMarriages', // landscape-specific
    'showPortraits',
    'showDataQualityIssues',
    'showRecordHints',
    'showResearchSuggestions',
    'showTempleOpportunities',
    'fanchartMode',
  ]

  return prefsToCheck.some((pref) => {
    if (pref === 'fanchartMode' && !['researchHelps', 'ordinances'].includes(newPrefs[pref])) return false
    if (typeof newPrefs[pref] === 'boolean') {
      return !oldPrefs[pref] && newPrefs[pref]
    }
    return oldPrefs[pref] !== newPrefs[pref]
  })
}

const defaultPrefsState = {
  loading: true,
  showTemple: false,
  prefs: {
    colorScheme: 'daybreak', // TEMPORARY: Keep track of old colorScheme preference until all pedigrees move to zion-ui darkMode
    fanchartMode: 'familyLines',
    fanchartGens: 7,
    showMarriages: true,
    showChildren: true,
    showSpouses: true,
    showPortraits: true,
    showAltRelationships: true,
    showDataQualityIssues: true,
    showRecordHints: true,
    showResearchSuggestions: true,
    showTempleOpportunities: true,
  },
}

export const PedigreeViewOptionsContext = createContext()

export const usePedigreeViewOptions = (full) => {
  const state = useContext(PedigreeViewOptionsContext)

  return full ? state : state.prefsState
}

const useOptions = (lls) => {
  const { signedIn, userLoading } = useUser()
  const { isResearcherGroup } = useGroupsContext()
  const [prefsState, setPrefsState] = useState(defaultPrefsState)
  const reloadAllPedigrees = useRef()

  useEffect(() => {
    let isCurrent = true
    if (signedIn) {
      Promise.all([getIsNonReligiousMode(), getShowTemple(), getPreference(treeViewOptionsKey)])
        .then(([isNRM, showTemple, data]) => {
          const prefs = {}
          // Load user preferences, with default value fallbacks
          Object.keys(defaultPrefsState.prefs).forEach((key) => {
            prefs[key] = data[key] ?? defaultPrefsState.prefs[key]
          })
          isCurrent &&
            setPrefsState({
              loading: false,
              showTemple: !isNRM && showTemple && !isResearcherGroup,
              prefs: prefs || defaultPrefsState.prefs,
            })
          return undefined
        })
        .catch(console.error)
    } else if (!userLoading) {
      viewOptionsCache
        .getItem('prefs')
        .then(
          (prefs) =>
            isCurrent &&
            setPrefsState({
              loading: false,
              showTemple: false,
              prefs: prefs || defaultPrefsState.prefs,
            })
        )
        .catch(() => {
          isCurrent &&
            setPrefsState({
              loading: false,
              showTemple: false,
              prefs: defaultPrefsState.prefs,
            })
        })
    }

    return () => {
      isCurrent = false
    }
  }, [isResearcherGroup, signedIn, userLoading])

  const debouncedReload = useMemo(
    () =>
      debounce(() => {
        reloadAllPedigrees.current?.()
      }, 1000),
    [reloadAllPedigrees]
  )

  const setPrefs = (preferences) => {
    if (signedIn) {
      setPreference(treeViewOptionsKey, preferences)
    } else {
      viewOptionsCache.setItem('prefs', preferences)
    }
    setPrefsState((prevState) => ({ ...prevState, prefs: preferences || defaultPrefsState.prefs }))

    if (!lls && shouldReload(prefsState?.prefs, preferences)) {
      debouncedReload()
    }
  }

  const setReloadCallback = useCallback((cb) => {
    reloadAllPedigrees.current = cb
  }, [])

  return {
    prefsState,
    setPrefs,
    setReloadCallback,
    darkModeToggle: true, // TODO: Deprecate
  }
}

export const PedigreeViewOptionsProvider = ({ children, lls }) => {
  const value = useOptions(lls)

  return <PedigreeViewOptionsContext.Provider value={value}>{children}</PedigreeViewOptionsContext.Provider>
}
