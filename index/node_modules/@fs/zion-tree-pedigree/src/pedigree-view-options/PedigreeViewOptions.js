import React, { memo } from 'react'
import debounce from 'lodash.debounce'
import { Divider, Paragraph, Skeleton, Separator, Toggle, ListItem, H3 } from '@fs/zion-ui'
import {
  PlaceTemple,
  DocumentRecordPerson,
  NoticeSuggestion,
  NoticeImportant,
  EventMarriage,
  ControlBrightnessLess,
  PersonSpouse,
  PersonFamily,
} from '@fs/zion-icon'
import { css } from '@linaria/core'
import { useTranslation } from 'react-i18next'
import PropTypes from 'prop-types'
import { useEvent } from '@fs/zion-frontend-friends'
import { useGroupsContext } from '@fs/zion-tree-groups'
import { trackEvent } from '@fs/zion-analytics'
import { VisuallyHidden } from '@reach/visually-hidden'
import { usePedigreeViewOptions } from './pedigree-options-context'

const preferencesCss = css`
  > span {
    margin: 3px 0px;
  }
  div[side='start'] {
    // aligns listItems better since we are usings a combo of Icons + Avatars + sometimes using background.
    margin-inline-start: 0 !important;
    margin-inline-end: 24px !important;
  }
`
const preferencesLoadingCss = css`
  display: flex;
  flex-flow: column;
  > div:not(:first-child) {
    margin-top: 15px;
  }
`
const alignText = css`
  display: flex;
  flex-direction: row;
  align-items: center;
  p {
    margin-inline-start: 25px;
    padding-bottom: 0;
  }
`

const preferencesObj = {
  showAltRelationships: 'tw.pedigree.pedigree-view-options.pref-label.showAltRelationships',
  showMarriages: 'tw.pedigree.pedigree-view-options.pref-label.showMarriages',
  showChildren: 'tw.pedigree.pedigree-view-options.pref-label.showChildren',
  showPortraits: 'tw.pedigree.pedigree-view-options.pref-label.showPortraits',
  showDataQualityIssues: 'tw.pedigree.pedigree-view-options.pref-label.showDataQualityIssues',
  showResearchSuggestions: 'tw.pedigree.pedigree-view-options.pref-label.showResearchSuggestions',
  showRecordHints: 'tw.pedigree.pedigree-view-options.pref-label.showRecordHints',
  showTempleOpportunities: 'tw.pedigree.pedigree-view-options.pref-label.showTempleOpportunities',
  showSpouses: 'tw.pedigree.fanchart-view-options.pref-label.showSpouses',
}

const viewOptionsPrefs = [
  {
    name: 'showRecordHints',
    text: 'tw.pedigree.pedigree-view-options.pref-label.showRecordHints',
    icon: <ListItem.Icon Icon={DocumentRecordPerson} background="#84DAED" color="#00365D" />,
  },
  {
    name: 'showResearchSuggestions',
    text: 'tw.pedigree.pedigree-view-options.pref-label.showResearchSuggestions',
    icon: <ListItem.Icon Icon={NoticeSuggestion} background="#DEC3F6" color="#4D1577" />,
  },
  {
    name: 'showDataQualityIssues',
    text: 'tw.pedigree.pedigree-view-options.pref-label.showDataQualityIssues',
    icon: <ListItem.Icon Icon={NoticeImportant} background="#C32B26" color="#FFFFFF" />,
  },
  {
    name: 'showPortraits',
    text: 'tw.pedigree.pedigree-view-options.pref-label.showPortraits',
    icon: <ListItem.Avatar />,
  },
  {
    name: 'showMarriages',
    text: 'tw.pedigree.pedigree-view-options.pref-label.showMarriages',
    icon: <ListItem.Icon Icon={EventMarriage} background="#FFF" color="#000307AB" />,
  },
  {
    name: 'showChildren',
    text: 'tw.pedigree.pedigree-view-options.pref-label.showChildren',
    icon: <ListItem.Icon Icon={PersonFamily} background="#FFF" color="#000307AB" />,
  },
  {
    name: 'showAltRelationships',
    text: 'tw.pedigree.pedigree-view-options.pref-label.showAltRelationships',
    icon: <ListItem.Icon Icon={PersonSpouse} background="#FFF" color="#000307AB" />,
  },
  {
    name: 'showSpouses',
    text: 'tw.pedigree.fanchart-view-options.pref-label.showSpouses',
    icon: <ListItem.Icon Icon={PersonSpouse} background="#FFF" color="#000307AB" />,
  },
]

const debounceRate = 200

// TEMPORARY: Until we migrate to a darkMode true/false value, we have to set this string value separately.
const handleColorSchemeChange = debounce((currentPrefs, func) => {
  func({ ...currentPrefs, colorScheme: currentPrefs?.colorScheme === 'daybreak' ? 'nightfall' : 'daybreak' })
}, debounceRate)

const templeStatuses = [
  { text: 'tw.pedigree.pedigree-view-options.temple.available', bgColor: '#C6D64E', color: '#023D18' },
  { text: 'tw.pedigree.pedigree-view-options.temple.needs-information', bgColor: '#F9C636', color: '#621C00' },
  { text: 'tw.pedigree.pedigree-view-options.temple.in-progress', bgColor: '#066F90', color: '#FFFFFF' },
]

const PreferenceChipsInner = ({
  includeMarriages,
  includeChildren,
  includeAltRelationships,
  includeInvertColors,
  includeDataProblems,
  includeRecordHints,
  includeResearchSuggestions,
  includePortraits,
  includeOrdinances,
  includeSpouses,
  showTemple,
  prefs,
  setPrefs,
  lls,
  children,
}) => {
  const { isReadOnlyTree } = useGroupsContext()
  const { t } = useTranslation()
  const handlePrefChange = useEvent((e) => {
    trackEvent({ link_name: `${e.target.name}: ${e.target.checked}` })
    setPrefs({ ...prefs, [e.target.name]: e.target.checked })
  })
  const hiddenPrefs = lls
    ? {
        showMarriages: !includeMarriages,
        showChildren: !includeChildren,
        showAltRelationships: !includeAltRelationships,
        showDataQualityIssues: true,
        showRecordHints: true,
        showResearchSuggestions: true,
      }
    : {
        showMarriages: !includeMarriages,
        showChildren: !includeChildren,
        showAltRelationships: !includeAltRelationships,
        showDataQualityIssues: !includeDataProblems || isReadOnlyTree,
        showRecordHints: !includeRecordHints || isReadOnlyTree,
        showResearchSuggestions: !includeResearchSuggestions || isReadOnlyTree,
        showPortraits: !includePortraits,
        showSpouses: !includeSpouses,
      }

  return (
    <>
      <H3 size="H5" data-testid="show:options-header" supplementary>
        {t('tw.pedigree.pedigree-view-options.show.label')}
      </H3>
      <Separator size="xs" />
      {children}
      <div className={preferencesCss}>
        {!lls && showTemple && includeOrdinances && (
          <>
            <ListItem
              primaryText={t(preferencesObj.showTempleOpportunities)}
              endElement={
                <Toggle
                  name="showTempleOpportunities"
                  data-testid="preferences-toggle:showTempleOpportunities"
                  checked={prefs.showTempleOpportunities}
                  onChange={handlePrefChange}
                />
              }
            />

            {templeStatuses.map((status, i) => {
              const k = `templeStatus${i}`
              return (
                <React.Fragment key={k}>
                  <div className={alignText}>
                    <PlaceTemple background={status.bgColor} color={status.color} />
                    <Paragraph size="sm">{t(status.text)}</Paragraph>
                  </div>
                  <Separator size="xxs" />
                </React.Fragment>
              )
            })}
            <Divider />
            <Separator size="xxs" />
          </>
        )}

        {viewOptionsPrefs.map((pref, i) => {
          const k = `viewOptions${i}`
          if (hiddenPrefs[pref.name]) return null
          return (
            <>
              <ListItem
                key={k}
                primaryText={t(pref.text)}
                startElement={pref.icon}
                endElement={
                  <Toggle
                    name={pref.name}
                    data-testid={`preferences-toggle:${pref.name}`}
                    checked={prefs[pref.name]}
                    onChange={handlePrefChange}
                  />
                }
              />
              {i === viewOptionsPrefs.length && (
                <>
                  <Separator size="xxs" />
                  <Divider />
                </>
              )}
            </>
          )
        })}
        <Separator size="xxs" />
        <Divider />

        {includeInvertColors && (
          <ListItem
            primaryText={`${t('tw.pedigree.pedigree-view-options.pref-label.darkMode')} ${t(
              'tw.pedigree.pedigree-view-options.caveat-in-progress'
            )}`}
            startElement={<ListItem.Icon Icon={ControlBrightnessLess} background="#FFF" />}
            endElement={
              <Toggle
                label={<VisuallyHidden>{t('tw.pedigree.pedigree-view-options.pref-label.darkMode')}</VisuallyHidden>}
                data-testid="preferences-toggle:darkMode"
                checked={prefs.colorScheme === 'nightfall'}
                onChange={() => {
                  handleColorSchemeChange(prefs, setPrefs)
                }}
              />
            }
          />
        )}
      </div>
    </>
  )
}

const PedigreeViewOptions = (props) => {
  const { setPrefs, prefsState } = usePedigreeViewOptions(true)
  const { isResearcherGroup } = useGroupsContext()

  const { t } = useTranslation()
  if (!prefsState || prefsState.loading) {
    return (
      <>
        <H3 size="H5" data-testid="show:options-header" supplementary>
          {t('tw.pedigree.pedigree-view-options.show.label')}
        </H3>
        <Separator size="xs" />
        <div className={preferencesLoadingCss}>
          <Skeleton.Chip />
          <Skeleton.Chip />
          <Skeleton.Chip />
          <Skeleton.Chip />
        </div>
      </>
    )
  }
  return (
    <PreferenceChipsInner
      {...props}
      showTemple={prefsState.showTemple && !isResearcherGroup}
      prefs={prefsState.prefs}
      setPrefs={setPrefs}
    />
  )
}

PedigreeViewOptions.propTypes = {
  /** If true, show marriages option will be visible. */
  includeMarriages: PropTypes.bool,
  /** If true, show children option will be visible. */
  includeChildren: PropTypes.bool,
  /** If true, show alternate spouses and parents option will be visible. */
  includeAltRelationships: PropTypes.bool,
  /** If true, show a disabled placeholder property that shows we have not forgotten about invert colors. */
  includeInvertColors: PropTypes.bool,
  /** If true, portraits option will show. Used by fanchart */
  includePortraits: PropTypes.bool,
  /** If true, data quality issues option will show. Used by fanchart */
  includeDataProblems: PropTypes.bool,
  /** If true, record hint option will show. Used by fanchart */
  includeRecordHints: PropTypes.bool,
  /** If true, research suggestion option will show. Used by fanchart */
  includeResearchSuggestions: PropTypes.bool,
  /** If true, ordinances options will show. Used by fanchart */
  includeOrdinances: PropTypes.bool,
  /** If true, spouse option will show. Used by descendancy */
  includeSpouses: PropTypes.bool,
  /** If true, some options won't show. Use for genealogies. */
  lls: PropTypes.bool,
}

export default memo(PedigreeViewOptions)
