import React, { lazy, Suspense, type ComponentProps } from 'react'
import { useOverlay, Button, ListItem, type UseOverlayReturnOptions } from '@fs/zion-ui'

const SelectSiblingPedigreeOverlay = lazy(() => import('./SelectSiblingPedigreeOverlay'))

type ListItemProps = Record<string, unknown>

type Props = {
  children: string
  buttonProps?: Omit<ComponentProps<typeof Button>, 'children'> & { 'data-testid'?: string }
  listItemProps?: ListItemProps
  overlay?: UseOverlayReturnOptions
  asListItem?: boolean
} & Omit<ComponentProps<typeof SelectSiblingPedigreeOverlay>, 'overlay'>

export default function SelectSiblingPedigreeButton({
  children,
  buttonProps,
  overlay,
  asListItem,
  listItemProps,
  ...props
}: Props): JSX.Element {
  const fallbackOverlay = useOverlay()
  const realOverlay = overlay || fallbackOverlay
  return (
    <>
      {asListItem ? (
        <ListItem onClick={realOverlay.handleClick} {...listItemProps} />
      ) : (
        <Button onClick={realOverlay.handleClick} {...buttonProps}>
          {children}
        </Button>
      )}
      <Suspense fallback="">
        {(realOverlay.isOpen || realOverlay.transitioning) && (
          <SelectSiblingPedigreeOverlay overlay={realOverlay} {...props} />
        )}
      </Suspense>
    </>
  )
}
