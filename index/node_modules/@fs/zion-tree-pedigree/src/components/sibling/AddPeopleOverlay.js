import React from 'react'
import { Affordance } from '@fs/zion-ui/quarks-authorized-use-only'
import { trackEvent } from '@fs/zion-analytics'
import { useOverlay, ListItem, MenuOverlay, IconButton, colors, Avatar, Button } from '@fs/zion-ui'
import { css, cx } from '@linaria/core'
import { isValidPid } from '@fs/zion-pid'
import { useTranslation } from 'react-i18next'
import { ContentAdd } from '@fs/zion-icon'
import { calculateAddFindProps, parentIdContainsValidPid } from '../../hooks/sibling/helpers'
import { buttonCss, affordanceCss, tileCss } from './Tile'
import { GOLDEN_HINT_ID } from '../../service/sibling/ascendancy'

const addMenuWrapCss = css`
  position: absolute;
  top: 10px;
  inset-inline-end: 18px;
  /* IconButton downsizes icon sizing. Override to better fit designs */
  button > span > svg {
    height: 26px;
    width: 26px;
  }
  button {
    border: none;
    --icon-button-size: 32px !important;
    box-shadow: none;

    [data-theme='night'] & {
      background: ${colors.gray03};
      &:active,
      &:hover,
      &:focus {
        background: ${colors.gray03} !important;
      }
    }
  }
`
const AddPerson = ({ childNode, couple, position1, otherPerson, handleClick }) => {
  const { t } = useTranslation()
  // Add Parent cases
  let buttonTitle = position1
    ? t('tw.pedigree.add-father.label', {
        child: childNode?.[couple.relatedChild]?.name,
      })
    : t('tw.pedigree.add-mother.label', {
        child: childNode?.[couple.relatedChild]?.name,
      })
  let buttonText = position1 ? t('add-find-flow.button.add-father') : t('add-find-flow.button.add-mother')
  let dataTestId = position1 ? 'add-father-button' : 'add-mother-button'

  // Add Spouse cases
  if (otherPerson.id !== 'UNKNOWN') {
    buttonText = t('tw.pedigree.add-spouse.action')
    buttonTitle = t('tw.pedigree.add-spouse.action')
    dataTestId = position1 ? 'add-spouse-1-button' : 'add-spouse-2-button'
  }

  return (
    <div className={tileCss}>
      <Affordance
        className={affordanceCss}
        onClick={handleClick}
        aria-hidden
        title={buttonTitle}
        aria-label={buttonTitle}
        data-testid={dataTestId}
      />

      <div
        className={css`
          margin-bottom: 48px;
          pointer-events: none;
        `}
      >
        <Avatar size="lg" sex={position1 ? 'male' : 'female'} gray />
      </div>

      <span
        aria-hidden
        className={css`
          text-transform: uppercase;
          color: ${colors.blue60};
        `}
      >
        {buttonText}
      </span>
    </div>
  )
}

// This component houses both the menuOverlay and the addFindFlowOverlay, so that all add-find-flow logic is in one place for the pedigree.
// The Tile component can trigger the main add-find overlay from empty parent nodes
// This component houses the plus button on each individual tile, which triggers the menuOverlay
const AddPeopleOverlay = ({
  directLine,
  person,
  otherPerson,
  rank,
  siblingIdx,
  dagId,
  handleExpandUp,
  handleExpandDown,
  handleCollapseAscendants,
  getChildDagIdAndPerson,
  addSpouse,
  position1,
  x,
  y,
  pofId,
  childNode,
  couple,
  operationTypeIfFromTile,
  handleAddFindClick,
  personIsUnknown,
  isGoldenHint,
}) => {
  const { t } = useTranslation()
  const menuOverlay = useOverlay()
  const [parent1, parent2] = person.parentsIds?.split('_').filter((id) => id !== 'UNKNOWN') || []
  const showSiblingAdd = directLine && parentIdContainsValidPid(person?.parentsIds)
  const coupleId = couple?.id
  const relatedChild = childNode?.[couple.relatedChild] // used in add parent scenarios
  const relatedChildSpouse = childNode?.[couple.relatedChild === 'person1' ? 'person2' : 'person1']

  const spouseType = position1 ? 'addSpouse2' : 'addSpouse1'

  const handleClick = ({ type } = {}) => {
    if (person?.id === GOLDEN_HINT_ID) {
      trackEvent({ event_name: `add_with_record_open:${type}` })
    }
    const addFindProps = calculateAddFindProps({
      type: type || operationTypeIfFromTile,
      person,
      otherPerson,
      coupleId,
      relatedChild,
      relatedChildSpouse,
      couple,
      parent1,
      parent2,
      position1,
      pofId,
      directLine,
      dagId,
      x,
      y,
      rank,
      siblingIdx,
      childNode,
      handleExpandUp,
      handleExpandDown,
      handleCollapseAscendants,
      addSpouse,
      getChildDagIdAndPerson,
    })
    handleAddFindClick(addFindProps)
  }

  if (personIsUnknown) {
    return (
      <AddPerson
        childNode={childNode}
        couple={couple}
        position1={position1}
        otherPerson={otherPerson}
        handleClick={() => handleClick()}
      />
    )
  }
  if (isGoldenHint) return <Button onClick={() => handleClick()}>{t('tw.pedigree.review-record')}</Button>
  return (
    <div className={cx(addMenuWrapCss, buttonCss)}>
      <IconButton
        Icon={ContentAdd}
        iconColor={colors.blue60}
        onClick={menuOverlay.handleClick}
        data-testid={`add-people-${person?.id}`}
        aria-label={t('tw.pedigree.add-relationship')}
      />
      {(menuOverlay.isOpen || menuOverlay.transitioning) && (
        <MenuOverlay inline={false} {...menuOverlay}>
          {person.gender !== 'UNKNOWN' && (
            <ListItem
              data-testid="add-child"
              onClick={() => handleClick({ type: 'addChild' })}
              primaryText={t('tw.pedigree.add-child.action')}
            />
          )}
          {!(person.gender === 'UNKNOWN' || isValidPid(otherPerson?.id)) && (
            <ListItem
              data-testid="add-spouse"
              onClick={() => handleClick({ type: spouseType })}
              primaryText={t('tw.pedigree.add-spouse.action')}
            />
          )}
          {!(person.gender === 'UNKNOWN' || !showSiblingAdd) && (
            <ListItem
              data-testid="add-sibling"
              onClick={() => handleClick({ type: 'addSibling' })}
              primaryText={t('tw.pedigree.add-sibling.action')}
            />
          )}
        </MenuOverlay>
      )}
    </div>
  )
}

export default AddPeopleOverlay
