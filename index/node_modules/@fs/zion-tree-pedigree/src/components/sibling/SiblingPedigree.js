import React, { useEffect, memo, lazy, Suspense } from 'react'
import PropTypes from 'prop-types'
import {
  Alert,
  Button,
  colors,
  ControlButton,
  IconButton,
  InfoSheet,
  Separator,
  useInfoSheet,
  ZoomPan,
  H1,
  Divider,
  Paragraph,
} from '@fs/zion-ui'
import { useEvent } from '@fs/zion-frontend-friends'
import { useHeaderControls } from '@fs/zion-root'
import { ControlSettingsAdjust, PlaceHome, MenuClose, ControlFullscreen, ControlFullscreenExit } from '@fs/zion-icon'
import { Person } from '@fs/zion-person'
import ErrorBoundary from '@fs/zion-error-boundary'
import { css } from '@linaria/core'
import { useTranslation, Trans } from 'react-i18next'
import { i18n, isTranslationAvailable } from '@fs/zion-locale'
import { useHistory } from '@fs/zion-router'
import { VisuallyHidden } from '@reach/visually-hidden'
import { AddFindFlow } from '@fs/zion-add-find-flow'
import useSiblingPedigree from '../../hooks/sibling/useSiblingPedigree'
import Couple from './Couple'
import Lines from './Lines'
import RemoveSelected from './RemoveSelected'
import useRemovePid from '../../hooks/sibling/useRemovePid'
import { selectTest } from '../../hooks/sibling/helpers'
import PedigreeThemeWrapper from '../shared/PedigreeThemeWrapper'
import { PedigreeViewOptionsProvider, PedigreeViewOptions } from '../../pedigree-view-options'
import OptionsSheet from '../shared/OptionsSheet'
import GroupsBanner from '../shared/GroupsBanner'
import usePanZoom from '../../hooks/pedigree/usePanZoom'
import { PedigreeZoomLevelProvider } from '../../PedigreeZoomLevelProvider'
import GroupDetailChip from '../shared/GroupDetailChip'
import OnboardingFlow from '../shared/OnboardingFlow/OnboardingFlow'
import { constants } from '../../hooks/sibling/dag'
import PedigreeTitle from '../shared/PedigreeTitle'
import RelationshipChangedOverlay from './RelationshipChangedOverlay'
import PrintButton from '../shared/PrintButton'

const NotFound = lazy(() => import('../../default-components/error-page/NotFound'))
const Unavailable = lazy(() => import('../../default-components/error-page/Unavailable'))
const ErrorPage = lazy(() => import('../../default-components/error-page/ErrorPage'))
const Usabilla = lazy(() => import('../Usabilla'))

const selectedPidCss = css`
  display: flex;
  justify-content: space-between;
  align-items: center;
`

const stickyWrapperCss = css`
  background-color: ${colors.gray00};
  margin-top: -8px;
  position: sticky;
  top: 0;
  z-index: 1;
`

const ZoomPanControls = memo(({ PedigreeMenu, handleResetHome, selectMode, sheet, personId }) => {
  const { t } = useTranslation()
  const { isVisible, setIsVisible } = useHeaderControls() || {}

  return (
    <>
      <ControlButton
        data-testid="fullscreen-button"
        Icon={isVisible ? ControlFullscreen : ControlFullscreenExit}
        onClick={() => setIsVisible((prev) => !prev)}
        label={t('tw.pedigree.options.fullscreen')}
      />
      <ControlButton
        data-testid="pedigree-home-button"
        Icon={PlaceHome}
        onClick={handleResetHome}
        label={t('tw.pedigree.home.button')}
      />
      {/* Hide pedigree view options, because the controls do not work in selectMode due to the permanent selection sidesheet, and they are mostly not used in selectOnlyOne mode. */}
      {!selectMode && (
        <ControlButton
          data-testid="show-options-button"
          Icon={ControlSettingsAdjust}
          onClick={sheet.handleClick}
          label={t('tw.pedigree.options.button')}
        />
      )}

      {PedigreeMenu && <PedigreeMenu pedigree="sibling" pid={personId} />}
    </>
  )
})

const UsabillaMemo = memo(({ showFeedback, language }) => {
  const englishId = '6ddd5508bbe3'
  const usabillaUrls = {
    en: `//w.usabilla.com/${englishId}.js`,
    es: '//w.usabilla.com/e4309f99d9d8.js',
    pt: '//w.usabilla.com/b31da6669ebb.js',
  }

  return (
    <Suspense fallback="">
      {showFeedback && (
        <Usabilla
          url={usabillaUrls[language]}
          communityLink="https://community.familysearch.org/group/320-tree-pedigree-views"
        />
      )}
    </Suspense>
  )
})

const SiblingPedigree = ({
  personId,
  selectMode = false,
  selectOnlyOne = false,
  selectProps,
  selectLabel,
  selectHandler,
  setSelectedPids,
  PedigreeMenu,
  onboardingWrapper,
  connectApp,
  readOnlyMode,
  setPageTitle,
  startingPid,
  CopyToGroupButtonProps,
}) => {
  const sheet = useInfoSheet({ initiallyOpen: true })
  sheet.size = 'md'
  const optionsSheet = useInfoSheet()
  const Wrapper = onboardingWrapper ? OnboardingFlow : React.Fragment
  const wrapperProps = onboardingWrapper ? { pofId: personId } : {}
  const history = useHistory()

  const {
    state,
    handleExpandDown,
    handleExpandUp,
    handleCollapseDesc,
    handleCollapseSiblings,
    handleRefreshPedigree,
    handleRefreshPOF,
    relationshipChangedOverlay,
    handleRefreshFamily,
    handleCollapseAscendants,
    getChildDagIdAndPerson,
    addSpouse,
    addPid,
    removePid,
    addAltPid,
    removeAltPid,
    handleAlternateParentsChange,
    handleAddFindClick,
    addFindFlowOverlay,
  } = useSiblingPedigree({
    pofId: personId,
    selectHandler,
    selectMode,
    selectOnlyOne,
  })

  const handleResetHome = useEvent(() => {
    // So that the home button will work
    if (startingPid && personId !== startingPid) {
      history.push(`/pedigree/sibling/${startingPid}`)
      return
    }
    // If not a different pid, just reset current view
    handleRefreshPOF()
  })

  const { selectedPids, selectedAltPids, errorCode, pedigree, pidsInTree, pofDagId, duplicateMapping } = state || {}
  // pedigreeDebug(state)
  const { t } = useTranslation()
  useEffect(() => {
    if (selectedPids && setSelectedPids) {
      setSelectedPids(
        Object.values({ ...selectedPids })
          .filter((personData) => selectTest({ selectProps, person: personData }))
          .map(({ id }) => id)
          .concat(...Object.keys(selectedAltPids || {}))
      )
    }
  }, [selectedPids, setSelectedPids, selectedAltPids, selectProps])

  const removeData = useRemovePid({ state, removePid })
  const defaultMaxes = { left: 0, right: 0, top: 0, bottom: 0 }

  const rootNode = state.renderedNodes?.find((node) => node.data.isPof)
  // pedigreeDebug('root', rootNode)
  const stage =
    state.renderedNodes?.reduce((accumulator, { x, y } = {}) => {
      accumulator.top = Math.ceil(Math.min(accumulator.top, y))
      accumulator.right = Math.ceil(Math.max(accumulator.right, x))
      accumulator.bottom = Math.ceil(Math.max(accumulator.bottom, y))
      accumulator.left = Math.ceil(Math.min(accumulator.left, x))

      return accumulator
    }, defaultMaxes) || {}
  // const pointsForCentering = [xDiff + constants.coupleWidth / 2, yDiff - constants.tileHeight]

  const pedigreeReady = Boolean(rootNode?.ux)
  const centerX = rootNode?.ux ? rootNode.ux + constants.coupleWidth / 2 : undefined

  // pedigreeDebug('stage', stage)
  const zoomPanConfig = usePanZoom({
    stage,
    pofId: personId,
    view: 'sibling',
    initialCenteredPoints: [centerX, rootNode?.uy],
    pedigreeReady,
    disableResetOnPidChange: true, // If we add a loading pedigree we'll want to remove this.
  })

  const showFeedback = ['en', 'es', 'pt'].includes(i18n.language)

  if (errorCode === 404 || errorCode === 403) return <NotFound heading={t('tw.pedigree.error.not-found')} hideBody />
  if (errorCode === 410) return <Unavailable heading={t('tw.pedigree.deleted-person.error')} hideBody />
  if (errorCode) return <ErrorPage />

  const selectedAltPidsMap = Object.entries(selectedAltPids || {})
  const selectedPidsMap = Object.entries(selectedPids || {})
    ?.reverse()
    .filter(([, personData]) => selectTest({ selectProps, person: personData }))
  const { person1, person2 } = pedigree?.find((couple) => couple?.id?.includes(state?.pofId)) || {}

  return (
    <Wrapper {...wrapperProps}>
      {!selectMode && (
        <VisuallyHidden>
          <H1>{t('tw.pedigree.more-accessible-pedigree')}</H1>
          <Button to={`/tree/pedigree/landscape/${personId}`} external>
            {t('tw.pedigree.go-to-landscape')}
          </Button>
        </VisuallyHidden>
      )}
      <GroupsBanner />
      <ZoomPan
        {...zoomPanConfig}
        data-testid="pedigree"
        controls={
          <ZoomPanControls
            handleResetHome={handleResetHome}
            PedigreeMenu={PedigreeMenu}
            sheet={optionsSheet}
            personId={personId}
            selectMode={selectMode}
          />
        }
        leftControls={!selectMode && <GroupDetailChip />}
      >
        {setPageTitle && <PedigreeTitle person1={person1} person2={person2} pedigreeView="sibling" pofId={personId} />}
        <Lines links={state?.renderedLinks} pofId={state.pofId} duplicateMapping={duplicateMapping} />
        {state.renderedNodes?.map((node) => {
          return (
            <Couple
              selectMode={selectMode}
              selectedPids={selectedPids}
              selectedAltPids={selectedAltPids}
              pidsInTree={pidsInTree}
              duplicateMapping={duplicateMapping}
              key={node?.data?.dagId}
              addSpouse={addSpouse}
              handleExpandDown={handleExpandDown}
              handleExpandUp={handleExpandUp}
              handleCollapseDesc={handleCollapseDesc}
              handleCollapseAscendants={handleCollapseAscendants}
              handleCollapseSiblings={handleCollapseSiblings}
              handleRefreshPedigree={handleRefreshPedigree}
              handleRefreshFamily={handleRefreshFamily}
              getChildDagIdAndPerson={getChildDagIdAndPerson}
              handleAlternateParentsChange={handleAlternateParentsChange}
              pofDagId={pofDagId}
              pofId={personId}
              addPid={addPid}
              addAltPid={addAltPid}
              removeAltPid={removeAltPid}
              checkRemove={removeData?.checkRemove}
              selectProps={selectProps}
              selectOnlyOne={selectOnlyOne}
              node={node}
              readOnlyMode={readOnlyMode}
              handleAddFindClick={handleAddFindClick}
            />
          )
        })}
      </ZoomPan>
      {/* <ZoomPanMiniMap stageStuff={stageStuff} state={state} /> */}
      {selectMode && !selectOnlyOne ? (
        <>
          <InfoSheet
            title={t('tw.pedigree.copy.heading', { count: selectedPidsMap?.length || 0 })}
            {...sheet}
            nonClosable
          >
            <div className={stickyWrapperCss}>
              <Separator size="nano" />
              <Button
                emphasis="high"
                fullWidth
                onClick={selectHandler}
                data-testid="copy-to-group"
                {...CopyToGroupButtonProps}
              >
                {selectLabel || t('tw.pedigree.copy-to-group.button')}
              </Button>
              <Separator size="nano" />
            </div>
            <Alert type="help" dismissable outlined>
              <Trans i18nKey="tw.pedigree.copy.instructions">
                <b />
              </Trans>
            </Alert>
            {isTranslationAvailable('groups.memories-privacy.description-short') ? (
              <>
                <Separator size="nano" />
                <Paragraph size="sm">{t('groups.memories-privacy.description-short')}</Paragraph>
              </>
            ) : null}
            <Separator size="xs" />
            {selectedPidsMap.map(([selectKey, personData]) => (
              <div key={selectKey} className={selectedPidCss}>
                <div style={{ minWidth: 0, marginTop: '8px' }}>
                  <Person personObj={personData} componentSize="sm" linksOpenNewTab />
                </div>
                <IconButton
                  title={t('tw.pedigree.remove-person-to-copy.label', { personName: personData.name })}
                  Icon={MenuClose}
                  onClick={(evt) => removeData?.checkRemove(evt, selectKey)}
                />
              </div>
            ))}
            {selectedAltPidsMap.map(([selectKey, personData]) => (
              <div key={selectKey} className={selectedPidCss}>
                <div style={{ minWidth: 0, marginTop: '8px' }}>
                  <Person personObj={personData} componentSize="sm" linksOpenNewTab />
                </div>
                <IconButton
                  title={t('tw.pedigree.remove-person-to-copy.label', { personName: personData.name })}
                  Icon={MenuClose}
                  onClick={() => removeAltPid(selectKey)}
                />
              </div>
            ))}
          </InfoSheet>
          {(removeData.overlay.isOpen || removeData.overlay.transitioning) && (
            <RemoveSelected {...removeData} selectProps={selectProps} selectedPids={state?.selectedPids} />
          )}
        </>
      ) : (
        <>
          <OptionsSheet view="portrait" sheet={optionsSheet} pofId={personId}>
            <PedigreeViewOptions
              includePortraits
              includeRecordHints
              includeResearchSuggestions
              includeDataQualityIssues
              includeOrdinances
              includeDataProblems
              includeAltRelationships
              includeInvertColors
            />
            <Divider />
            <Separator />
            <PrintButton view="portrait" pofId={personId} />
          </OptionsSheet>
          <UsabillaMemo showFeedback={showFeedback} language={i18n.language} />
        </>
      )}
      {(relationshipChangedOverlay?.isOpen || relationshipChangedOverlay?.transitioning) && (
        <RelationshipChangedOverlay overlay={relationshipChangedOverlay} handleRefreshPOF={handleRefreshPOF} />
      )}
      {state.addFindProps && (
        <AddFindFlow
          key={JSON.stringify(state.addFindProps)} // force a re-render if a user clicks another addFind button while sheet is open
          simpleMode={connectApp}
          inInfoSheet
          overlay={addFindFlowOverlay}
          {...state.addFindProps}
        />
      )}
    </Wrapper>
  )
}

export default function SiblingPedigreeWrapper(props) {
  return (
    <ErrorBoundary>
      <PedigreeViewOptionsProvider>
        <PedigreeZoomLevelProvider>
          <PedigreeThemeWrapper>
            <SiblingPedigree {...props} />
          </PedigreeThemeWrapper>
        </PedigreeZoomLevelProvider>
      </PedigreeViewOptionsProvider>
    </ErrorBoundary>
  )
}

SiblingPedigreeWrapper.propTypes = {
  /** The person for which we want to get a pedigree for. */
  personId: PropTypes.string.isRequired,

  /** Whether to put pedigree into a selectable state. */
  selectMode: PropTypes.bool,

  /** If selectMode is on, limit selection to a single person. */
  selectOnlyOne: PropTypes.bool,

  /** If selectMode is on, properties to check to allow for selection. Either pass a single object, or an array of possible objects to match against. */
  selectProps: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.object), PropTypes.object]),

  /** Pass through props given to Button in selectMode */
  CopyToGroupButtonProps: PropTypes.object,

  /** Heading string while in selectMode */
  selectLabel: PropTypes.string,

  /** While in selectMode, function to call when user has finished selecting persons */
  selectHandler: PropTypes.func,

  /** setState function passed in to surface selected pids to parent component */
  setSelectedPids: PropTypes.func,

  /** JSX menu to render in zoompan. Only used in tree apps. */
  PedigreeMenu: PropTypes.element,

  /** Wrapping JSX for onboarding experience. Only used in tree apps. */
  onboardingWrapper: PropTypes.element,

  /** Passes simple mode to add-find, was meant to support ios experience temporarily, probably going away eventually. */
  connectApp: PropTypes.bool,

  /** Puts pedigree into view-only mode. All edit actions disabled. */
  readOnlyMode: PropTypes.bool,

  /** Allows pedigree to render title component which modifies the page title */
  setPageTitle: PropTypes.bool,

  /** User's starting pid, used for redirects from home button */
  startingPid: PropTypes.string,
}
