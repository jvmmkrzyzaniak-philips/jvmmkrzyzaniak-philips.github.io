import React, { useState, useEffect, useRef } from 'react'
import axios from '@fs/zion-axios'
import { NoticeInfo } from '@fs/zion-icon'
import {
  DialogOverlay,
  ActionChip,
  useOverlay,
  Checkbox,
  Expander,
  ExpanderContent,
  ExpanderHeader,
  colors,
  DescriptionTooltip,
} from '@fs/zion-ui'
import { boolAttr } from '@fs/zion-frontend-friends'
import { css } from '@linaria/core'
import { PersonListItem } from '@fs/zion-person'
import { useTranslation } from 'react-i18next'
import { selectTest, selectKey } from '../../hooks/sibling/helpers'

const superWrapperCss = css`
  --select-margin-left: 40px;
  border: 1px solid ${colors.gray10};
  border-radius: 8px;
  padding: 8px;
  list-style-type: none;
`

const wrapperCssForList = css`
  position: relative;
  border: 1px solid ${colors.gray10};
  border-radius: 2px 8px 8px 2px;
  padding: 0 4px;
  margin-bottom: 4px;
  &[person-child] {
    margin-left: var(--select-margin-left);
  }
  &::before {
    content: '';
    background: ${colors.gray03};
    border-radius: 4px 0px 0px 4px;
    width: 4px;
    height: 100%;
    position: absolute;
    left: -4px;
    top: 0;
  }
  &[gender='MALE']::before {
    background: ${colors.blue30};
  }
  &[gender='FEMALE']::before {
    background: ${colors.red50};
  }
  &[odd] {
    background: ${colors.gray02};
  }
`

const gridCss = css`
  display: grid;
  grid-template-columns: 48% 48%;
  grid-gap: 10px 4%;
  &[small] {
    grid-template-columns: 100%;
  }
`

const useSpouseData = (overlay, pidsForData, coupleId) => {
  const [spouseData, setSpouseData] = useState([])
  const mounted = useRef()
  const loaded = useRef()

  useEffect(() => {
    mounted.current = true
    if (overlay.isOpen && mounted.current && !spouseData.length && loaded.current !== coupleId) {
      const handler = (outerData, pid) => {
        const { data } = outerData
        mounted.current &&
          setSpouseData((prev) => [
            ...prev,
            ...(data?.spouses
              .map((spouse) => {
                return { ...spouse, spouseName: data.name, treeLinkedPid: pid }
              })
              .filter(({ spouse }) => !coupleId.includes(spouse.id)) || []),
          ])
      }
      pidsForData.forEach((pid) => {
        const url = `/service/tree/tree-data/v8/descendancy/${pid}?numGenerations=2&includePhotos=true`
        axios.get(url).then((data) => handler(data, pid))
      })
      loaded.current = coupleId
    }
    return () => {
      mounted.current = false
    }
  }, [pidsForData, coupleId, spouseData.length, overlay.isOpen])

  return spouseData
}

const PersonSelectItem = ({
  person,
  parent,
  isChild,
  alreadyInTree,
  odd,
  addAltPid,
  treeLinkedSelectKey,
  removeAltPid,
  selectedAltPids,
  isSelectable,
}) => {
  const [t] = useTranslation()
  const isChecked = Boolean(selectedAltPids?.[person.id])
  const parentWithKey = parent ? { ...parent, treeLinkedSelectKey } : undefined
  const endElement = alreadyInTree ? (
    <DescriptionTooltip
      target={<NoticeInfo />}
      label="Already in Tree"
      description="This person is selectable from the existing tree on the page"
    />
  ) : (
    <Checkbox
      aria-label={
        isChecked
          ? t('tw.pedigree.remove-person-to-copy.label', { personName: person.name })
          : t('tw.pedigree.add-person-to-copy.label', { personName: person.name })
      }
      checked={isChecked}
      onChange={() =>
        isChecked ? removeAltPid(person.id) : addAltPid({ ...person, parent: parentWithKey, treeLinkedSelectKey })
      }
    />
  )
  return (
    <div className={wrapperCssForList} odd={boolAttr(odd)} gender={person.gender} person-child={boolAttr(isChild)}>
      <PersonListItem
        dense
        disabled={!isSelectable}
        componentSize="md"
        personObj={person}
        endElement={isSelectable ? endElement : undefined}
      />
    </div>
  )
}

const AltSpouseSelectOverlay = ({
  pidsForData,
  dagId,
  addAltPid,
  removeAltPid,
  selectedAltPids,
  pidsInTree,
  selectOnlyOne,
  selectProps,
}) => {
  const overlay = useOverlay()
  const [t] = useTranslation()

  const spouseData = useSpouseData(overlay, pidsForData, dagId)
  const smallDialog = spouseData.length < 3
  const expanderTitle = (name) => t('tw.pedigree.sibling-alt-spouses-and-children-expand-heading', { name })
  return (
    <>
      <ActionChip label={t('tw.pedigree.sibling-alt-spouses-and-children')} onClick={overlay.handleClick} />
      {(overlay.isOpen || overlay.transitioning) && (
        <DialogOverlay
          size={smallDialog ? 'md' : 'lg'}
          {...overlay}
          title={t('tw.pedigree.sibling-alt-spouses-and-children')}
          closeOnClickAway={false}
        >
          <div className={gridCss} small={boolAttr(smallDialog)}>
            {spouseData.map(({ children, spouse, spouseName, treeLinkedPid }) => {
              const spouseInTree = pidsInTree.has(spouse?.id)
              const spouseIsSelectable = selectTest({ selectProps, person: spouse })

              const treeLinkedSelectKey = selectKey(dagId, treeLinkedPid)
              const outerKey = `altSelectWrap-${spouse?.id}`
              const title = expanderTitle(spouseName)
              return (
                <div key={outerKey}>
                  <Expander initiallyOpen>
                    <ExpanderHeader openedTitle={title} closedTitle={title}>
                      <strong>{title}</strong>
                    </ExpanderHeader>
                    <ExpanderContent>
                      <ul className={superWrapperCss}>
                        {/* <span style={{ marginLeft: '16px', fontSize: '12px' }}>Spouse</span> */}

                        <PersonSelectItem
                          isSelectable={spouseIsSelectable}
                          person={spouse}
                          treeLinkedSelectKey={treeLinkedSelectKey}
                          alreadyInTree={spouseInTree}
                          addAltPid={addAltPid}
                          removeAltPid={removeAltPid}
                          selectedAltPids={selectedAltPids}
                          selectOnlyOne={selectOnlyOne}
                        />
                        {Boolean(children?.length) && (
                          <span style={{ marginLeft: 'var(--select-margin-left)', fontSize: '12px' }}>
                            {t('tw.pedigree.sibling-alt-spouses-children-count', { count: children.length })}
                          </span>
                        )}
                        {children?.map((child, idx) => {
                          const key = `select-child${child?.id}${idx}`
                          const childInTree = pidsInTree.has(child?.id)
                          const childIsSelectable = selectTest({ selectProps, person: child })

                          return (
                            <PersonSelectItem
                              key={key}
                              odd={(idx + 1) % 2}
                              parent={spouse}
                              treeLinkedSelectKey={treeLinkedSelectKey}
                              isChild
                              alreadyInTree={childInTree}
                              isSelectable={childIsSelectable}
                              person={child}
                              addAltPid={addAltPid}
                              removeAltPid={removeAltPid}
                              selectedAltPids={selectedAltPids}
                            />
                          )
                        })}
                      </ul>
                    </ExpanderContent>
                  </Expander>
                </div>
              )
            })}
          </div>
        </DialogOverlay>
      )}
    </>
  )
}

export default AltSpouseSelectOverlay
