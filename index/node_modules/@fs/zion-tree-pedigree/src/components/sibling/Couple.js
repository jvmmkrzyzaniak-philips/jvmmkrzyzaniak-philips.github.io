import React, { memo, useEffect } from 'react'
import { css, cx } from '@linaria/core'
import { IconButton, colors } from '@fs/zion-ui'
import { ArrowCaret, NoticeLoading } from '@fs/zion-icon'
import { boolAttr, useEvent } from '@fs/zion-frontend-friends'
import { trackEvent } from '@fs/zion-analytics'
import { useTranslation } from 'react-i18next'
import { isTranslationAvailable } from '@fs/zion-locale'
import { selectTest } from '../../hooks/sibling/helpers'
import { GOLDEN_HINT_ID } from '../../service/sibling/ascendancy'
import Tile, { expandButtonCss } from './Tile'
import { constants } from '../../hooks/sibling/dag'
import AltSpouseSelectOverlay from './AltSpouseSelectOverlay'

const expandDownCss = css`
  margin-top: 16px;
`

const coupleWrapperCss = css`
  position: absolute;
  width: ${constants.coupleWidth}px;
  // flexbox was messing up the line drawing math by a few pixels
  display: grid;
  justify-items: center;
  transition: 0.3s ease;

  &[non-direct-line] {
    width: ${constants.nonDirectCoupleWidth}px;
  }

  > button {
    margin-top: 5px;
    background: ${colors.gray02};
    &:active,
    &:hover,
    &:focus,
    &:focus-within,
    &:focus-visible {
      background: ${colors.gray10} !important;
    }
  }
`
const tilesCss = css`
  display: flex;
  flex-flow: row;
`
function Couple({
  selectMode,
  selectedPids,
  selectedAltPids,
  pidsInTree,
  node,
  addSpouse,
  handleExpandDown,
  handleExpandUp,
  handleCollapseDesc,
  handleCollapseAscendants,
  handleCollapseSiblings,
  handleRefreshPedigree,
  handleRefreshFamily,
  handleAlternateParentsChange,
  getChildDagIdAndPerson,
  pofId,
  addPid,
  addAltPid,
  removeAltPid,
  checkRemove,
  selectProps,
  selectOnlyOne,
  readOnlyMode,
  pofDagId,
  duplicateMapping,
  handleAddFindClick,
}) {
  const { t } = useTranslation()
  const { data: couple, ux: x, uy: y } = node
  const {
    person1,
    person2,
    rank,
    siblingIdx,
    isDuplicate,
    coupleHasChildren,
    loading,
    dagId,
    loadingAscPid,
    loadingDesc,
    loadingSiblingsPid,
  } = couple

  const showExpandDown = (couple?.id.includes(pofId) && coupleHasChildren) || (!couple.directLine && coupleHasChildren)

  const person1IsSelectable = selectMode && selectTest({ selectProps, person: person1 })
  const person2IsSelectable = selectMode && selectTest({ selectProps, person: person2 })

  const handleChangeSpouse = useEvent(() => {
    handleCollapseDesc({ dagId: couple.dagId, x, y })
  })

  const sharedTileProps = {
    selectedPids,
    handleExpandUp,
    handleCollapseAscendants,
    handleCollapseSiblings,
    handleRefreshPedigree,
    handleRefreshFamily,
    handleAlternateParentsChange,
    getChildDagIdAndPerson,
    pofId,
    addSpouse,
    addPid,
    checkRemove,
    selectProps,
    selectMode,
    selectOnlyOne,
    couple,
    handleExpandDown,
    handleChangeSpouse,
    x,
    y,
    duplicateMapping,
    handleAddFindClick,
  }
  const person1Name = person1?.name // declare these outside of the useEffect for stability
  const person2Name = person2?.name

  useEffect(() => {
    if (couple.isGoldenHint) {
      // Track when golden hint nodes are shown to users
      // We talked about the best place to do this, and even though a user may expand/collapse the nodes here, we felt this was best.
      const goldenHintType = person1Name && person2Name ? 'couple' : 'single'
      trackEvent({ link_name: `golden_hint_rendered:${goldenHintType}` })
    }
  }, [couple.isGoldenHint, person1Name, person2Name])

  const dagChildrenCount = [...(node.children() || [])]?.length
  const expandCollapseParentsTranslationKey =
    dagChildrenCount > 0
      ? 'tw.pedigree.collapse-children-of-parents.label'
      : 'tw.pedigree.expand-children-of-parents.label'

  const expandCollapseOneParentTranslationKey =
    dagChildrenCount > 0
      ? 'tw.pedigree.collapse-children-of-parent.label'
      : 'tw.pedigree.expand-children-of-parent.label'

  const expandDownText =
    couple?.person1?.name && couple?.person2?.name
      ? t(expandCollapseParentsTranslationKey, { parent1: couple.person1.name, parent2: couple.person2.name })
      : t(expandCollapseOneParentTranslationKey, { parent: couple?.person1?.name || couple?.person2?.name })
  const altSpouseSelectIds = [person1, person2]
    .map((person) => person.hasMultipleFamiliesAsParent && person?.id)
    .filter(Boolean)
  const duplicateTooltip =
    isDuplicate && isTranslationAvailable('tw.pedigree.expand-duplicate-info.label')
      ? t('tw.pedigree.expand-duplicate-info.label')
      : ''
  return (
    <div
      className={coupleWrapperCss}
      style={{ top: y, left: x }}
      is-couple={boolAttr(!couple?.id?.includes('UNKNOWN'))}
      non-direct-line={boolAttr(!couple.directLine)}
      data-testid={`couple-${couple?.id}`}
      data-rank={couple.rank}
    >
      <div className={tilesCss}>
        {(person1 || loading) && (
          <Tile
            {...sharedTileProps}
            highlight={dagId === pofDagId && person1?.id === pofId}
            isSelectable={person1IsSelectable}
            person={person1}
            otherPerson={person2}
            slot={1}
            loading={loading}
            readOnlyMode={readOnlyMode}
            loadingExpandUp={loadingAscPid === person1?.id}
            loadingSiblings={loadingSiblingsPid === person1?.id}
            isGoldenHint={couple.isGoldenHint && person1?.id === GOLDEN_HINT_ID}
          />
        )}
        {(person2 || loading) && (
          <Tile
            {...sharedTileProps}
            highlight={dagId === pofDagId && person2?.id === pofId}
            isSelectable={person2IsSelectable}
            person={person2}
            otherPerson={person1}
            slot={2}
            loading={loading}
            readOnlyMode={readOnlyMode}
            loadingExpandUp={loadingAscPid === person2?.id}
            loadingSiblings={loadingSiblingsPid === person2?.id}
            isGoldenHint={couple.isGoldenHint && person2?.id === GOLDEN_HINT_ID}
          />
        )}
      </div>
      {selectMode && Boolean(altSpouseSelectIds.length) && (
        <AltSpouseSelectOverlay
          selectProps={selectProps}
          pidsForData={altSpouseSelectIds}
          pidsInTree={pidsInTree}
          selectedAltPids={selectedAltPids}
          dagId={dagId}
          addAltPid={addAltPid}
          removeAltPid={removeAltPid}
        />
      )}
      {showExpandDown && (
        <div className={cx(expandDownCss, expandButtonCss)}>
          <IconButton
            disabled={isDuplicate}
            title={duplicateTooltip}
            aria-label={expandDownText}
            emphasis="low"
            Icon={loadingDesc ? NoticeLoading : ArrowCaret}
            iconDirection={dagChildrenCount > 0 ? 'up' : 'down'}
            onClick={() => {
              if (dagChildrenCount > 0) {
                trackEvent({ link_name: 'pedigree: portrait beta: toggle children: close' })
                handleCollapseDesc({ dagId: couple.dagId, x, y })
              } else {
                trackEvent({ link_name: 'pedigree: portrait beta: toggle children: open' })
                handleExpandDown({
                  dagId: couple.dagId,
                  coupleId: couple.id,
                  x,
                  y,
                  rank,
                  siblingIdx,
                })
              }
            }}
            data-testid="expand-down"
          />
        </div>
      )}
    </div>
  )
}

export default memo(Couple)
