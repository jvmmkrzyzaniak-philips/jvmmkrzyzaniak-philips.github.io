import React from 'react'
import { DataProblemIndicator, ResearchSuggestionIndicator, RecordHintIndicator } from '@fs/zion-research-help'
import { Row } from '@fs/zion-ui'
import { TemplePersonIndicator } from '@fs/zion-ordinances-reserve'
import { useGroupsContext } from '@fs/zion-tree-groups'
import { usePedigreeViewOptions } from '../../pedigree-view-options'

/**
 * NOTE: If in the future we want to display all of the relevant details on the research help items,
 * we will need to pass in conclusions as part of the person object. Without birth/death/etc conclusions,
 * not all relevant info can be displayed. Pedigree persons do not include full conclusions.
 * See: https://beta.familysearch.org/frontier/babylon/?path=/story/components-research-help-researchhelpitem--all-research-help-items&args=showDetails:true.
 * @param {object} props - the props
 * @param {object} props.size - The size to pass through to IconButton.
 * @param {Array} props.indicatorsToShow - What indicators to actually show, given data and user preferences. Options: 'DATA_QUALITY' | 'RECORD_HINTS' | 'RESEARCH_SUGGESTION' | 'TEMPLE'
 * @param {Boolean} props.showAll - Whether to show all indicators available, instead of just the first.
 * @param {object} props.person - person object
 * @param {func} props.onSuccess - function to run on success
 * @returns {JSX.Element} - A single indicator icon. Order of precedence: DATA_QUALITY, RECORD_HINT, RESEARCH_SUGGESTION.
 */
// Additionally, tree-research-help does not have any support for onSuccess, since corrections will take place on a completely separate page, and we can't easily utilize SWR in the pedigree as the person page does. onDismiss, however is supported, since that action is contained within the modal.
const Indicator = ({ showAll, size = 'sm', indicatorsToShow, person, onSuccess }) => {
  const familyMembers = { spouses: person.spouses || [], parents: person.parents || [] }

  const dataProblemTemplate = (
    <DataProblemIndicator size={size} person={person} familyMembers={familyMembers} onDismiss={onSuccess} />
  )
  const recordHintTemplate = (
    <RecordHintIndicator size={size} person={person} familyMembers={familyMembers} onDismiss={onSuccess} />
  )
  const researchSuggestionTemplate = (
    <ResearchSuggestionIndicator size={size} person={person} familyMembers={familyMembers} onDismiss={onSuccess} />
  )
  const templeTemplate = (
    <TemplePersonIndicator
      size={size}
      personId={person.id}
      templeRollupStatus={person.templeRollupStatus}
      refetchTempleRollupStatus={onSuccess}
    />
  )

  // Either show the single highest-ranked indicator, OR all indicators that are appropriate.

  if (showAll) {
    return (
      <Row alignY="middle" gutters="nano">
        {indicatorsToShow.includes('DATA_QUALITY') ? dataProblemTemplate : ''}
        {indicatorsToShow.includes('RECORD_HINTS') ? recordHintTemplate : ''}
        {indicatorsToShow.includes('RESEARCH_SUGGESTION') ? researchSuggestionTemplate : ''}
        {indicatorsToShow.includes('TEMPLE') ? templeTemplate : ''}
      </Row>
    )
  }

  // In the off chance that someone unnecessarily passes in coupleSuggestions AND includeTemple, temple preempts all other indicators.
  if (indicatorsToShow.includes('TEMPLE')) {
    return templeTemplate
  }
  if (indicatorsToShow.includes('DATA_QUALITY')) {
    return dataProblemTemplate
  }
  if (indicatorsToShow.includes('RECORD_HINTS')) {
    return recordHintTemplate
  }
  if (indicatorsToShow.includes('RESEARCH_SUGGESTION')) {
    return researchSuggestionTemplate
  }

  return null
}

const noActionableStatus = ['COMPLETED', 'NOT_AVAILABLE']

// NOTE: Only one hinting indicator is displayed at a time for standard indicator display. Order of precedence: DATA_QUALITY, RECORD_HINT, RESEARCH_SUGGESTION.
export default function Indicators({
  person,
  coupleId,
  coupleSuggestions,
  onSuccess,
  includeTemple = false,
  limit = 4,
  showAll = false,
  size = 'sm',
}) {
  const dataQualityList = [
    ...(person?.suggestions?.dataQualityList || []),
    ...(coupleSuggestions?.dataQualityList || []),
  ]
  const researchSuggestionList = [
    ...(person?.suggestions?.researchSuggestionList || []),
    ...(coupleSuggestions?.researchSuggestionList || []),
  ]
  const combinedSuggestions = {
    dataQualityList,
    empty: dataQualityList.length < 1 && researchSuggestionList.length < 1,
    researchSuggestionList,
  }
  const { isReadOnlyTree } = useGroupsContext()
  const {
    showTemple,
    prefs: { showResearchSuggestions, showTempleOpportunities, showDataQualityIssues, showRecordHints },
  } = usePedigreeViewOptions()

  const indicatorsToShow = []

  const showTempleIndicator =
    includeTemple && showTemple && (person?.lifeSpan || person?.lifespan) && !person.living && showTempleOpportunities
  const hasTempleOpportunity = !noActionableStatus.includes(person.templeRollupStatus)

  const actuallyShowTempleIndicator = showTempleIndicator && hasTempleOpportunity
  const actuallyShowDataQualityIssuesIndicator = showDataQualityIssues && combinedSuggestions?.dataQualityList?.length
  const actuallyShowRecordHintsIndicator = showRecordHints && person?.hasRecordHints
  const actuallyShowResearchSuggestionsIndicator =
    showResearchSuggestions && combinedSuggestions?.researchSuggestionList?.length

  if (actuallyShowTempleIndicator && indicatorsToShow.length < limit) {
    indicatorsToShow.push('TEMPLE')
  }
  if (actuallyShowDataQualityIssuesIndicator && !isReadOnlyTree && indicatorsToShow.length < limit) {
    indicatorsToShow.push('DATA_QUALITY')
  }
  if (actuallyShowRecordHintsIndicator && !isReadOnlyTree && indicatorsToShow.length < limit) {
    indicatorsToShow.push('RECORD_HINTS')
  }
  if (actuallyShowResearchSuggestionsIndicator && !isReadOnlyTree && indicatorsToShow.length < limit) {
    indicatorsToShow.push('RESEARCH_SUGGESTION')
  }

  return (
    <div data-testid="indicators-container">
      <Indicator
        showAll={showAll}
        indicatorsToShow={indicatorsToShow}
        person={{ ...person, suggestions: combinedSuggestions }}
        coupleId={coupleId}
        onSuccess={onSuccess}
        size={size}
      />
    </div>
  )
}
