import { useCallback, useEffect, useState } from 'react'
import { getEffectiveUser } from '@fs/zion-user'
import { getPersonObj } from '@fs/zion-person-service'
import { getPreference, setPreference } from '@fs/zion-preferences'
import { getSessionId } from '@fs/zion-session'
import axios from '@fs/zion-axios'

export const shouldShow = async (pofId, demo) => {
  if (demo) return true
  const { personId } = await getEffectiveUser()

  // only show if logged in user is pof
  if (personId !== pofId) return false

  const onboarded = await getPreference('tree.ONBOARDED')

  if (onboarded) return false

  const [serverPromise] = await getPersonObj(personId, 'full') // 'full' gets changed to 'details' internally
  const person = await serverPromise
  const showOverlay = person.gender === 'UNKNOWN' || !person.birth

  if (!showOverlay) {
    await setPreference('tree.ONBOARDED', true)
  }

  return showOverlay
}

export async function postGenderToCIS(gender) {
  if (!gender) return Promise.reject(new Error('need to pass a gender in order to save it!'))
  const postBody = {
    profileData: [
      {
        name: 'cis.profile.gender',
        value: gender,
        shared: false,
      },
    ],
  }
  const sessionId = getSessionId()
  // TODO: this is a deprecated endpoint. It will be replaced with a call to service/church/membership which is behind the VPN so we need tree-data or someone to front us if we need to keep updating membership
  return axios.post(`/service/ident/cis/cis-public-api/v4/profileData?sessionId=${sessionId}`, postBody)
}

export default function useShowOnboardingFlow(pofId, demo, close) {
  const [show, setShow] = useState(false)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    let isMounted = true

    shouldShow(pofId, demo)
      .then((value) => {
        return isMounted && setShow(value) // can force onboard to display by adding condition here, pofId === '<pid>'
      })
      .catch(() => {
        isMounted && setShow(false)
      })
      .finally(() => {
        isMounted && setLoading(false)
      })

    return () => {
      isMounted = false
    }
  }, [pofId, demo])

  const closeOnboarding = useCallback(() => {
    setShow(false)
    close()
  }, [close])

  return { show, loading, closeOnboarding }
}
