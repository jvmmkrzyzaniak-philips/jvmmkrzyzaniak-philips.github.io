import React, { useEffect, Suspense, lazy } from 'react'

import { useOverlay } from '@fs/zion-ui'
import { trackEvent } from '@fs/zion-analytics'

import useShowOnboardingFlow from './useShowOnboardingFlow'

const OnboardingFlowOverlay = lazy(() => import('./OnboardingFlowOverlay'))

export default function OnboardingFlow({ pofId, children, demo, demoOverlay }) {
  let overlay = useOverlay()
  if (demoOverlay) {
    overlay = demoOverlay
  }
  const { open, close } = overlay

  const { show, loading, closeOnboarding } = useShowOnboardingFlow(pofId, demo, close)

  useEffect(() => {
    if (!loading && show) {
      trackEvent({ event_name: 'Tree Onboarding Flow: Opened' })
      open()
    }
  }, [show, open, loading])

  // don't show anything while loading
  if (loading) return null

  // if onboarded, just continue rendering the app
  if (!loading && !show) return children || null

  return (
    <Suspense fallback="">
      <div data-testid="onboarding-flow-router">
        <OnboardingFlowOverlay overlay={overlay} pofId={pofId} closeOnboarding={closeOnboarding} />
      </div>
    </Suspense>
  )
}
