import React, { useEffect, useState, useRef } from 'react'
import { QuickGlanceOverlay, RadioGroup, Radio, useOverlay, Ellipsis, useStatusOverlay, H5, colors } from '@fs/zion-ui'
import { useAutoFocus } from '@fs/zion-ui/quarks-authorized-use-only'
import { VisuallyHidden } from '@reach/visually-hidden'
import { PersonFamily } from '@fs/zion-icon'
import { Person, Couple } from '@fs/zion-person'
import { useTranslation } from 'react-i18next'
import { useGenDetailsSheet } from '@fs/zion-gen-details'
import { useGroupsContext } from '@fs/zion-tree-groups'
import { getNameRelatedData, getPersonObj } from '@fs/zion-person-service'
import { usePreference } from '@fs/zion-preferences'
import { setPreferredParents, useAltParents } from '../../service/shared/alt'

const AltParentsOverlay = ({
  overlay,
  loading,
  childName,
  altParentData,
  handleChange,
  person1Id,
  person2Id,
  showForm,
  lls,
}) => {
  const { t } = useTranslation()
  const ref = useRef()
  const { setArk, infoSheet: genDetailsInfoSheet } = useGenDetailsSheet() || {}

  // We use this because we show loading content after opening, we then want to focus after it's loaded.
  useAutoFocus({
    isOpen: !loading,
    enabled: true,
    containerRef: ref,
  })
  const handleClick = ({ evt, id }) => {
    evt.preventDefault()
    if (lls) {
      setArk?.(id)
      !genDetailsInfoSheet.isOpen && genDetailsInfoSheet.open(evt)
    }
  }

  const altParentsHeadingTranslationKey = showForm
    ? `tw.pedigree.set-alt-parents.heading`
    : `tw.pedigree.alt-parents.heading`

  return (
    <QuickGlanceOverlay placement="start" {...overlay} data-testid="alt-parents-overlay">
      <H5>
        <Ellipsis>{t(altParentsHeadingTranslationKey, { name: childName })}</Ellipsis>
      </H5>
      {loading ? (
        <>
          <VisuallyHidden aria-live="assertive">{t('tw.pedigree.alternate-parents.loading')}</VisuallyHidden>
          {[0, 1, 2].map((id) => (
            <Person key={id} componentSize="sm" asListItem dense loading />
          ))}
        </>
      ) : (
        <>
          <VisuallyHidden aria-live="assertive">
            {t('tw.pedigree.alternate-parents.count', { count: altParentData?.length })}{' '}
            {t('tw.pedigree.alternate-parents.select', { name: childName })}
          </VisuallyHidden>
          {showForm ? (
            <RadioGroup>
              {altParentData?.map(({ spouse1, spouse2 }, idx) => {
                const k = `${spouse1?.id}${idx}`
                const couple = `${spouse1?.id}_${spouse2?.id}`
                return (
                  <Radio
                    key={k}
                    name="alt-parents"
                    value={couple}
                    checked={[spouse1, spouse2].every(({ id }) => person1Id === id || person2Id === id)}
                    label={
                      <Couple
                        doNotLinkToPersonPage
                        openPersonSheet
                        spouse1Obj={spouse1}
                        spouse2Obj={spouse2}
                        noBoldName
                      />
                    }
                    onChange={() => handleChange(spouse1, spouse2)}
                    data-testid="preferred-parent-radio-btn"
                  />
                )
              })}
            </RadioGroup>
          ) : (
            altParentData?.map(({ spouse1, spouse2 }, idx) => {
              const k = `${spouse1?.id}${idx}`
              const coupleProps = lls
                ? {
                    doNotLinkToPersonPage: true,
                    onClickPerson1: (evt) => handleClick({ evt, id: spouse1?.id }),
                    onClickPerson2: (evt) => handleClick({ evt, id: spouse2?.id }),
                  }
                : {
                    openPersonSheet: true,
                  }
              return (
                <Couple
                  spouse1Obj={spouse1}
                  spouse2Obj={spouse2}
                  key={k}
                  data-testid="alt-parent-couple"
                  noBoldName
                  {...coupleProps}
                />
              )
            })
          )}
        </>
      )}
    </QuickGlanceOverlay>
  )
}

const AlternateParents = ({
  childWithMultipleFamilies,
  /** @deprecated use child prop instead */
  childName: oldChildName,
  showMarriages,
  person1Id,
  person2Id,
  lls,
  darkMode,
  portraitMode,
  onChange,
  showForm = true,
  child,
  ...props
}) => {
  const altParentOverlay = useOverlay()
  const [altParentData, setAltParentData] = useState()
  const { currentTreeId } = useGroupsContext()
  const [{ loading, data }, getAltParents] = useAltParents(childWithMultipleFamilies, lls, currentTreeId)
  const { t } = useTranslation()
  const showStatusOverlay = useStatusOverlay()

  const handleAltParents = async (evt) => {
    altParentOverlay.handleClick(evt)
    !altParentData && getAltParents()
  }

  useEffect(() => {
    if (data && !altParentData) {
      const parents = data.data?.reduce((arr, next) => {
        const { spouse1 = { id: 'UNKNOWN' }, spouse2 = { id: 'UNKNOWN' } } = next
        arr.push({ spouse1, spouse2 })
        return arr
      }, [])
      setAltParentData(parents)
    }
  }, [altParentData, data])

  const handleChange = async (spouse1, spouse2) => {
    try {
      await setPreferredParents({ spouse1, spouse2 }, childWithMultipleFamilies)
      const [serverPromise] = await getPersonObj(childWithMultipleFamilies, 'full')
      const childObj = await serverPromise
      altParentOverlay.close()
      const newCoupleId =
        childObj?.parents?.find(({ preferred }) => preferred)?.coupleId || childObj?.parents?.[0]?.coupleId
      onChange?.(newCoupleId)
      showStatusOverlay({
        message: t('tw.pedigree.preferred-parents.success'),
        type: 'success',
        transient: true,
      })
    } catch (e) {
      showStatusOverlay({
        message: t('tw.pedigree.preferred-parents.error'),
        type: 'error',
        transient: true,
        actionLabel: t('tw.pedigree.retry'),
        actionCallback: () => handleChange(spouse1, spouse2),
      })
      console.error(e)
    }
  }

  const showNameInRomanScriptPreference = usePreference('tree.showNamesInRomanScript')
  const { fullName: childName } = getNameRelatedData(child, showNameInRomanScriptPreference)

  return (
    <>
      {childWithMultipleFamilies && (
        <>
          <button
            data-testid="alt-parents-button"
            type="button"
            onClick={handleAltParents}
            title={t('tw.pedigree.alternate-parents', { parent: child ? childName : oldChildName })}
            {...props}
          >
            <PersonFamily color={darkMode ? 'white' : colors.blue60} size="xs" />
          </button>
          {(altParentOverlay.isOpen || altParentOverlay.transitioning) && (
            <AltParentsOverlay
              overlay={altParentOverlay}
              loading={loading}
              childName={child ? childName : oldChildName}
              altParentData={altParentData}
              handleChange={handleChange}
              person1Id={person1Id}
              person2Id={person2Id}
              showForm={!lls && showForm}
              lls={lls}
            />
          )}
        </>
      )}
    </>
  )
}

export default AlternateParents
