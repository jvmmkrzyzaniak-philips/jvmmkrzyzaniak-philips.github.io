import React, { Suspense, lazy } from 'react'
import { LayoutBand, Separator, colors, useInfoSheet, useTheme, usePageWidth } from '@fs/zion-ui'
import { FeedbackBanner, useGroupsContext, GedcomWarningAlert } from '@fs/zion-tree-groups'
import useGedcomUploadData from '../../hooks/shared/useGedcomUploadData'

const GedcomInfoSheet = lazy(() => import('../../default-components/controlled-edit-trees/GedcomInfoSheet'))

const GroupsBanner = () => {
  const gedcomErrorsInfoSheet = useInfoSheet()
  const { currentTreeId, isResearcherGroup, treeDetails } = useGroupsContext()
  const {
    data: researchTreeGedcomData,
    loading: loadingResearchTreeGedcomData,
    refetch,
  } = useGedcomUploadData(currentTreeId, isResearcherGroup, treeDetails)

  const showGedcomAlert =
    researchTreeGedcomData && researchTreeGedcomData.errorCount > 0 && !researchTreeGedcomData.errorReviewDone
  const givePriorityToGedcomAlert = showGedcomAlert || loadingResearchTreeGedcomData

  const theme = useTheme()
  const infoSheetSize = usePageWidth()({ default: 'sm', xl: 'md', xxl: 'lg' })

  return (
    <>
      {currentTreeId && currentTreeId !== 'PRIVATE' && (
        <LayoutBand color={theme === 'day' ? colors.gray05 : colors.gray30}>
          {!givePriorityToGedcomAlert && isResearcherGroup && <FeedbackBanner marginTop="nano" />}
          {showGedcomAlert && (
            <>
              <Separator size="nano" />
              <GedcomWarningAlert onClick={gedcomErrorsInfoSheet.handleClick} />
            </>
          )}
        </LayoutBand>
      )}
      {showGedcomAlert && (
        <Suspense fallback="">
          <GedcomInfoSheet
            fileName={researchTreeGedcomData.fileName}
            infoSheet={gedcomErrorsInfoSheet}
            size={infoSheetSize}
            onDoneReviewing={refetch}
          />
        </Suspense>
      )}
    </>
  )
}

export default GroupsBanner
