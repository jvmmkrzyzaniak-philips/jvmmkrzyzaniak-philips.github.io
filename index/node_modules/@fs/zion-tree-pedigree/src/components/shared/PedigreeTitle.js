import React from 'react'
import PropTypes from 'prop-types'
import { Title } from '@fs/zion-head'
import { usePreference } from '@fs/zion-preferences'
import { getNameInPreferredScript } from '@fs/zion-person-service'
import { useTranslation } from 'react-i18next'
import { pedigreeViewKeyMap } from '../../utils/translationKeyMaps'

export const getCouple = (person1, person2, pofId, showRomanScriptPreference = false) => {
  const { fullName: fullName1 } = getNameInPreferredScript(person1, showRomanScriptPreference)
  const { fullName: fullName2 } = getNameInPreferredScript(person2, showRomanScriptPreference)

  const person1Name = person1 && person1.id !== 'UNKNOWN' && person1.id !== 'loading' ? fullName1 : ''
  const person1Lifespan = person1?.lifespan ? ` (${person1?.lifespan})` : ''
  const person2Name = person2 && person2.id !== 'UNKNOWN' && person2.id !== 'loading' ? fullName2 : ''
  const person2Lifespan = person2?.lifespan ? ` (${person2?.lifespan})` : ''

  // Put person 2 first if they are the pof.
  if (person2?.id === pofId) {
    return [`${person2Name}${person2Lifespan}`, `${person1Name}${person1Lifespan}`].filter(Boolean)
  }
  return [`${person1Name}${person1Lifespan}`, `${person2Name}${person2Lifespan}`].filter(Boolean)
}

export default function PedigreeTitle({ pedigreeView, person1, person2, pofId }) {
  const { t } = useTranslation()
  const showNameInRomanScriptPreference = usePreference('tree.showNamesInRomanScript')

  const pofCoupleNamesAndLifeSpans = getCouple(person1, person2, pofId, showNameInRomanScriptPreference)

  if (!pofCoupleNamesAndLifeSpans.length) return null

  return (
    <Title breadcrumbs={[t('tw.pedigree.family-tree'), t(pedigreeViewKeyMap[pedigreeView])]}>
      {pofCoupleNamesAndLifeSpans.filter(Boolean).join(', ')}
    </Title>
  )
}

PedigreeTitle.propTypes = {
  /** The translation key for the pedigree view label */
  pedigreeView: PropTypes.oneOf(['landscape', 'portrait', 'sibling', 'fanchart', 'descendancy']).isRequired,
  /** The first person */
  person1: PropTypes.object,
  /** The second person */
  person2: PropTypes.object,
  /** Id of the pof */
  pofId: PropTypes.string,
}
