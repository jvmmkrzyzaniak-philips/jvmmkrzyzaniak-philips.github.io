import React from 'react'
import { Theme, colors } from '@fs/zion-ui'
import { css } from '@linaria/core'
import { usePedigreeViewOptions } from '../../pedigree-view-options/index'

/**
 * The pedigree view utilizes the space provided by its parent, as long as it is of a defined size (pedigree will not expand its parent container, due to the nature of ZoomPan).
 */
const wrapperCss = css`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  height: 100%;
  width: 100%;

  /* HACK: RTL: This overrides the base browser behavior to force the pedigree and its content to utilize a left-side origin like normal. Remove once the org, the pedigree, and subcomponents have been enhanced to fully handle right-to-left language and positioning changes. */
  direction: ltr;

  /* Temporary overrides until design can get these integrated into zion-ui theming */
  // This overrides the background
  & [data-testid='pedigree'][data-theme='night'] > div:nth-of-type(2) {
    background: ${colors.gray30};
  }
  // This overrides Zoom-Pan Control buttons
  & [data-testid='pedigree'][data-theme='night'] > div:first-of-type button {
    background: ${colors.gray03};
    &:hover {
      background: ${colors.gray10};
    }
  }
`
// This wrapper is shared amongst multiple pedigree views, to provide consistent theme overrides inside of zoompan
export default function PedigreeThemeWrapper({ children }) {
  // This wrapper exists for the sole purpose of providing some minimal styling for the internal Pedigree components and so that PedigreeViewOptionsProvider is initialized before we access the view options to determine the theme to use.
  const { prefsState } = usePedigreeViewOptions(true)

  const theme = prefsState?.prefs?.colorScheme === 'nightfall' ? 'night' : 'day'

  return (
    <Theme theme={theme} className={wrapperCss}>
      {children}
    </Theme>
  )
}
