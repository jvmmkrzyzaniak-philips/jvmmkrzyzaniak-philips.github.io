import React, { useRef } from 'react'
import { css } from '@linaria/core'
import {
  useOverlay,
  QuickGlanceOverlay,
  IconButton,
  List,
  Skeleton,
  RadioGroup,
  Radio,
  useStatusOverlay,
  colors,
  H5,
  Separator,
} from '@fs/zion-ui'
import { PersonSpouse } from '@fs/zion-icon'
import { useEvent, boolAttr } from '@fs/zion-frontend-friends'
import { PersonListItem, Person } from '@fs/zion-person'
import { useTranslation } from 'react-i18next'
import { useAutoFocus } from '@fs/zion-ui/quarks-authorized-use-only'
import { VisuallyHidden } from '@reach/visually-hidden'
import { useGenDetailsSheet } from '@fs/zion-gen-details'
import { useGroupsContext } from '@fs/zion-tree-groups'

import { getNameRelatedData } from '@fs/zion-person-service'
import { usePreference } from '@fs/zion-preferences'
import { useSpouses, setPreferredSpouse } from '../../service/shared/alt'

const altSpousesWrapperCss = css`
  &[dark-mode] button {
    svg {
      color: ${colors.gray100} !important;
    }
  }
  &[dark-mode] button:hover {
    background: ${colors.gray80} !important;
  }
`
const altSpousesCss = css`
  min-width: 200px;
`

const AltSpousesList = ({ spouses, loading, lls }) => {
  const { t } = useTranslation()

  const { setArk, infoSheet: genDetailsInfoSheet } = useGenDetailsSheet() || {}

  const handleLLSClick = useEvent(({ evt, id }) => {
    evt.preventDefault()
    setArk?.(id)
    !genDetailsInfoSheet.isOpen && genDetailsInfoSheet.open(evt)
  })
  const clickProps = (spouse) => {
    if (lls) {
      return { onClick: (evt) => handleLLSClick({ evt, id: spouse.id }) }
    }
    return { openPersonSheet: true }
  }

  return (
    <List>
      {loading ? (
        <>
          <VisuallyHidden aria-live="assertive">{t('tw.pedigree.alternate-spouses.loading')}</VisuallyHidden>
          {[0, 1, 2].map((id) => (
            <Skeleton.ListItem key={`loading-spouse-${id}`} hasAvatar hasSecondLine />
          ))}
        </>
      ) : (
        <>
          <VisuallyHidden aria-live="assertive">
            {t('tw.pedigree.alternate-spouses.count', { count: spouses?.length })}
          </VisuallyHidden>
          {spouses?.map(({ spouse }) => {
            return (
              <PersonListItem
                data-testid="ITSadWm_6kwTsQDJqfxK5"
                key={spouse?.id}
                personObj={spouse}
                {...clickProps(spouse)}
              />
            )
          })}
        </>
      )}
    </List>
  )
}

const AltSpousesForm = ({ spouses, handleChange, spouseName }) => {
  const { t } = useTranslation()
  return (
    <>
      <VisuallyHidden aria-live="assertive">
        {t('tw.pedigree.alternate-spouses.count', { count: spouses?.length })}{' '}
        {t('tw.pedigree.alternate-spouses.select', { name: spouseName })}
      </VisuallyHidden>
      <Separator size="nano" />
      <RadioGroup>
        {spouses?.map(({ spouse }, idx) => {
          const k = `${spouse?.id}${idx}`
          return (
            <React.Fragment key={k}>
              <Radio
                name="spouse"
                value={spouse?.id}
                checked={idx === 0}
                label={
                  <Person avatarSize="default" componentSize="sm" personObj={spouse} doNotLinkToPersonPage noBoldName />
                }
                onChange={() => handleChange(spouse?.id)}
                data-testid="preferred-parent-radio-btn"
              />
              <Separator size="xxs" />
            </React.Fragment>
          )
        })}
      </RadioGroup>
    </>
  )
}

const AltSpousesOverlay = ({ overlay, otherPerson, showForm, handleChange, loading, spouses, lls }) => {
  const { t } = useTranslation()
  const ref = useRef()
  // We use this because we show loading content after opening, we then want to focus after it's loaded.
  useAutoFocus({
    isOpen: !loading,
    enabled: true,
    containerRef: ref,
  })

  const showNameInRomanScriptPreference = usePreference('tree.showNamesInRomanScript')

  const { fullName: otherPersonName } = getNameRelatedData(otherPerson, showNameInRomanScriptPreference)

  const spousesHeadingTranslationKey = showForm
    ? `tw.pedigree.set-alt-spouse.heading`
    : `tw.pedigree.alt-spouses.heading`
  return (
    <QuickGlanceOverlay placement="bottom" {...overlay}>
      <div className={altSpousesCss} data-testid="alt-spouses-overlay" ref={ref}>
        <H5>{t(spousesHeadingTranslationKey, { name: otherPersonName })}</H5>
        {loading || !showForm ? (
          <AltSpousesList loading={loading} spouses={spouses} lls={lls} />
        ) : (
          <AltSpousesForm
            spouses={spouses}
            loading={loading}
            handleChange={handleChange}
            spouseName={otherPerson?.name}
          />
        )}
      </div>
    </QuickGlanceOverlay>
  )
}

export default function AlternateSpouses({
  editable,
  otherPerson,
  lls,
  readOnlyMode,
  onChange,
  darkMode,
  iconSize = 'md',
}) {
  const overlay = useOverlay()
  const showStatusOverlay = useStatusOverlay()
  const { t } = useTranslation()
  const { currentTreeId } = useGroupsContext()
  const [{ loading, data }, fetchSpouses] = useSpouses(otherPerson?.id, lls, currentTreeId)
  const handleClick = (evt) => {
    overlay.handleClick(evt)
    fetchSpouses()
  }
  const handleChange = async (spouseId) => {
    try {
      await setPreferredSpouse(otherPerson?.id, spouseId)
      onChange?.(spouseId)
      overlay.close()
      showStatusOverlay({
        message: t('tw.pedigree.preferred-spouse.success'),
        type: 'success',
        transient: true,
      })
    } catch (e) {
      showStatusOverlay({
        message: t('tw.pedigree.preferred-spouse.error'),
        type: 'error',
        transient: true,
        actionLabel: t('tw.pedigree.retry'),
        actionCallback: () => handleChange(spouseId),
      })
      console.error(e)
    }
  }
  const spouses = data?.data

  const showForm = !lls && !readOnlyMode && editable
  // TODO: Be sure to handle errors here

  return (
    <div className={altSpousesWrapperCss} dark-mode={boolAttr(darkMode)}>
      <IconButton
        data-testid={`alt-spouses-button-${otherPerson?.id}`}
        Icon={PersonSpouse}
        size={iconSize}
        onClick={handleClick}
        title={t('tw.pedigree.alternate-spouses', { spouse: otherPerson?.name })}
      />
      {(overlay.isOpen || overlay.transitioning) && (
        <AltSpousesOverlay
          overlay={overlay}
          otherPerson={otherPerson}
          showForm={showForm}
          handleChange={handleChange}
          loading={loading}
          spouses={spouses}
          lls={lls}
        />
      )}
    </div>
  )
}
