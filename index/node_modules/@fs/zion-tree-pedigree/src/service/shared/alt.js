import axios, { useZionAxios } from '@fs/zion-axios'
import { formatCoupleId } from '../../utils/shared'

const mapChildrenData = (rawData) => {
  const data = { data: [] }
  rawData?.forEach((rawValue) => {
    const child = { ...rawValue?.child }
    data.data.push(child)
  })
  return data
}
const useChildren = (coupleId, lls, currentTreeId) => {
  if (!coupleId) throw new Error('No coupleId passed to useChildren')
  const treeIdQuery = currentTreeId ? `&treeId=${currentTreeId}` : ''
  const url = lls
    ? `/service/gen/sforge/pedigree/v2/couple/${formatCoupleId(coupleId)}/children`
    : `/service/tree/tree-data/r9/family-members/couple/${formatCoupleId(
        coupleId
      )}/children?includePhotos=true${treeIdQuery}`

  const [{ loading, data: rawData }, getChildren] = useZionAxios(url, { manual: true })
  const data = !lls && !loading && rawData ? mapChildrenData(rawData) : rawData
  return [{ loading, data }, getChildren]
}
const useSpouses = (personId, lls, currentTreeId) => {
  const treeIdQuery = currentTreeId ? `&treeId=${currentTreeId}` : ''
  const url = lls
    ? `/service/gen/sforge/portrait-pedigree/person/${personId}/spouses?flagMultipleSpousesOfSpouses=true`
    : `/service/tree/tree-data/portrait-pedigree/person/${personId}/spouses?flagMultipleSpousesOfSpouses=true${treeIdQuery}`
  return useZionAxios(url, { manual: true })
}
const useAltParents = (id, lls, currentTreeId) => {
  const treeIdQuery = currentTreeId ? `?treeId=${currentTreeId}` : ''
  const url = lls
    ? `/service/gen/sforge/pedigree/v2/parents/${id}`
    : `/service/tree/tree-data/pedigree/v2/parents/${id}${treeIdQuery}`
  return useZionAxios(url, { manual: true })
}

const setPreferredParents = ({ spouse1: s1, spouse2: s2 }, childId) => {
  if (!childId) throw Error('No Child id passed to Couple component')
  const parents = [s1, s2].map(({ id, gender }) => id !== 'UNKNOWN' && { id, gender }).filter(Boolean)
  const url = `/service/tree/tree-data/pedigree/person/${childId}/parents`
  return axios.post(url, { parents })
}

const setPreferredSpouse = (personId, spouseId) => {
  if (!personId) throw Error('No person id passed to Couple component')
  const url = `/service/tree/tree-data/person/${personId}/preferredSpouse/${spouseId}`
  return axios.post(url)
}

export { useChildren, useAltParents, useSpouses, setPreferredParents, setPreferredSpouse }
