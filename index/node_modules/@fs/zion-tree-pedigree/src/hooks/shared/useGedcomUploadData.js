import { useZionAxios } from '@fs/zion-axios'

const transformResponse = (res) => {
  const {
    fileName,
    personFailedCount,
    personFactFailedCount,
    coupleRelationshipFailedCount,
    coupleFactFailedCount,
    parentChildRelationshipFailedCount,
    parentChildFactFailedCount,
    sourceFailedCount,
    sourceAttachFailedCount,
    sourceTagFailedCount,
    noteFailedCount,
    associationRelationshipFailedCount,
    errorReviewDone,
  } = JSON.parse(res)
  const errorCount =
    personFailedCount +
    personFactFailedCount +
    coupleRelationshipFailedCount +
    coupleFactFailedCount +
    parentChildRelationshipFailedCount +
    parentChildFactFailedCount +
    sourceFailedCount +
    sourceAttachFailedCount +
    sourceTagFailedCount +
    noteFailedCount +
    associationRelationshipFailedCount

  return { fileName, errorCount, errorReviewDone }
}

/**
 * Hook to get Gedcom tree upload data for a gedcom file.
 * @param {String} treeId - tree ID
 * @param {Boolean} isResearcherGroup - true if the tree is a researcher group
 * @param {Object} treeDetails - tree details
 * @returns {Object} collection data
 */
export default function useGedcomUploadData(treeId, isResearcherGroup, treeDetails) {
  const shouldFetch = treeId && isResearcherGroup && treeDetails && !treeDetails.hidden
  const gedcomDataUrl = shouldFetch ? `/service/tree/gedcom/upload/results/errors?treeId=${treeId}` : null
  const [{ data, loading }, refetch] = useZionAxios({
    url: gedcomDataUrl,
    transformResponse,
  })

  return { data, loading, refetch }
}
