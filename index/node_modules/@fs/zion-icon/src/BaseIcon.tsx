import type { ReactNode } from 'react'
import React from 'react'
import type { InferProps } from 'prop-types'
import PropTypes from 'prop-types'
import { css, cx } from '@linaria/core'
import { boolAttr, sanitizeProps } from '@fs/zion-frontend-friends'

type Size = 'xs' | 'sm' | 'md' | 'lg'
type Direction = 'up' | 'down' | 'forward' | 'backward'
type Reflect = 'vertical' | 'horizontal'

const sizes = {
  xs: 18,
  sm: 24,
  md: 36,
  lg: 48,
}

const propTypes = {
  /** Fill color of icon */
  color: PropTypes.string,

  /** Background color. Gives the Icon a circle background in the color provided. If no background is provided, it defaults to transparent with no circle. */
  background: PropTypes.string,

  /** Size of icon */
  size: PropTypes.oneOf<Size>(['xs', 'sm', 'md', 'lg']),

  /** What aria-role you'd like to give this icon */
  role: PropTypes.string,

  /** This prop is ignored by common icons, but allowed for interoperability between icons */
  direction: PropTypes.oneOf<Direction>(['up', 'down', 'forward', 'backward']),

  /** Reflection of icon; this prop is ignored by common icons, but allowed for interoperability between icons; it is only used by ReflectableIcon */
  reflect: PropTypes.oneOf<Reflect>(['horizontal', 'vertical']),

  /** Whether the icon is in its toggled-state; this prop is ignored by common icons, but allowed for interoperability between icons; it is only used by ToggleIcon */
  toggle: PropTypes.bool,

  /**
   * Whether you need your icon to align horizontally with keylines.
   * This cuts a little space off the sides, so that the icon itself will hug the edges of your layout.
   */
  dense: PropTypes.bool,

  /**
   * If your Icon is being used inside of a text node, the Icon will sometimes not align well with
   * the text. In most cases, you do not need this prop, because the Typographic elements in ZIon UI
   * are already tuned to accept Icons and have them align well. But in some cases, you may need it.
   * For example, if you put an Icon inside a table cell with some other text, you will need to set
   * this property.
   */
  alignWithText: PropTypes.bool,

  /** What screen-readers should call this icon */
  'aria-label': PropTypes.string,

  className: PropTypes.string,
}

type BaseIconProps = InferProps<typeof propTypes> & JSX.IntrinsicAttributes & { children: ReactNode }

const spinningCss = css`
  animation: rotate-spinner 1s linear infinite;
  @keyframes rotate-spinner {
    to {
      transform: rotate(360deg);
    }
  }
  // Users need to be able to tell when something is loading
  // This rule allows icons to spin even if OS settings for reduced motion are set so users can tell content is being
  // loaded/uploaded.
  @media (prefers-reduced-motion: reduce) {
    animation-iteration-count: infinite !important;
    animation-duration: 1s !important;
  }
`

const directionCss = css`
  transition: transform 0.3s;
  &[icon-direction='forward'] {
    transform: rotate(0deg);
  }
  &[icon-direction='up'] {
    transform: rotate(-90deg);
  }
  &[icon-direction='backward'] {
    transform: rotate(180deg);
  }
  &[icon-direction='down'] {
    transform: rotate(90deg);
  }
  [dir='rtl'] &[icon-direction='up'] {
    transform: rotate(90deg);
  }
  [dir='rtl'] &[icon-direction='down'] {
    transform: rotate(-90deg);
  }
`

const reflectCss = css`
  transition: transform 0.3s;
  &[icon-reflect='horizontal'] {
    transform: scaleX(-1);
  }
  &[icon-reflect='vertical'] {
    transform: scaleY(-1);
  }
`

const shapeCss = css`
  display: inline-block;
  overflow: hidden;
  flex-shrink: 0;
  vertical-align: middle;
  &[icon-size='xs'] {
    --icon-circle-size: 28px;
  }
  &[icon-size='sm'] {
    --icon-circle-size: 40px;
  }
  &[icon-size='md'] {
    --icon-circle-size: 64px;
  }
  &[icon-size='lg'] {
    --icon-circle-size: 88px;
  }

  /* This is to fix https://fhjira.churchofjesuschrist.org/browse/ZIONUI-558
  * without causing weird things to happen to other components.
  */
  margin-top: calc(var(--icon-inline-text, 0) * var(--icon-circle-size));

  &[data-dense] {
    margin-inline-start: calc(var(--icon-circle-size) * -0.1);
    margin-inline-end: calc(var(--icon-circle-size) * -0.1);
  }

  &[with-background] {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 500px;
    width: var(--icon-circle-size);
    height: var(--icon-circle-size);
  }

  &[align-with-text] {
    --icon-inline-text: -0.2;
  }
`

const svgCss = css`
  display: block;
`

export const BaseIcon = ({
  role,
  'aria-label': label,
  size = 'sm',
  color = 'currentColor',
  className,
  children,
  background = 'transparent',
  dense = false,
  alignWithText = false,

  /** [IGNORED]: For interoperability between icons */
  direction, // eslint-disable-line -- ignored
  reflect, // eslint-disable-line -- ignored
  toggle, // eslint-disable-line -- ignored

  ...props
}: BaseIconProps): JSX.Element => (
  <span
    className={shapeCss}
    style={{ background }}
    icon-size={size}
    with-background={boolAttr(background !== 'transparent')}
    align-with-text={boolAttr(alignWithText)}
    data-dense={boolAttr(dense)}
  >
    <svg
      style={{ color }}
      // Here we dynamically assign the role based on if there is a label provided.
      // This makes "presentation" the default role, since most of the time
      // an icon really only provides visual accompaniment to some text that is
      // colocated with the Icon. Lone Icons are rare, so we allow the consumer
      // to specify an label to cover that case. IconButton already requires a label.
      role={role || (label ? 'img' : 'presentation')}
      aria-label={label}
      viewBox="0 0 24 24"
      width={sizes[size]}
      height={sizes[size]}
      fill="currentColor"
      className={cx(className, svgCss)}
      {...sanitizeProps(props)}
    >
      {children}
    </svg>
  </span>
)

BaseIcon.propTypes = propTypes

export const SpinningIcon = ({ children, ...props }: BaseIconProps): JSX.Element => (
  <BaseIcon className={spinningCss} {...props}>
    {children}
  </BaseIcon>
)

SpinningIcon.propTypes = propTypes

export const DirectionalIcon = ({ direction = 'forward', children, ...props }: BaseIconProps): JSX.Element => (
  <BaseIcon className={directionCss} icon-direction={direction} {...props}>
    {children}
  </BaseIcon>
)

DirectionalIcon.propTypes = propTypes

export const ReflectableIcon = ({ reflect, children, ...props }: BaseIconProps): JSX.Element => (
  <BaseIcon className={reflectCss} icon-reflect={reflect} {...props}>
    {children}
  </BaseIcon>
)

ReflectableIcon.propTypes = propTypes

export const ToggleIcon = ({ toggle = false, children, ...props }: BaseIconProps): JSX.Element => (
  <BaseIcon icon-toggle={boolAttr(toggle)} {...props}>
    {children}
  </BaseIcon>
)

ToggleIcon.propTypes = propTypes

export const ToggleDirectionalIcon = ({
  direction = 'forward',
  toggle = false,
  children,
  ...props
}: BaseIconProps): JSX.Element => (
  <BaseIcon className={directionCss} icon-toggle={boolAttr(toggle)} icon-direction={direction} {...props}>
    {children}
  </BaseIcon>
)

ToggleDirectionalIcon.propTypes = propTypes
