import axios from '@fs/zion-axios'
import { appName } from '@fs/zion-config'
import { getFeatureFlag, flagsAreReady } from '@fs/zion-flags'
import { fetchContactGQL } from './orchestration'

let cachedContactPromises = {}
const contactDataUrlWithCisId = (cisId) => `/service/tree/ftuser/contacts/${cisId}`
const contactDataUrlWithCpUserId = (cpUserId) => `/service/tree/ftuser/contacts/?contributorId=${cpUserId}`
const missingIdErrorMessage = new Error(`Missing id in fetchContact. Either a cisId or cpUserId is expected`)

async function returnContact({ contactPromise, cisId, cpUserId }) {
  cachedContactPromises[cisId || cpUserId] = contactPromise
  try {
    const contact = (await contactPromise).data
    contactPromise[contact.cpUserId] = contact
    contactPromise[contact.id] = contact
    return contact
  } catch (error) {
    cachedContactPromises[cisId || cpUserId] = null
    throw error
  }
}

export async function fetchContactByCisId(cisId) {
  if (!cisId) throw missingIdErrorMessage
  await flagsAreReady()
  const orchestrateZionUser = getFeatureFlag('frontier_orchestration_zionUser', { appName })

  return returnContact({
    contactPromise:
      cachedContactPromises[cisId] ||
      (orchestrateZionUser.isOn ? fetchContactGQL(cisId) : axios.get(contactDataUrlWithCisId(cisId))),
    cisId,
  })
}
export async function fetchContactByCpUserId(cpUserId) {
  if (!cpUserId) throw missingIdErrorMessage
  await flagsAreReady()
  const orchestrateZionUser = getFeatureFlag('frontier_orchestration_zionUser', { appName })

  return returnContact({
    contactPromise:
      cachedContactPromises[cpUserId] ||
      (orchestrateZionUser.isOn ? fetchContactGQL(cpUserId) : axios.get(contactDataUrlWithCpUserId(cpUserId))),
    cpUserId,
  })
}

export async function fetchContact({ cisId, cpUserId }) {
  if (cisId) {
    return fetchContactByCisId(cisId)
  }
  if (cpUserId) {
    return fetchContactByCpUserId(cpUserId)
  }
  throw missingIdErrorMessage
}

export function clearCacheForTest() {
  cachedContactPromises = {}
}
