import { getCorrelationId } from '@fs/zion-session'
import zionDebug from '@fs/zion-debug'
import normalize from './normalize'

const debug = zionDebug('zion:user:cache')
const hasLocalStorage = typeof localStorage !== 'undefined' && localStorage !== null
const fiveMinutes = 1000 * 60 * 5

const memoryCache = {}

export function getCachedUser() {
  if (!getCorrelationId()) return null

  let cachedUser
  try {
    cachedUser = memoryCache[getCacheKey()]
    cachedUser = cachedUser || (hasLocalStorage && JSON.parse(localStorage[getCacheKey()]))
    if (isExpired(cachedUser.timestamp)) {
      cachedUser = null
      hasLocalStorage && localStorage.removeItem(getCacheKey())
      delete memoryCache[getCacheKey()]
    }
  } catch (err) {
    cachedUser = null
  }
  return cachedUser
}

export function setCachedUser(user) {
  const cachedUser = normalize(user)
  cachedUser.timestamp = new Date().getTime()
  try {
    hasLocalStorage && localStorage.setItem(getCacheKey(), JSON.stringify(cachedUser))
  } catch (err) {
    // swallow quota exceeded error
    debug(err)
  }
  memoryCache[getCacheKey()] = cachedUser
}

export function clearCachedUser() {
  hasLocalStorage && localStorage.removeItem(getCacheKey())
  delete memoryCache[getCacheKey()]
}

export function clearAllCachedUsers() {
  Object.keys(memoryCache).forEach((key) => {
    hasLocalStorage && localStorage.removeItem(key)
    delete memoryCache[key]
  })
}

function isExpired(timestamp) {
  return new Date().getTime() > timestamp + fiveMinutes
}

function getCacheKey() {
  return `${getCorrelationId()}-v2-user`
}

export function clearOtherUsers() {
  if (!hasLocalStorage) {
    return
  }
  const keys = Object.keys(localStorage)
  keys.filter((key) => key.endsWith('-user') && key !== getCacheKey()).forEach((key) => localStorage.removeItem(key))
}

clearOtherUsers()
