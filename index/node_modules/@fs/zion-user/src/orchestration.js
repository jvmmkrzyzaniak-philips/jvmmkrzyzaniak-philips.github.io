import apolloClient from './apolloClient'

import { currentUserQuery, helpeeUserQuery, effectiveUserQuery, contactQuery } from './orchestrationQueries'

export async function fetchContactGQL(id) {
  const res = await apolloClient.query({ query: contactQuery, variables: { id } })
  return { data: { ...(res?.data?.contact || {}), gqlEndpoint: true } }
}

export async function fetchUserGQL() {
  const res = await apolloClient.query({ query: currentUserQuery })
  return normalizeGqlUser(res.data.currentUser)
}

export async function fetchHelpeeGQL() {
  const res = await apolloClient.query({ query: helpeeUserQuery })
  return normalizeGqlHelpee(res.data.currentUser)
}

export async function fetchEffectiveUserGQL() {
  const res = await apolloClient.query({ query: effectiveUserQuery })

  const proxyUser = res.data?.currentUser?.proxyUser
  if (proxyUser) {
    return normalizeGqlHelpee(res.data?.currentUser)
  }

  return normalizeGqlUser(res.data?.currentUser)
}

function normalizeGqlUser(user) {
  return {
    cisId: user.id,
    displayName: user.profile.displayName,
    contactName: user.profile.contactName,
    personId: user.profile.personId,
    gender: user.profile.gender,
    helperPin: user.profile.helperPin,
    birthDate: user.profile.birthDate,
    country: user.profile.country,
    cpUserId: user.profile.cpUserId,
    email: user.profile.email,
    gqlEndpoint: true,
  }
}

function normalizeGqlHelpee({ proxyUser }) {
  if (!proxyUser) {
    return {}
  }
  const { id: cisId, contactName, cpUserId, personId } = proxyUser
  return {
    cisId,
    contactName,
    cpUserId,
    personId,
    gqlEndpoint: true,
  }
}
