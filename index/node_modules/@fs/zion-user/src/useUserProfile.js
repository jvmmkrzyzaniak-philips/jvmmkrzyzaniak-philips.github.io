import { useEffect, useReducer } from 'react'
import { fetchUserProfile, fetchLocationDisplayName, updateProfile, setUserOptInStatus } from './fetchUserProfile'

function profileReducer(state, action) {
  switch (action.type) {
    case 'none':
      return { userProfileLoading: false }
    case 'loading':
      return { cisId: action.cisId, userProfileLoading: true }
    case 'done':
      return { ...state, userProfile: action.userProfile, userProfileLoading: false }
    case 'error':
      return { ...state, userProfileLoading: false, error: action.error }
    default:
      return state
  }
}

async function getLocationData(profile) {
  const countryId = profile.location?.country?.stdRepId
  const stateOrProvinceId = profile.location?.stateOrProvince?.stdRepId
  const countryNamePromise = countryId && fetchLocationDisplayName(countryId)
  const stateOrProvinceNamePromise = stateOrProvinceId && fetchLocationDisplayName(stateOrProvinceId)
  const names = await Promise.all([countryNamePromise, stateOrProvinceNamePromise])
  const countryName = names[0]
  const stateOrProvinceName = names[1]
  if (countryName) {
    profile.location.country.name = countryName
  }
  if (stateOrProvinceName) {
    profile.location.stateOrProvince.name = stateOrProvinceName
  }
  return profile
}

export default function useUserProfile(cisId) {
  const [userProfileState, dispatch] = useReducer(profileReducer, {
    userProfileLoading: false,
  })
  useEffect(() => {
    const { cisId: profileCisId, userProfile, userProfileLoading, error } = userProfileState
    const isNewCisId = cisId !== profileCisId
    const doesNotHaveProfileOrError = !userProfile && !error
    async function getProfile() {
      dispatch({ type: 'loading', cisId })
      try {
        const profileData = await fetchUserProfile(cisId)
        const profile = await getLocationData(profileData)
        dispatch({ type: 'done', userProfile: profile })
      } catch (userProfileError) {
        dispatch({ type: 'error', error: userProfileError })
      }
    }

    if (!userProfileLoading && (isNewCisId || doesNotHaveProfileOrError)) {
      getProfile()
    }
  }, [cisId, userProfileState])

  userProfileState.updateProfile = async (newValues) => {
    try {
      const response = await updateProfile(newValues)
      const profile = await getLocationData(response.data)
      dispatch({ type: 'done', userProfile: profile })
      return profile
    } catch (userProfileError) {
      dispatch({ type: 'error', error: userProfileError })
      return userProfileError
    }
  }
  userProfileState.setOptInStatus = async (optIn) => {
    try {
      const response = await setUserOptInStatus(optIn)
      const profile = await getLocationData(response.data)
      dispatch({ type: 'done', userProfile: profile })
      return profile
    } catch (userProfileError) {
      dispatch({ type: 'error', error: userProfileError })
      return userProfileError
    }
  }

  return userProfileState
}
