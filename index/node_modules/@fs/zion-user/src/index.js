import { useReducer, useEffect } from 'react'
import { getFeatureFlag, flagsAreReady } from '@fs/zion-flags'
import { appName } from '@fs/zion-config'
import fetchUser from './fetch'
import { fetchUserGQL, fetchHelpeeGQL, fetchEffectiveUserGQL } from './orchestration'

const reducer = (state, action) => {
  switch (action.type) {
    case 'USER':
      return { ...state, ...action.user, signedIn: true, userLoading: false }
    case 'ERROR':
      return { ...state, signedIn: false, userLoading: false }
    default:
      throw new Error(`no handler for ${action.type}`)
  }
}

export function useUser(method = getUser) {
  const [state, dispatch] = useReducer(reducer, {
    signedIn: false,
    userLoading: true,
  })

  useEffect(() => {
    let isCurrent = true
    method()
      .then((user) => {
        if (isCurrent) {
          dispatch({ type: 'USER', user })
        }
      })
      .catch(() => {
        if (isCurrent) {
          dispatch({ type: 'ERROR' })
        }
      })

    return () => {
      isCurrent = false
    }
  }, [method])

  return state
}

export function useHelpee() {
  return useUser(getHelpee)
}

export function useEffectiveUser() {
  return useUser(getEffectiveUser)
}

export function useIsHelping() {
  return Boolean(useHelpee().cisId)
}

export async function getUser() {
  await flagsAreReady()
  const orchestrateZionUser = getFeatureFlag('frontier_orchestration_zionUser', { appName })
  if (orchestrateZionUser?.isOn) {
    return fetchUserGQL()
  }
  return (await fetchUser()).user
}

export async function getHelpee() {
  await flagsAreReady()
  const orchestrateZionUser = getFeatureFlag('frontier_orchestration_zionUser', { appName })
  if (orchestrateZionUser?.isOn) {
    return fetchHelpeeGQL()
  }
  return (await fetchUser()).helpee
}

export async function getEffectiveUser() {
  await flagsAreReady()
  const orchestrateZionUser = getFeatureFlag('frontier_orchestration_zionUser', { appName })
  if (orchestrateZionUser?.isOn) {
    return fetchEffectiveUserGQL()
  }

  const normalizedUser = await fetchUser()
  return normalizedUser.helpee || normalizedUser.user
}

export { clearCachedUser, clearAllCachedUsers } from './cache'
export { fetchContactByCisId, fetchContactByCpUserId, fetchContact } from './fetchContact'
export { default as fetchUser } from './fetch'
export { default as useContact } from './useContact'
export { default as useUserProfile } from './useUserProfile'
