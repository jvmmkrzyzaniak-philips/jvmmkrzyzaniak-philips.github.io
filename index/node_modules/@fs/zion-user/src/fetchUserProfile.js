import axios from '@fs/zion-axios'
import { validUserSessionOrError } from '@fs/zion-session'
import { getUser } from './index'

const axiosInstance = axios.create()

// TODO: use Zion cache instead of memory cache
//  To avoid issues it will be necessary to create a separate cache for directory and user Profile entries.
//  It will also be important to include the Accept media type header to distinguish between API versions.
const userProfileMemoryCache = {}
const userProfileLocationMemoryCache = {}

export async function fetchLocationDisplayName(stdRepId) {
  const locationNamePromise =
    userProfileLocationMemoryCache[stdRepId] || axiosInstance.get(`/service/standards/place/ws/places/reps/${stdRepId}`)
  userProfileLocationMemoryCache[stdRepId] = locationNamePromise
  const { data } = await locationNamePromise
  return data?.rep?.display?.name
}

async function isCurrentUser(cisId) {
  if (!cisId || cisId === 'CURRENT') {
    return true
  }
  const currentUser = await getUser()
  return currentUser?.cisId === cisId
}

export async function fetchUserProfile(cisId) {
  validUserSessionOrError()

  const id = cisId || 'CURRENT'

  // The user profile service returns private information and can only be used for the CURRENT user.
  // We must use the user profile directory service to retrieve other user's public information.
  const url = (await isCurrentUser(cisId))
    ? `/service/user/profile/users/${id}`
    : `/service/user/profile/directory/users/${id}`
  const userProfilePromise =
    userProfileMemoryCache[id] ||
    axiosInstance.get(url, { headers: { Accept: 'application/familysearch-user-profile+v1.1+json' } })

  userProfileMemoryCache[id] = userProfilePromise
  const { data } = await userProfilePromise
  return data
}

export async function updateProfile(payloadData, cisId) {
  validUserSessionOrError()
  const id = cisId || 'CURRENT'
  const url = `/service/user/profile/users/${id}`
  userProfileMemoryCache[id] = null
  return axios.post(url, payloadData)
}

export async function setUserOptInStatus(optIn, cisId) {
  validUserSessionOrError()
  let searchableStatus = 'LISTED'
  if (!optIn) {
    searchableStatus = 'UNLISTED'
  }
  const payloadData = { searchable: { status: searchableStatus } }
  return updateProfile(payloadData, cisId)
}
