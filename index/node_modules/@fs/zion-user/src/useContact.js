import { useState, useCallback } from 'react'
import { getSessionId } from '@fs/zion-session'
import { fetchContactByCisId, fetchContactByCpUserId } from './fetchContact'

function useFetchContactById({ fetchContactById, onDataReturn }) {
  const fetchById = useCallback(
    (id) => {
      async function fetchContact() {
        let newData
        try {
          newData = await fetchContactById(id)
        } catch (error) {
          newData = { error }
        }
        onDataReturn(newData)
      }
      if (!getSessionId()) {
        onDataReturn({ error: 'MissingSessionId: User not logged in' })
      } else {
        fetchContact()
      }
    },
    [fetchContactById, onDataReturn]
  )
  return fetchById
}

function useFetchContactByIdWithLoadingIndication({ fetchContactById, setContact }) {
  const onDataReturn = useCallback(
    (newData) => {
      setContact({ ...newData, contactLoading: false })
    },
    [setContact]
  )
  const fetchById = useFetchContactById({ fetchContactById, onDataReturn })
  const startFetchingContactById = useCallback(
    (id) => {
      if (id) {
        setContact((oldContact) => {
          const isSameContact = oldContact.id === id || oldContact.cpUserId === id
          if (isSameContact) {
            return oldContact
          }
          return { contactLoading: true }
        })
        fetchById(id)
      }
    },
    [fetchById, setContact]
  )
  return startFetchingContactById
}

export default function useContact() {
  const [contact, setContact] = useState({ contactLoading: false })
  const getContactByCisId = useFetchContactByIdWithLoadingIndication({
    fetchContactById: fetchContactByCisId,
    setContact,
  })
  const getContactByCpUserId = useFetchContactByIdWithLoadingIndication({
    fetchContactById: fetchContactByCpUserId,
    setContact,
  })
  const getContactById = useCallback(
    ({ cisId, cpUserId }) => {
      if (cisId) {
        getContactByCisId(cisId)
      } else if (cpUserId) {
        getContactByCpUserId(cpUserId)
      }
    },
    [getContactByCisId, getContactByCpUserId]
  )

  return { contact, getContactById, getContactByCisId, getContactByCpUserId }
}
