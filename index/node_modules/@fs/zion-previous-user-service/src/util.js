import Cache from '@fs/zion-cache'
import axios from '@fs/zion-axios'
/* eslint-disable no-bitwise */

const userSegmentCache = new Cache({ dbName: 'segment', storeName: 'users', type: 'local', lifetime: 'day' })

/**
 * A number, built from the unidirectional hash of the user's cisId
 * @typedef {(number|string)} Hash
 */

/**
 * Hash a string to a number which cannot be reversed back to the original string
 * This is a common hash code function similar to the one from Java
 * See https://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
 * @param {string} str
 * @returns {Hash}
 */
export function unidirectionalHash(str) {
  let hash = 0
  if (str.length === 0) return hash
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i)
    hash = (hash << 5) - hash + char
    hash &= hash
  }
  return `${hash}` // convert to string for the Cache service (because it does not like numbers for keys)
}

/**
 * Get the user record from the PB endpoint
 * @async
 * @param {string} cisId - user's CIS ID
 * @returns {UserRecord} - raw user record
 */
export const getUserSegment = async (cisId) => {
  if (cisId) {
    const key = `${cisId}-pb-user-segment`
    let stats = await userSegmentCache.getItemData(key)
    if (!stats) {
      stats = await axios.get(`/service/home/pb/users/${cisId}/segment`).then(({ data }) => data)
      userSegmentCache.setItemData(key, stats)
    }
    return stats
  }
  return null
}
