import React, { createContext, useContext, useEffect, useState, useMemo } from 'react'
import { useUser } from '@fs/zion-user'
import { getProbableUser, setProbableUserData } from './PreviousUserService'
import { getUserSegment } from './util'

const PreviousUserContext = createContext({})

/**
 * Generic state management for async hooks
 * @param {Function} fetcher
 * @param  {...any} args
 * @returns {any} data
 */
const useFetchHandler = (fetcher, ...args) => {
  const [data, setData] = useState()
  useEffect(() => {
    let canceled = false
    fetcher(...args).then((d) => !canceled && setData(d))
    return () => {
      canceled = true
    }
    // we don't know what the args will be but this is correct
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [fetcher, ...args])
  return data
}

/**
 * Prune out data that could be tied back to the user before we record it
 * @param {UserRecord} userRecord - from the cache
 * @returns {UserRecord} - pruned user record
 */
function pulloutNonPersonallyIdentifiableStats({ contributions, lastActivity, newUser, treeLevel, userLevel }) {
  // DO NOT INCLUDE membership info (temple reservation activity is ok).
  // If you find a case where you need to, please review with the security council before doing so.
  return { contributions, lastActivity, newUser, treeLevel, userLevel }
}

/**
 * Render the scope of the PreviousUserContext and manage it's values with the logged in user data
 * @param {Object} props - react props
 * @param {Object} props.children - children to render un the PreviousUserContext
 * @returns
 */
export function PreviousUserProvider({ children }) {
  const user = useUser()
  const userStats = useFetchHandler(getUserSegment, user?.cisId)
  const probableUser = useFetchHandler(getProbableUser, user?.cisId)
  const value = useMemo(
    () => ({
      ...user,
      probableUser,
    }),
    [user, probableUser]
  )

  useEffect(() => {
    if (userStats && user?.cisId) {
      setProbableUserData(user.cisId, pulloutNonPersonallyIdentifiableStats(userStats))
    }
  }, [userStats, user?.cisId])

  return <PreviousUserContext.Provider value={value}>{children}</PreviousUserContext.Provider>
}

/**
 * Use the PreviousUserContext in a hook
 * @returns {ReactContext}
 */
export function usePreviousUser() {
  return useContext(PreviousUserContext)
}
