import React, { forwardRef } from 'react'
import PropTypes from 'prop-types'
import { ValidEventTypes, EventTypeEnum, getDateEventByType } from '../standard-suggest/eventTypes'
import { defaultYearRangeEstimate } from './defaultYearRange'
import StandardSuggestNEXT from '../standard-suggest/StandardSuggestNEXT'
import fetchDateSuggestions from './fetchDateSuggestions'

export function getDateSuggestions(searchTerm, config = {}) {
  const { yearRangeEstimate = defaultYearRangeEstimate } = config
  return fetchDateSuggestions(searchTerm, yearRangeEstimate)
}

/**
 * DateSuggestNEXT
 *
 * A component for suggesting and selecting dates, leveraging StandardSuggestNEXT for core functionality.
 * Handles date-specific suggestion fetching with optional year range filtering.
 */
const DateSuggestNEXT = forwardRef(function DateSuggest(
  {
    label,
    eventType = EventTypeEnum.NONE,
    yearRangeEstimate = defaultYearRangeEstimate,
    config,
    getSuggestions,
    ...props
  },
  ref
) {
  const inputLabel = label || getDateEventByType(eventType)?.label

  // Use custom getSuggestions if provided, otherwise use the default implementation
  const suggestionsHandler = getSuggestions || ((searchTerm) => getDateSuggestions(searchTerm, { yearRangeEstimate }))

  return (
    <StandardSuggestNEXT
      label={inputLabel}
      type="date"
      config={config}
      getSuggestions={suggestionsHandler}
      {...props}
      ref={ref}
    />
  )
})

export default DateSuggestNEXT
export const meta = {
  name: 'DateSuggestNEXT',
  isZionFormComponent: true,
}

DateSuggestNEXT.meta = meta

// Shape of the standardized date object from the API
const dateStandardShape = PropTypes.shape({
  standardizedText: PropTypes.string,
  originalText: PropTypes.string,
  earliestAstro: PropTypes.number,
  latestAstro: PropTypes.number,
  yearRange: PropTypes.string,
  formalText: PropTypes.string.isRequired,
})

// Shape of the config object from useStandardSuggestNEXT
const configShape = PropTypes.shape({
  userInput: PropTypes.string.isRequired,
  fieldValue: PropTypes.string.isRequired,
  selectedItem: PropTypes.shape({
    primaryText: PropTypes.string.isRequired,
    isStandard: PropTypes.bool,
    standard: dateStandardShape,
  }),
  standardSuggestSuggestion: PropTypes.shape({
    originalText: PropTypes.string,
    standard: dateStandardShape,
  }),
  set: PropTypes.func.isRequired,
  standardize: PropTypes.bool.isRequired,
})

DateSuggestNEXT.propTypes = {
  /** The label associated with the Autosuggest input TextField */
  label: PropTypes.string,
  /** The event type influencing suggestion context (e.g., 'birth', 'death') */
  eventType: PropTypes.oneOf(ValidEventTypes),
  /** Configuration object from useStandardSuggestNEXT, controlling state and behavior */
  config: configShape.isRequired,
  /** Range of years to consider for date suggestions */
  yearRangeEstimate: PropTypes.shape({
    startYear: PropTypes.number,
    endYear: PropTypes.number,
  }),
  /** Custom function to get date suggestions, overrides default behavior */
  getSuggestions: PropTypes.func,
  /** Ref forwarded to the underlying input element */
  ref: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({ current: PropTypes.any })]),
}

export { DateSuggestNEXT }
