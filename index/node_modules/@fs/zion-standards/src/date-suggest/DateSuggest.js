import React, { forwardRef } from 'react'
import PropTypes from 'prop-types'
import { useTranslation } from 'react-i18next'
import StandardSuggestCore from '../standard-suggest/StandardSuggestCore'
import StandardSuggest from '../standard-suggest/StandardSuggest'
import { ValidEventTypes, EventTypeEnum } from '../standard-suggest/eventTypes'
import { defaultYearRangeEstimate } from './defaultYearRange'

const DateSuggest = forwardRef(function DateSuggest(
  {
    label: inputLabel,
    onSuggestionSelected,
    standardize,
    eventType = EventTypeEnum.NONE,
    yearRangeEstimate = defaultYearRangeEstimate,
    ...props
  },
  ref
) {
  const { t } = useTranslation()
  const label = [true, false, null].includes(inputLabel)
    ? inputLabel
    : inputLabel || t('date-suggest.date.label', 'Date')
  return standardize ? (
    <StandardSuggest
      onSuggestionSelected={onSuggestionSelected}
      label={label}
      type="date"
      eventType={eventType}
      yearRangeEstimate={yearRangeEstimate}
      {...props}
      ref={ref}
    />
  ) : (
    <StandardSuggestCore
      type="date"
      label={label}
      onSuggestionSelected={onSuggestionSelected}
      yearRangeEstimate={yearRangeEstimate}
      {...props}
      ref={ref}
    />
  )
})

export default DateSuggest
export const meta = {
  name: 'DateSuggest',
  isZionFormComponent: true,
}

DateSuggest.meta = meta

const dateStandardShape = PropTypes.shape({
  standardizedText: PropTypes.string.isRequired,
  originalText: PropTypes.string,
  earliestAstro: PropTypes.number,
  latestAstro: PropTypes.number,
  yearRange: PropTypes.string,
  formalText: PropTypes.string.isRequired,
})

DateSuggest.propTypes = {
  /** The label associated with the Autosuggest input TextField */
  label: PropTypes.string,
  /** An event handler called whenever a new Autosuggest option is selected from keyboard, mouse, or finger tap */
  onSuggestionSelected: PropTypes.func,
  /** Whether user should be guided through the standardization process. */
  standardize: PropTypes.bool,
  /** The event type */
  eventType: PropTypes.oneOf(ValidEventTypes),
  /** Initialize DateSuggest with a given selected item */
  initialSelectedItem: PropTypes.oneOfType([
    /** Use this format when standardize prop is NOT set. */
    PropTypes.shape({
      primaryText: PropTypes.string.isRequired,
      isStandard: PropTypes.bool,
      /** standard is only necessary when isStandard is true. */
      standard: dateStandardShape,
    }),
    /** Use this format when standardize prop is set. */
    PropTypes.shape({
      originalText: PropTypes.string,
      standard: dateStandardShape,
    }),
  ]),
  /**
   * The range of years to consider for date suggestions.
   * Can include negative values for BC dates.
   * Helps in sorting and filtering the suggestions.
   */
  yearRangeEstimate: PropTypes.shape({
    startYear: PropTypes.number,
    endYear: PropTypes.number,
  }),
}
