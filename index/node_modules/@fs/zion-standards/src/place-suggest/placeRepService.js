import axios from '@fs/zion-axios'
import { i18n } from '@fs/zion-locale'
import { baseUrl } from '@fs/zion-config'

const placeRepUrl = `${baseUrl}/service/standards/place/ws-ui/places/reps`

export async function validateProposedPlaces(proposedPlaces) {
  const thirtyMinutesInMilliseconds = 1800000
  const currentTime = new Date().valueOf()
  const validatedPlaces = []
  const removedPlacesMessages = []
  let placeReps = []

  if (proposedPlaces && proposedPlaces?.length) {
    placeReps = await Promise.all(
      proposedPlaces?.map((proposedPlace) =>
        axios
          .get(`${placeRepUrl}/${proposedPlace?.id}?pubonly=false&latestRevision=true`)
          ?.then(({ data }) => data?.rep)
      )
    )
  }

  placeReps?.forEach((placeRep, index) => {
    const cachedRep = proposedPlaces[index]
    const lastUpdateTime = new Date(placeRep?.lastUpdateDate).valueOf()
    const isNotDuplicate = placeRep?.id === cachedRep?.id
    const isProposed = !placeRep?.published && placeRep?.validated
    const isNonSearchableProvisional =
      !placeRep?.published &&
      !placeRep?.validated &&
      placeRep?.lastUpdateDate &&
      currentTime - lastUpdateTime < thirtyMinutesInMilliseconds

    if (isNotDuplicate && (isProposed || isNonSearchableProvisional)) {
      validatedPlaces?.push(placeRep)
    } else if (!isNotDuplicate) {
      removedPlacesMessages?.push(
        i18n.t(
          'place-suggest.duplicate-place.message',
          '{duplicatePlace} is a duplicate and has been forwarded to {forwardedPlace}.',
          { duplicatePlace: cachedRep?.fullDisplay?.name, forwardedPlace: placeRep?.fullDisplay?.name }
        )
      )
    } else if (!isNonSearchableProvisional && !isProposed) {
      removedPlacesMessages?.push(
        i18n.t(
          'place-suggest.searchable-place.message',
          '{displayName} is no longer a proposed place and is now searchable.',
          {
            displayName: placeRep?.fullDisplay?.name,
          }
        )
      )
    }
  })

  return { validatedPlaces, removedPlacesMessages }
}

export default { validateProposedPlaces }
