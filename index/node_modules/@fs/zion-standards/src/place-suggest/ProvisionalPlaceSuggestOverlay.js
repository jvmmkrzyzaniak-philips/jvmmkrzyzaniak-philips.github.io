// ProvisionalPlaceWrapper.js
import React, { Suspense, useEffect, useRef, useCallback, lazy } from 'react'
import PropTypes from 'prop-types'
import { useOverlay } from '@fs/zion-ui'
import { trackLink } from '@fs/zion-analytics'

const ProvisionalPlaceNEXT = lazy(() =>
  import('@fs/zion-provisional-place').then((module) => ({
    default: module.ProvisionalPlaceNEXT,
  }))
)
const trackLinkClick = {
  to: 'familysearch.org',
  action: 'click_action',
}

/**
 * Manages overlay for creating new places when standard places aren't available in search results.
 * Handles the workflow between the search component and the place creation experience.
 */
const ProvisionalPlaceSuggestOverlay = ({
  config,
  reloadProposedSuggestions,
  createSuggestionFromProposedPlaceRep,
}) => {
  const provisionalOverlay = useOverlay()
  const { isOpen, transitioning } = provisionalOverlay
  const isClosingRef = useRef(false)
  const lockedStateRef = useRef(null)

  /** Opens overlay and resets selection when "Suggest New Place" is clicked */
  const handleLastResortSelection = useCallback(() => {
    const searchTerm = config?.userInput
    trackLink({ ...trackLinkClick, name: 'PlaceSuggest:Suggest New Place:Click' })
    provisionalOverlay.open()
    config.set({
      userInput: searchTerm || '',
      fieldValue: searchTerm || '',
      selectedItem: null,
    })
    lockedStateRef.current = null
  }, [config, provisionalOverlay])

  /** Processes successful place creation and updates the form state with the new place */
  const handleProvisionalSubmit = useCallback(
    (values, resp) => {
      const placeRep = resp?.data?.placeRep
      if (resp?.status === 201) {
        reloadProposedSuggestions()
        const newSelectedItem = createSuggestionFromProposedPlaceRep(placeRep)
        const prevConfig = { ...config }
        const newSuggestions =
          prevConfig.suggestions && prevConfig.suggestions.length > 0
            ? [...prevConfig.suggestions.filter((s) => s.key !== 'LAST_RESORT'), newSelectedItem]
            : [newSelectedItem]
        const newState = {
          ...prevConfig,
          selectedItem: newSelectedItem,
          userInput: newSelectedItem.primaryText || '',
          fieldValue: newSelectedItem.primaryText || '',
          suggestions: newSuggestions,
        }
        config.set(newState)
        lockedStateRef.current = newState
        config.set(lockedStateRef.current) // Force it
        provisionalOverlay.close()
      } else {
        provisionalOverlay.close()
      }
    },
    [config, reloadProposedSuggestions, createSuggestionFromProposedPlaceRep, provisionalOverlay]
  )

  /** Updates form with existing place selected from the overlay */
  const handleExistingPlaceSelect = useCallback(
    (place) => {
      const prevConfig = { ...config }
      const newSuggestions =
        prevConfig.suggestions && prevConfig.suggestions.length > 0
          ? [...prevConfig.suggestions.filter((s) => s.key !== 'LAST_RESORT'), place]
          : [place]
      const newState = {
        ...prevConfig,
        selectedItem: place,
        userInput: place?.primaryText || '',
        fieldValue: place?.primaryText || '',
        suggestions: newSuggestions,
      }
      config.set(newState)
      lockedStateRef.current = newState
      config.set(lockedStateRef.current) // Force it
      provisionalOverlay.close()
      trackLink({ ...trackLinkClick, name: 'ProvisionalPlace:Existing Place Select:Click' })
    },
    [config, provisionalOverlay]
  )

  /** Closes overlay and resets state without saving changes */
  const onCancel = useCallback(() => {
    isClosingRef.current = true
    lockedStateRef.current = null
    provisionalOverlay.close()
  }, [provisionalOverlay])

  useEffect(() => {
    if (
      !isOpen &&
      !transitioning &&
      lockedStateRef.current &&
      config.selectedItem !== lockedStateRef.current.selectedItem
    ) {
      config.set(lockedStateRef.current)
      lockedStateRef.current = null
    }
  }, [isOpen, transitioning, config])

  useEffect(() => {
    if (config?.selectedItem?.key === 'LAST_RESORT') {
      handleLastResortSelection()
    }
  }, [config?.selectedItem, handleLastResortSelection])

  return (
    <Suspense fallback={null}>
      <ProvisionalPlaceNEXT
        overlay={provisionalOverlay}
        onSubmit={handleProvisionalSubmit}
        onCancel={onCancel}
        onSelectExistingPlace={handleExistingPlaceSelect}
        placeName={config?.userInput}
        isProposed
      />
    </Suspense>
  )
}

ProvisionalPlaceSuggestOverlay.propTypes = {
  config: PropTypes.shape({
    userInput: PropTypes.string.isRequired,
    fieldValue: PropTypes.string.isRequired,
    selectedItem: PropTypes.object,
    suggestions: PropTypes.array,
    set: PropTypes.func.isRequired,
  }).isRequired,
  reloadProposedSuggestions: PropTypes.func.isRequired,
  createSuggestionFromProposedPlaceRep: PropTypes.func.isRequired,
}

export default ProvisionalPlaceSuggestOverlay
