import React, { useMemo } from 'react'
import { MenuNewWindow, ThingMapPin } from '@fs/zion-icon'
import { css } from '@linaria/core'
import PropTypes from 'prop-types'
import { useTranslation } from 'react-i18next'
import { ComboMenu, Button } from '@fs/zion-ui'
import { boolAttr } from '@fs/zion-frontend-friends'
import StaticMap from './StaticMap'

const stdContainerCss = css`
  /* style overrides */
  max-width: 600px;
  min-width: 80px;

  & > * {
    width: 100%;
  }
  &[tighten] div[role='button'] {
    padding-top: 4px;
    padding-bottom: 4px;
    min-height: unset;
  }
  & div[side='left'][is-icon] {
    margin-left: 0;
  }
`

const alignButtonCss = css`
  padding-top: 12px;
`
export default function PlaceSelect({
  standard,
  externalLinkType,
  mapKey,
  isStandard,
  suggestions,
  onChange,
  showDenseUI,
}) {
  const { t } = useTranslation()
  // This shows the dates of the place on the standard picker
  const remappedSuggestions = useMemo(
    () =>
      !isStandard
        ? suggestions?.map((value) => ({
            ...value,
            secondaryText: value.standard
              ? `${value.standard?.placeType ? value.standard?.placeType : ''}${
                  value.standard?.yearRange ? value.standard?.yearRange : ''
                }`
              : '',
          }))
        : suggestions,
    [isStandard, suggestions]
  )
  if (externalLinkType === 'map' && !mapKey) {
    throw new Error('You must supply a mapKey when specifying externalLinkType of "map"')
  }
  const showPlacesMapLink = externalLinkType === 'link'
  const showStaticMap = externalLinkType === 'map' && standard && standard?.isStandard
  const wrappingStyle = showPlacesMapLink ? { display: 'flex', justifyContent: 'space-between' } : {}

  return standard ? (
    <div className={stdContainerCss} tighten={boolAttr(showDenseUI)}>
      <div style={wrappingStyle}>
        {!isStandard && (
          <ComboMenu
            fullWidth
            Icon={ThingMapPin}
            options={remappedSuggestions}
            selectedOption={standard}
            setSelectedOption={onChange}
          />
        )}
        {showPlacesMapLink && (
          <div className={alignButtonCss}>
            <Button
              Icon={MenuNewWindow}
              external
              target="_blank"
              to={`https://www.familysearch.org/research/places/?focusedId=${standard?.place?.id || ''}`}
            >
              {t('place-suggest.map.label', 'Map')}
            </Button>
          </div>
        )}
      </div>
      {showStaticMap && <StaticMap standard={standard} mapKey={mapKey} />}
    </div>
  ) : null
}

PlaceSelect.propTypes = {
  /** The currently selected place standard */
  standard: PropTypes.shape({
    /** ListItem props are available here as well. */
    value: PropTypes.any,
  }),

  /** The type of Map to display */
  externalLinkType: PropTypes.oneOf(['none', 'map', 'link']),

  /** Your apps google Map developer key (required for externalLinkType = 'map')  */
  mapKey: PropTypes.string,

  /** Whether the associated input was standardized or whether it remained original text. */
  isStandard: PropTypes.bool,

  /** List of suggestions the user may select a standard option from. */
  suggestions: PropTypes.arrayOf(
    PropTypes.shape({
      /** ListItem props are available here as well. */
      value: PropTypes.any,
    })
  ),

  /** An event handler called whenever the user selects a standard */
  onChange: PropTypes.func,
}
