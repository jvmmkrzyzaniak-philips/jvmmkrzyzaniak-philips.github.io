import React, { useMemo, useEffect, useCallback } from 'react'
import zionDebug from '@fs/zion-debug'
import { i18n } from '@fs/zion-locale'
import { useAutosuggest } from '@fs/zion-ui-autosuggest'
import { ListItem } from '@fs/zion-ui'
import { ThingMapPin } from '@fs/zion-icon'

const standardIcon = <ListItem.Icon Icon={ThingMapPin} />
const debug = zionDebug('standard-suggest')

const noneOfTheAboveSelectSuggestion = {
  key: 'NONE-OF-THE-ABOVE',
  primaryText: i18n.t('standard-suggest.none-available.option', 'None of the above'),
  international: false,
  isStandard: false,
  startElement: null,
}

/**
 * Stabilizes the autosuggest config by memoizing it with a stable set function.
 * @param {Object} args - Arguments for useAutosuggest, including initialState.
 * @returns {Object} Stabilized autosuggest config with a stable set function.
 */
function useStableAutosuggest(args) {
  const autosuggestConfig = useAutosuggest(args)
  const stableSet = useCallback(
    (state) => {
      debug('useStableAutosuggest set called', state)
      autosuggestConfig.set(state)
    },
    [autosuggestConfig]
  )
  return useMemo(
    () => ({
      ...autosuggestConfig,
      set: stableSet,
    }),
    [autosuggestConfig, stableSet]
  )
}

/**
 * Creates an initial suggestion item from a standard object.
 * @param {Object} standard - The standard object (place or date).
 * @returns {Object|null} The formatted suggestion item or null if no standard.
 */
function getInitialItemFromStandard(standard) {
  if (!standard) return null
  return {
    isStandard: true,
    key: standard.id || standard.formalText, // Support both place (id) and date (formalText) standards
    primaryText: standard.standardizedText,
    secondaryText: standard.placeType ? `${standard.placeType}, ${standard.yearRange}` : undefined,
    startElement: standardIcon,
    standard,
  }
}

const emptySuggestions = []

/**
 * Manages standardized suggestion state, including both autosuggest and standard select components.
 * @param {Object} options - Configuration options.
 * @param {Object} options.initialState - Initial state for the suggestion field.
 * @returns {Object} Config object with combined state and methods.
 */
function useStandardSuggest({ initialState } = {}) {
  const initialOriginalText = initialState?.standardSuggestSuggestion?.originalText
  const initialStandard = initialState?.standardSuggestSuggestion?.standard
  const initialUserInput = initialState?.userInput || initialOriginalText || initialStandard?.standardizedText || ''
  const initialFieldValue = initialUserInput
  const initialSelectedItem = !initialOriginalText ? getInitialItemFromStandard(initialStandard) : null
  const initialStandardSelectSuggestions = initialState?.standardSelectSuggestions || emptySuggestions
  const initialStandardSelectStandard = initialState?.standardSelectStandard

  //  Keep track of whether the user has explicitly made a selection
  const userSelectionStateRef = React.useRef({
    hasExplicitSelection: false,
    selectedKey: null,
  })

  const useAutoSuggestArgs = useMemo(
    () => ({
      initialState: {
        userInput: initialUserInput,
        fieldValue: initialFieldValue,
        selectedItem: initialSelectedItem,
        suggestions: initialStandardSelectSuggestions,
      },
    }),
    [initialUserInput, initialFieldValue, initialSelectedItem, initialStandardSelectSuggestions]
  )

  debug('useStandardSuggest', { useAutoSuggestArgs })

  const autosuggestConfig = useStableAutosuggest(useAutoSuggestArgs)
  const { userInput, selectedItem, suggestions, set } = autosuggestConfig

  const [standardSelectStandard, setStandardSelectStandardOption] = React.useState(initialStandardSelectStandard)
  const [standardSelectSuggestions, setStandardSelectSuggestions] = React.useState(initialStandardSelectSuggestions)

  // Wrap the standardSelectOption setter to track whether a user has made a selection
  const selectStandardSelectOption = useCallback(
    (option) => {
      debug('selectStandardSelectOption called with', option)
      if (option) {
        userSelectionStateRef.current = {
          hasExplicitSelection: true,
          selectedKey: option.key,
        }
      } else {
        userSelectionStateRef.current = {
          hasExplicitSelection: false,
          selectedKey: null,
        }
      }
      setStandardSelectStandardOption(option)
    },
    [setStandardSelectStandardOption]
  )

  const setCombinedState = useCallback(
    (newState) => {
      debug('setCombinedState called with:', newState)
      const {
        standardSelectStandard: newStandardSelectStandard,
        standardSelectSuggestions: newStandardSelectSuggestions,
        ...autosuggestState
      } = newState
      if (Object.keys(autosuggestState).length > 0) {
        set(autosuggestState)
      }
      if (newStandardSelectStandard !== undefined) selectStandardSelectOption(newStandardSelectStandard)
      if (newStandardSelectSuggestions !== undefined) setStandardSelectSuggestions(newStandardSelectSuggestions)
    },
    [set, selectStandardSelectOption, setStandardSelectSuggestions]
  )

  const standardSuggestSuggestion = useMemo(() => {
    const result = {
      originalText: selectedItem ? null : userInput || null,
      standard: selectedItem?.isStandard ? selectedItem.standard : standardSelectStandard || null,
    }
    return Object.freeze(result)
  }, [userInput, selectedItem, standardSelectStandard])

  useEffect(() => {
    debug('Updating standardSelectSuggestions', { suggestions })
    setStandardSelectSuggestions([...suggestions, noneOfTheAboveSelectSuggestion])
  }, [suggestions, setStandardSelectSuggestions])

  // Add this useEffect to reset the user selection when userInput changes and
  // the previous selection was "None of the above"
  useEffect(() => {
    // Check if we previously selected "None of the above"
    if (
      userSelectionStateRef.current.hasExplicitSelection &&
      userSelectionStateRef.current.selectedKey === noneOfTheAboveSelectSuggestion.key
    ) {
      // Reset explicit selection when input changes and previous selection was "None of the above"
      userSelectionStateRef.current = {
        hasExplicitSelection: false,
        selectedKey: null,
      }

      // Auto-select the first suggestion in the new list if available
      if (standardSelectSuggestions.length > 1) {
        // > 1 because list includes "None of the above"
        const firstSuggestion = standardSelectSuggestions[0] // Get first suggestion
        selectStandardSelectOption(firstSuggestion)
      }
    }
  }, [userInput, standardSelectSuggestions, selectStandardSelectOption])

  useEffect(() => {
    debug('Checking standardSelectStandard', {
      standardSelectSuggestions,
      standardSelectStandard,
      userSelection: userSelectionStateRef.current,
    })

    // Skip auto-selection if user made an explicit selection
    if (userSelectionStateRef.current.hasExplicitSelection) {
      // Verify if the user's selection still exists in the suggestions
      const userSelectedOption = standardSelectSuggestions.find(
        (suggestion) => suggestion.key === userSelectionStateRef.current.selectedKey
      )

      if (userSelectedOption) {
        // Reselect the user's choice if it still exists in suggestions
        selectStandardSelectOption(userSelectedOption)
        return
      }
      // If the selection is no longer available, fall through to auto-selection
    }

    const standard = standardSelectSuggestions.find((suggestion) => suggestion.isStandard)
    if (standard) {
      selectStandardSelectOption(standard)
    } else if (!standard && standardSelectStandard) {
      selectStandardSelectOption(null)
    }
  }, [standardSelectSuggestions, standardSelectStandard, selectStandardSelectOption])

  // Only reset user selection when explicitly changing context
  useEffect(() => {
    // Only reset selection state when input changes significantly
    if (userInput.trim() === '') {
      userSelectionStateRef.current = {
        hasExplicitSelection: false,
        selectedKey: null,
      }
    }
  }, [userInput])

  const config = useMemo(
    () => ({
      ...autosuggestConfig,
      set: setCombinedState,
      standardSelectStandard,
      standardSelectSuggestions,
      selectStandardSelectOption,
      standardSuggestSuggestion,
      setStandardSelectSuggestions,
      standardize: true,
    }),
    [
      autosuggestConfig,
      setCombinedState,
      standardSelectStandard,
      standardSelectSuggestions,
      selectStandardSelectOption,
      standardSuggestSuggestion,
      setStandardSelectSuggestions,
    ]
  )

  debug('useStandardSuggest', { config })
  return config
}
/**
 * Hook to manage suggestion state and behavior, integrating with StandardSuggestNEXT.
 * @param {Object} [options] - Configuration options.
 * @param {Object} [options.initialState] - Initial state for the suggestion field.
 *   - **Simple Input**: `{ userInput: "1 Jan 2000" }` or `{ userInput: "New York" }` - Sets the input text.
 *   - **Pre-selected Item**: `{ selectedItem: { primaryText: "1 January 2000" } }` or `{ selectedItem: { primaryText: "New York, NY" } }` - Shows a selected suggestion.
 *   - **Standardized Minimum (Date)**: `{ standardSuggestSuggestion: { standard: { formalText: "+2000-01-01", standardizedText: "1 January 2000" } } }` - Initializes with a date standard.
 *   - **Standardized Minimum (Place)**: `{ standardSuggestSuggestion: { standard: { id: 5413607, standardizedText: "Salt Lake City, Salt Lake, Utah, United States" } } }` - Initializes with a place standard.
 *   - **Full Standard (Date)**: `{ userInput: "1 Jan 2000", fieldValue: "1 January 2000", selectedItem: { primaryText: "1 January 2000" }, standardSuggestSuggestion: { originalText: "1 Jan 2000", standard: { formalText: "+2000-01-01", standardizedText: "1 January 2000" } } }` - Complete date state with standard.
 *   - **Full Standard (Place)**: `{ userInput: "Salt Lake City", fieldValue: "Salt Lake City, Salt Lake, Utah, United States", selectedItem: { primaryText: "Salt Lake City, Salt Lake, Utah, United States" }, standardSuggestSuggestion: { originalText: "Salt Lake City", standard: { id: 5413607, standardizedText: "Salt Lake City, Salt Lake, Utah, United States" } } }` - Complete place state with standard.
 *   - Apps typically store `formalText` (dates) or `id` (places) and re-sync with the API for localized display (e.g., "1 janvier 2000" or "Nueva York, NY").
 * @param {boolean} [options.standardize] - Enables standardization mode, adding `standardSuggestSuggestion` to the config for API-driven standards.
 * @returns {Object} Config object with `userInput`, `fieldValue`, `selectedItem`, `standardSuggestSuggestion`, `set`, etc.
 * @example
 * // Simple date input
 * const dateConfig = useStandardSuggestNEXT({ initialState: { userInput: "1 Jan 2000" } });
 * <StandardSuggestNEXT config={dateConfig} type="date" getSuggestions={getDateSuggestions} />
 *
 * // Simple place input
 * const placeConfig = useStandardSuggestNEXT({ initialState: { userInput: "Salt Lake City" } });
 * <StandardSuggestNEXT config={placeConfig} type="place" getSuggestions={getPlaceSuggestions} />
 */
export default function useStandardSuggestNEXT({ initialState, standardize = false } = {}) {
  const standardizedConfig = useStandardSuggest({ initialState })
  const simpleConfig = useAutosuggest({ initialState })

  useEffect(() => {
    debug(`Active mode: ${standardize ? 'standardized' : 'simple'}`)
  }, [standardize])

  const config = standardize ? standardizedConfig : simpleConfig

  const { set } = config
  const stableSet = useCallback(
    (newState) => {
      debug('useStandardSuggestNEXT set:', newState)
      set(newState)
    },
    [set]
  )

  const finalConfig = useMemo(
    () => ({
      ...config,
      set: stableSet,
      _source: standardize ? 'standardized' : 'simple',
    }),
    [config, stableSet, standardize]
  )

  return finalConfig
}
