/**
 * StandardSuggest
 *
 * Suggests a standard with original input text based on input text entered by user
 *  and/or standard selected by user.
 *
 * Combines a separate Autosuggest (StandardSuggestCore) suggestion with a ComboBox Select
 *   option into a single suggestion containing both a standard and originalText.
 *
 * useStandardSuggest provides control props for Subcomponents and methods to update state.
 *
 */

import React, { useEffect, useRef, forwardRef } from 'react'
import PropTypes from 'prop-types'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import { NoticeWarning, ContentCheck } from '@fs/zion-icon'
import { colors, Row, Paragraph, BillboardText, Separator } from '@fs/zion-ui'
import { Link } from '@fs/zion-router'
import { css } from '@linaria/core'
import { getDateEventByType, getPlaceEventByType, ValidEventTypes, EventTypeEnum } from './eventTypes'
import StandardSuggestCore from './StandardSuggestCore'
import PlaceSelect from '../place-suggest/PlaceSelect'
import DateSelect from '../date-suggest/DateSelect'
import { useStandardSuggest } from './useStandardSuggest'

const negativeMargin = css`
  margin-top: -16px;
  margin-left: 2px;
`

function getStandardSuggestCoreLabel({ type, eventType, label }) {
  if (eventType !== EventTypeEnum.NONE) {
    if (type === 'place') {
      return getPlaceEventByType(eventType)?.label
    }
    return getDateEventByType(eventType)?.label
  }
  return label
}

const StandardSuggest = forwardRef(function StandardSuggest(
  {
    type = 'place',
    eventType,
    onSuggestionSelected,
    externalLinkType = 'none',
    mapKey,
    initialSelectedItem,
    selectedItem,
    label,
    value,
    treeStandardUI,
    ...props
  },
  ref
) {
  const { t } = useTranslation()
  const StandardSelect = type === 'place' ? PlaceSelect : DateSelect
  const { suggestions: initialSuggestions = [] } = props
  const {
    autoSuggestInitialSelectedItem,
    autoSuggestSelectedItem,
    autoSuggestValue,
    autoSuggestSuggestion,
    autoSuggestSuggestionIsStandard,
    autoSuggestInputText,
    standardSelectStandard,
    standardSelectSuggestions,
    standardSuggestSuggestion,
    selectAutoSuggestSuggestion,
    selectStandardSelectOption,
    changeInputText,
    selectItem,
  } = useStandardSuggest({ selectedItem, onSuggestionSelected, initialSelectedItem, value, initialSuggestions, type })

  const notStandardizedWarningText =
    type === 'place'
      ? t('standard-suggest.non-standardized-place.warning', 'Non-standardized Place')
      : t('standard-suggest.non-standardized-date.warning', 'Non-standardized Date')
  const warningValidate =
    (autoSuggestSuggestion || autoSuggestInputText) && !standardSelectStandard ? notStandardizedWarningText : null
  const nonStandardizedWarning =
    !warningValidate &&
    (autoSuggestSuggestion || autoSuggestInputText) &&
    (!standardSelectStandard || !standardSelectStandard.isStandard)
      ? notStandardizedWarningText
      : null

  const handleSuggestionSelect = (suggestion, newSuggestions) => {
    selectAutoSuggestSuggestion({ suggestion, newSuggestions, t })
  }

  // We need to call onSuggestionSelected, when standard or originalText updates
  // but NOT when onSuggestionSelected updates (because ZionForm does it _every_
  // time the component renders). We can use a ref to solve our closure problems.
  const callback = useRef()
  callback.current = onSuggestionSelected
  useEffect(() => {
    callback.current?.(standardSuggestSuggestion)
  }, [standardSuggestSuggestion])

  const selectedItemRef = useRef()
  selectedItemRef.current = selectItem
  useEffect(() => {
    const select = selectedItemRef.current
    select && select(selectedItem)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedItem?.originalText, selectedItem?.standard])

  return (
    // This wrapper <div> is needed so that the StandardSuggest Component can place nicely inside flexbox containers (like Grid/Cell).
    <div>
      <StandardSuggestCore
        {...sanitizeProps(props)}
        type={type}
        label={getStandardSuggestCoreLabel({ type, eventType, label })}
        handleInput
        initialSelectedItem={autoSuggestInitialSelectedItem}
        onSuggestionSelected={(suggestion, newSuggestions) => handleSuggestionSelect(suggestion, newSuggestions)}
        selectedItem={autoSuggestSelectedItem}
        value={autoSuggestValue}
        warningValidate={() => !treeStandardUI && warningValidate}
        onInputTextChange={changeInputText}
        ref={ref}
      />
      <div className={negativeMargin}>
        {!autoSuggestSuggestionIsStandard && standardSelectStandard && treeStandardUI && (
          <Paragraph size="xs">
            {t(type === 'date' ? 'standard-suggest.standard-date.label' : 'standard-suggest.standard-place.label')}
          </Paragraph>
        )}
        <StandardSelect
          standard={standardSelectStandard}
          externalLinkType={externalLinkType}
          mapKey={mapKey}
          suggestions={standardSelectSuggestions}
          isStandard={autoSuggestSuggestionIsStandard}
          warningValidate={() => warningValidate}
          onChange={selectStandardSelectOption}
          showDenseUI={treeStandardUI}
        />
        {nonStandardizedWarning && !treeStandardUI && (
          <BillboardText primaryColor={colors.yellow60}>
            <Paragraph size="sm">
              <NoticeWarning /> {nonStandardizedWarning}
            </Paragraph>
          </BillboardText>
        )}
        {treeStandardUI && (standardSelectStandard || warningValidate) && (
          <>
            <Separator size="nano" />
            <StandardDateLabel type={type} standardize={standardSelectStandard} />
          </>
        )}
      </div>
    </div>
  )
})

export default StandardSuggest

StandardSuggest.propTypes = {
  /** An event handler called whenever the user changes input text or selects a standard */
  onChange: PropTypes.func,

  /** Type of StandardSuggest */
  type: PropTypes.oneOf(['date', 'place']),

  /** The event type */
  eventType: PropTypes.oneOf(ValidEventTypes),
}

function ShowStandardIcon({ standardize, type }) {
  const [t] = useTranslation()
  const standardTextTranslation =
    type === 'date' ? 'standard-suggest.standardized-date.label' : 'standard-suggest.standardized-place.label'
  const translationKey = standardize ? standardTextTranslation : 'standard-suggest.none-standardized.warning'
  const DisplayedIcon = standardize ? ContentCheck : NoticeWarning
  const iconColor = standardize ? 'green' : 'orange'
  const textColor = standardize ? colors.green40 : colors.yellow40
  return (
    <BillboardText primaryColor={textColor}>
      <Paragraph size="xs">
        <DisplayedIcon size="sm" color={iconColor} />

        {t(translationKey)}
      </Paragraph>
    </BillboardText>
  )
}

// This is required to align the bottom elements with the input field
const standardLabelWrapper = css`
  max-width: 80ch;
`

function StandardDateLabel({ type, standardize }) {
  const [t] = useTranslation()
  const linkUrl =
    type === 'date'
      ? 'https://www.familysearch.org/help/helpcenter/article/how-do-i-enter-dates-and-places-into-family-tree'
      : 'https://www.familysearch.org/help/helpcenter/article/how-do-i-request-a-new-place-in-the-database-of-standardized-places'
  return (
    <div className={standardLabelWrapper}>
      <Row guttersY="none">
        <ShowStandardIcon type={type} standardize={standardize} growX />
        <Paragraph noShrinkX size="xs">
          <Link to={linkUrl} external target="_blank" wayfinding>
            {t('standard-suggest.what-is-this.link')}
          </Link>
        </Paragraph>
      </Row>
    </div>
  )
}
