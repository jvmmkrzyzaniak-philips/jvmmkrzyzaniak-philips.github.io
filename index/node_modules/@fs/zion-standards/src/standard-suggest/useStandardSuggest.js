import { ThingCalendar, ThingMapPin } from '@fs/zion-icon'
import React from 'react'
import zionDebug from '@fs/zion-debug'
import { ListItem } from '@fs/zion-ui'
import { i18n } from '@fs/zion-locale'

const debug = zionDebug('standard-suggest')

/**
 * StandardSuggestState
 *
 * Suggests a standard with original input text based on input text entered by user
 *  and/or standard selected by user.
 *
 * Combines a separate Autosuggest (StandardSuggestCore) suggestion with a ComboBox Select
 *   option into a single suggestion containing both a standard and originalText.
 *
 * ===================================================================================
 * {
 *    autoSuggestInitialSelectedItem: {
 *      key: {ID},
 *      primaryText: {String},
 *    }
 *    autoSuggestSelectedItem: {
 *      key: {ID},
 *      primaryText: {String},
 *    },
 *    autoSuggestValue : {
 *      key: {ID},
 *      primaryText: {String},
 *    },
 *    autoSuggestSuggestion: {
 *      key: {ID},
 *      primaryText: {String},
 *    }
 *    autoSuggestSuggestionIsStandard: Boolean,
 *    autoSuggestInputText: {String},
 *    standardSelectStandard: {
 *      standardizedText: {String},
 *      ...,
 *      ...,
 *    },
 *    standardSelectSuggestions: [
 *      {
 *        key: {ID},
 *        primaryText: {String},
 *        ...,
 *        ...,
 *      },
 *      {
 *        key: {ID},
 *        primaryText: {String},
 *        ...,
 *        ...,
 *      }
 *    ],
 *    standardSuggestSuggestion {
 *      originalText: {String},
 *      standard: {
 *        standardizedText: {String},
 *        ...,
 *        ...,
 *      },
 *    }
 * }
 *
 */

const actionTypes = {
  onSuggestionSelected: 'ON_SUGGESTION_SELECTED',
  onStandardSelected: 'ON_STANDARD_SELECTED',
  onInputTextChange: 'ON_INPUT_TEXT_CHANGE',
  onSelectedItem: 'ON_SELECTED_ITEM',
}

const standardDateIcon = <ListItem.Icon Icon={ThingCalendar} />
const standardPlaceIcon = <ListItem.Icon Icon={ThingMapPin} />
const userSelectedOriginalText = (userSelection = {}) => userSelection?.type === 'INPUT_TEXT_OPTION'

function getOriginalText(userSelection) {
  const isStd = !userSelectedOriginalText(userSelection)
  if (!isStd) {
    return userSelection?.primaryText
  }
  return userSelection?.international ? userSelection?.original : null
}

function getFirstStandardizedSuggestion(suggestions) {
  return suggestions.find((suggestion) => !userSelectedOriginalText(suggestion))
}

function getStandardSelectCoreSelectedItem(initialSelectedItem) {
  const { originalText, standard } = initialSelectedItem || {}
  if (originalText !== null && originalText !== undefined) {
    const key = getSuggestionKey({ originalText })
    const primaryText = originalText
    return { key, primaryText }
  }
  if (standard) {
    const key = getSuggestionKey({ standard })
    // We shouldn't need secondary and tertiary text for initialization
    return {
      key,
      primaryText: standard.standardizedText,
      isStandard: true,
      standard,
    }
  }
  return null
}

function standardizedToSelect(standard, type) {
  if (standard) {
    const key = getSuggestionKey({ standard })
    return {
      key,
      primaryText: standard.standardizedText,
      international: false,
      isStandard: true,
      startElement: type === 'date' ? standardDateIcon : standardPlaceIcon,
      standard,
    }
  }
  return null
}

const noneOfTheAboveSelectSuggestion = {
  key: 'NONE-OF-THE-ABOVE',
  primaryText: i18n.t('standard-suggest.none-available.option', 'None of the above'),
  international: false,
  isStandard: false,
  startElement: null,
}

// Update translation when language changes
i18n.on('languageChanged', () => {
  noneOfTheAboveSelectSuggestion.primaryText = i18n.t('standard-suggest.none-available.option', 'None of the above')
})

function standardSuggestionsToSelectSuggestions(standardSuggestions, standardized, type) {
  const suggestions = standardSuggestions
    .map((suggestion) => {
      const { standard = null } = suggestion
      return standardizedToSelect(standard, type)
    })
    .filter((suggestion) => !!suggestion)
  if (suggestions.length > 0) {
    return [...suggestions, noneOfTheAboveSelectSuggestion]
  }
  return standardized ? [standardized, noneOfTheAboveSelectSuggestion] : [noneOfTheAboveSelectSuggestion]
}

function getInitializerArg({
  selectedItem = null,
  onSuggestionSelected,
  initialSelectedItem = null,
  value = null,
  standardSuggestions = [],
  type,
}) {
  const isControlled = selectedItem !== undefined || value !== undefined
  const autoSuggestInitialSelectedItem = getStandardSelectCoreSelectedItem(initialSelectedItem)
  const autoSuggestSelectedItem = getStandardSelectCoreSelectedItem(selectedItem)
  const autoSuggestValue = getStandardSelectCoreSelectedItem(value)
  const { originalText = null, standard } = selectedItem || {}
  const autoSuggestSuggestion = standardizedToSelect(standard, type)
  const autoSuggestSuggestionIsStandard = !originalText && !!standard
  const autoSuggestInputText = originalText
  const standardSelectStandard = standardizedToSelect(autoSuggestSuggestion?.standard, type)
  const standardSelectSuggestions = standardSuggestionsToSelectSuggestions(
    standardSuggestions,
    standardSelectStandard,
    type
  )
  const standardSuggestSuggestion = { originalText, standard }
  return {
    autoSuggestInitialSelectedItem,
    autoSuggestSelectedItem,
    autoSuggestValue,
    autoSuggestSuggestion,
    autoSuggestSuggestionIsStandard,
    autoSuggestInputText,
    standardSelectStandard,
    standardSelectSuggestions,
    standardSuggestSuggestion,
    isControlled,
    onSuggestionSelected,
  }
}

function selectedStandardIsCurrent({ standard, suggestions }) {
  return Boolean(standard && suggestions.find((s) => s?.standard?.standardizedText === standard?.standardizedText))
}

function getAutoSuggestSuggestion({ suggestion, suggestions, state, autoSuggestSuggestionIsStandard }) {
  if (autoSuggestSuggestionIsStandard) {
    return suggestion
  }

  const standard = state?.standardSuggestSuggestion?.standard
  if (selectedStandardIsCurrent({ standard, suggestions })) {
    return { ...suggestion, standard }
  }

  return getFirstStandardizedSuggestion(suggestions)
}

function getSuggestionKey({ standard, originalText }) {
  const S = standard?.standardizedText
  const O = originalText
  const standardKey = S ? `S=${S}` : ''
  const originalTextKey = O ? `O=${O}` : ''
  return standardKey + originalTextKey
}

function updateStateOnSuggestionSelected({ state, action }) {
  const { suggestion, suggestions, suggestType } = action
  const { isControlled, onSuggestionSelected } = state
  const autoSuggestSuggestionIsStandard = !userSelectedOriginalText(suggestion)
  const autoSuggestSuggestion = getAutoSuggestSuggestion({
    suggestion,
    suggestions,
    state,
    autoSuggestSuggestionIsStandard,
  })
  const standardSelectStandard = standardizedToSelect(autoSuggestSuggestion?.standard, suggestType)
  const originalText = getOriginalText(suggestion)
  const standard = autoSuggestSuggestion?.standard || null
  const standardSelectSuggestions = standardSuggestionsToSelectSuggestions(
    suggestions,
    standardSelectStandard,
    suggestType
  )
  const standardSuggestSuggestion = { originalText, standard }

  if (isControlled) {
    onSuggestionSelected(standardSuggestSuggestion)
  }

  return {
    ...state,
    autoSuggestSuggestion,
    autoSuggestSuggestionIsStandard,
    standardSelectStandard,
    standardSelectSuggestions,
    standardSuggestSuggestion,
  }
}

function updateStateOnStandardSelected({ state, action }) {
  const { option = null } = action
  const standardSelectStandard = option
  const originalText = state?.standardSuggestSuggestion?.originalText || null
  const standardSuggestSuggestion = { originalText, standard: option?.standard || null }

  return {
    ...state,
    standardSelectStandard,
    standardSuggestSuggestion,
  }
}

function getStandardSelectSuggestions({ standardSelectStandard, state }) {
  return standardSelectStandard &&
    (!state.standardSelectSuggestions ||
      !state.standardSelectSuggestions.find(
        (s) =>
          s.originalText === standardSelectStandard.originalText &&
          s?.standard?.formalText === standardSelectStandard?.standard?.formalText
      ))
    ? [standardSelectStandard]
    : state.standardSelectSuggestions
}

function updateStateOnSelectedItem({ state, action }) {
  const { selectedItem, suggestType } = action
  const { originalText = null, standard = null } = selectedItem || {}
  const autoSuggestSelectedItem = getStandardSelectCoreSelectedItem(selectedItem)
  const autoSuggestSuggestion = standardizedToSelect(standard, suggestType)
  const autoSuggestSuggestionIsStandard = !originalText && !!standard
  const autoSuggestInputText = originalText
  const standardSelectStandard = standardizedToSelect(autoSuggestSuggestion?.standard, suggestType)
  const standardSuggestSuggestion = { originalText, standard }
  const standardSelectSuggestions = getStandardSelectSuggestions({ standardSelectStandard, state })

  if (state.isControlled !== (selectedItem !== undefined) && process.env.NODE_ENV === 'development') {
    // eslint-disable-next-line no-console
    console.warn(
      state.isControlled
        ? 'useStandardSuggest should not change selectedItem from controlled to uncontrolled!'
        : 'useStandardSuggest should not change selectedItem from uncontrolled to controlled!'
    )
  }

  return {
    ...state,
    autoSuggestSelectedItem,
    autoSuggestSuggestion,
    autoSuggestSuggestionIsStandard,
    autoSuggestInputText,
    standardSelectStandard,
    standardSuggestSuggestion,
    standardSelectSuggestions,
  }
}

function updateStateOnInputTextChange({ state, action }) {
  const { autoSuggestInputText } = action
  if (autoSuggestInputText && state?.autoSuggestSuggestion?.standard?.standardizedText === autoSuggestInputText) {
    return state
  }

  // user deleted the field contents, so we should "reset" the field
  if ((state.autoSuggestInputText || state.autoSuggestSuggestion) && !autoSuggestInputText) {
    return {
      ...state,
      autoSuggestSuggestion: null,
      autoSuggestSuggestionIsStandard: false,
      autoSuggestedInputText: '',
      standardSuggestSuggestion: {
        originalText: null,
        standard: state?.standardardSuggestSuggestion?.standard || null,
      },
    }
  }

  const standardSuggestSuggestion = { ...state.standardSuggestSuggestion, originalText: autoSuggestInputText }

  return { ...state, autoSuggestInputText, standardSuggestSuggestion }
}

function standardSuggestReducer(state, action) {
  let newState = state
  switch (action.type) {
    case actionTypes.onSuggestionSelected: {
      newState = updateStateOnSuggestionSelected({ state, action })
      break
    }
    case actionTypes.onStandardSelected:
      newState = updateStateOnStandardSelected({ state, action })
      break
    case actionTypes.onInputTextChange:
      newState = updateStateOnInputTextChange({ state, action })
      break
    case actionTypes.onSelectedItem:
      newState = updateStateOnSelectedItem({ state, action })
      break
    default:
      break
  }
  debug('action:', action)
  debug('================================')
  debug('state:', state)
  debug('newState:', newState)
  debug('================================')
  return newState
}

function useStandardSuggest({
  reducer = standardSuggestReducer,
  selectedItem,
  onSuggestionSelected,
  initialSelectedItem,
  value,
  initialSuggestions,
  type,
} = {}) {
  const initialState = getInitializerArg({
    selectedItem,
    onSuggestionSelected,
    initialSelectedItem,
    value,
    initialSuggestions,
    type,
  })
  const [
    {
      autoSuggestInitialSelectedItem,
      autoSuggestSelectedItem,
      autoSuggestValue,
      autoSuggestSuggestion,
      autoSuggestSuggestionIsStandard,
      autoSuggestInputText,
      standardSelectStandard,
      standardSelectSuggestions,
      standardSuggestSuggestion,
      isControlled,
    },
    dispatch,
  ] = React.useReducer(reducer, initialState)
  const selectAutoSuggestSuggestion = ({ suggestion, t, newSuggestions }) => {
    const none = { type: 'NONE', secondaryText: t('standard-suggest.none-available.option', 'None of the above') }
    const suggestions = [...newSuggestions, none]
    dispatch({ type: actionTypes.onSuggestionSelected, suggestion, suggestions, suggestType: type })
  }
  const selectStandardSelectOption = (option) => {
    dispatch({ type: actionTypes.onStandardSelected, option })
  }
  const changeInputText = (inputText) => {
    if (!isControlled) {
      dispatch({ type: actionTypes.onInputTextChange, autoSuggestInputText: inputText })
    }
  }
  const selectItem = (item) => {
    dispatch({ type: actionTypes.onSelectedItem, selectedItem: item, suggestType: type })
  }
  return {
    autoSuggestInitialSelectedItem,
    autoSuggestSelectedItem,
    autoSuggestValue,
    autoSuggestSuggestion,
    autoSuggestSuggestionIsStandard,
    autoSuggestInputText,
    standardSelectStandard,
    standardSelectSuggestions,
    standardSuggestSuggestion,
    selectAutoSuggestSuggestion,
    selectStandardSelectOption,
    changeInputText,
    selectItem,
  }
}

export { useStandardSuggest, actionTypes, standardSuggestReducer }
