/**
 * StandardSuggestNEXT
 *
 * Suggests a standard with original input text based on input text entered by user
 * and/or standard selected by user.
 *
 * Combines an Autosuggest input text field with an optional ComboBox select option (PlaceSelect or DateSelect)
 * into a single suggestion containing both a standard and originalText. When standardize is false, only
 * the Autosuggest is shown. When true, both Autosuggest and StandardSelect are displayed.
 *
 * useStandardSuggestNEXT provides the config prop for keeping the combined Autosuggest and ComboBox state.
 */

import React, { forwardRef } from 'react'
import PropTypes from 'prop-types'
import { sanitizeProps } from '@fs/zion-frontend-friends'
import { useTranslation } from 'react-i18next'
import { NoticeWarning, ContentCheck, ThingMapPin, ThingCalendar, PlaceSuggestion } from '@fs/zion-icon'
import { colors, Row, Paragraph, BillboardText, Separator } from '@fs/zion-ui'
import { Link } from '@fs/zion-router'
import { css } from '@linaria/core'
import { Autosuggest } from '@fs/zion-ui-autosuggest'
import PlaceSelect from '../place-suggest/PlaceSelect'
import DateSelect from '../date-suggest/DateSelect'

const negativeMargin = css`
  margin-top: -16px;
  margin-inline-start: 2px;
`

const ICONS = { place: ThingMapPin, date: ThingCalendar }

/**
 * Determines the appropriate icon for the Autosuggest based on the selected item and input text.
 * @param {Object} selectedItem - The currently selected suggestion.
 * @param {string} inputText - The current input text in the field.
 * @param {string} type - The type of suggestion ('place' or 'date').
 * @returns {Function|undefined} The icon component or undefined if no icon applies.
 */
function getAutosuggestIcon(selectedItem, inputText, type) {
  if (selectedItem?.primaryText === inputText) {
    if (selectedItem?.isStandard) {
      return ICONS[type]
    }
    if (selectedItem?.isProposed) {
      return PlaceSuggestion
    }
  }
  return undefined
}

/**
 * StandardSuggestNEXT Component
 *
 * Renders an Autosuggest component and, if standardize is true, a StandardSelect component (PlaceSelect or DateSelect).
 * Manages state via the config object from useStandardSuggestNEXT.
 *
 * @param {Object} props - Component props.
 * @param {string} [props.type='place'] - Type of suggestion ('place' or 'date').
 * @param {Function} props.getSuggestions - Function to fetch suggestions based on user input.
 * @param {string} props.label - Label for the Autosuggest input field.
 * @param {boolean} [props.treeStandardUI] - Whether to use a dense UI for tree views.
 * @param {Object} props.config - Configuration object from useStandardSuggestNEXT.
 * @param {Object} ref - Forwarded ref to the Autosuggest input.
 * @returns {JSX.Element} The rendered component.
 */
const StandardSuggestNEXT = forwardRef(function StandardSuggestNEXT(
  { type = 'place', getSuggestions, label, treeStandardUI, config, ...props },
  ref
) {
  const { t } = useTranslation()
  const StandardSelect = type === 'place' ? PlaceSelect : DateSelect
  const {
    standardize,
    standardSelectStandard,
    standardSelectSuggestions,
    selectStandardSelectOption,
    userInput,
    selectedItem: autoSuggestSelectedItem,
    fieldValue,
  } = config

  const autoSuggestSuggestion = autoSuggestSelectedItem
  const autoSuggestInputText = userInput
  const autoSuggestSuggestionIsStandard = !!autoSuggestSuggestion?.isStandard
  const notStandardizedWarningText =
    type === 'place'
      ? t('standard-suggest.non-standardized-place.warning', 'Non-standardized Place')
      : t('standard-suggest.non-standardized-date.warning', 'Non-standardized Date')
  const warningValidate =
    standardize && (autoSuggestSuggestion || autoSuggestInputText) && !standardSelectStandard
      ? notStandardizedWarningText
      : null
  const nonStandardizedWarning =
    !warningValidate &&
    (autoSuggestSuggestion || autoSuggestInputText) &&
    (!standardSelectStandard || !standardSelectStandard.isStandard)
      ? notStandardizedWarningText
      : null

  const Icon = getAutosuggestIcon(autoSuggestSuggestion, fieldValue, type)

  return (
    <div>
      <Autosuggest
        {...sanitizeProps(props)}
        Icon={Icon}
        label={label}
        warningValidate={() => !treeStandardUI && warningValidate}
        highlightMatchingText
        getSuggestions={getSuggestions}
        config={config} // Use flat config directly
        ref={ref}
      />
      {standardize && (
        <div className={negativeMargin}>
          {!autoSuggestSuggestionIsStandard && standardSelectStandard && treeStandardUI && (
            <Paragraph size="xs">
              {t(type === 'date' ? 'standard-suggest.standard-date.label' : 'standard-suggest.standard-place.label')}
            </Paragraph>
          )}
          <StandardSelect
            standard={standardSelectStandard}
            suggestions={standardSelectSuggestions}
            isStandard={autoSuggestSuggestionIsStandard}
            warningValidate={() => warningValidate}
            onChange={selectStandardSelectOption}
            showDenseUI={treeStandardUI}
          />
          {nonStandardizedWarning && !treeStandardUI && (
            <BillboardText primaryColor={colors.yellow60}>
              <Paragraph size="sm">
                <NoticeWarning /> {nonStandardizedWarning}
              </Paragraph>
            </BillboardText>
          )}
          {treeStandardUI && (standardSelectStandard || warningValidate) && (
            <>
              <Separator size="nano" />
              <StandardDateLabel type={type} standardize={standardSelectStandard} />
            </>
          )}
        </div>
      )}
    </div>
  )
})

/**
 * Displays an icon and label indicating whether the input is standardized.
 * @param {boolean} standardize - Whether the input is standardized.
 * @param {string} type - The type of suggestion ('place' or 'date').
 * @returns {JSX.Element} The icon and label component.
 */
function ShowStandardIcon({ standardize, type }) {
  const [t] = useTranslation()
  const standardTextTranslation =
    type === 'date' ? 'standard-suggest.standardized-date.label' : 'standard-suggest.standardized-place.label'
  const translationKey = standardize ? standardTextTranslation : 'standard-suggest.none-standardized.warning'
  const DisplayedIcon = standardize ? ContentCheck : NoticeWarning
  const iconColor = standardize ? 'green' : 'orange'
  const textColor = standardize ? colors.green40 : colors.yellow40
  return (
    <BillboardText primaryColor={textColor}>
      <Paragraph size="xs">
        <DisplayedIcon size="sm" color={iconColor} />
        {t(translationKey)}
      </Paragraph>
    </BillboardText>
  )
}

/**
 * Renders a label with a link to help documentation for standardization.
 * @param {string} type - The type of suggestion ('place' or 'date').
 * @param {Object} standardize - The standardized suggestion object.
 * @returns {JSX.Element} The label component with a help link.
 */
function StandardDateLabel({ type, standardize }) {
  const [t] = useTranslation()
  const linkUrl =
    type === 'date'
      ? 'https://www.familysearch.org/help/helpcenter/article/how-do-i-enter-dates-and-places-into-family-tree'
      : 'https://www.familysearch.org/help/helpcenter/article/how-do-i-request-a-new-place-in-the-database-of-standardized-places'
  return (
    <Row guttersY="none">
      <ShowStandardIcon type={type} standardize={standardize} growX />
      <Paragraph noShrinkX size="xs">
        <Link to={linkUrl} external target="_blank" wayfinding>
          {t('standard-suggest.what-is-this.link')}
        </Link>
      </Paragraph>
    </Row>
  )
}

StandardSuggestNEXT.propTypes = {
  type: PropTypes.oneOf(['date', 'place']),
  getSuggestions: PropTypes.func.isRequired,
  label: PropTypes.string,
  treeStandardUI: PropTypes.bool,
  config: PropTypes.shape({
    standardize: PropTypes.bool.isRequired,
    userInput: PropTypes.string.isRequired,
    fieldValue: PropTypes.string.isRequired,
    selectedItem: PropTypes.object,
    standardSelectStandard: PropTypes.object,
    standardSelectSuggestions: PropTypes.array,
    selectStandardSelectOption: PropTypes.func,
    set: PropTypes.func.isRequired,
  }).isRequired,
}

export default StandardSuggestNEXT
