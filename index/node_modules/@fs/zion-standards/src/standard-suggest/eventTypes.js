// TODO: add additional conclusion type pairings.
import { i18n } from '@fs/zion-locale'

import { ThingMapPin, ThingCalendar } from '@fs/zion-icon'

export const EventTypeEnum = Object.freeze({
  BIRTH: 'birth',
  DEATH: 'death',
  MARRIAGE: 'marriage',
  CENSUS: 'census',
  NONE: 'none',
  properties: {
    birth: { name: i18n.t('event-type.birth.name', 'Birth') },
    death: { name: i18n.t('event-type.death.name', 'Death') },
    marriage: { name: i18n.t('event-type.marriage.name', 'Marriage') },
    census: { name: i18n.t('event-type.census.name', 'Census') },
  },
})

// Update translations when language changes
i18n.on('languageChanged', () => {
  EventTypeEnum.properties.birth.name = i18n.t('event-type.birth.name', 'Birth')
  EventTypeEnum.properties.death.name = i18n.t('event-type.death.name', 'Death')
  EventTypeEnum.properties.marriage.name = i18n.t('event-type.marriage.name', 'Marriage')
  EventTypeEnum.properties.census.name = i18n.t('event-type.census.name', 'Census')
})

export const ValidEventTypes = Object.keys(EventTypeEnum)
  .filter((key) => key !== 'properties')
  .map((key) => EventTypeEnum[key])

export function getPlaceEventByType(eventType) {
  const eventName = EventTypeEnum.properties[eventType]?.name
  const label = eventName
    ? i18n.t('event-type.place.label', '{eventName} Place', {
        eventName,
      })
    : i18n.t('place-suggest.place.label', 'Place')
  return { Icon: ThingMapPin, label }
}

export function getDateEventByType(eventType) {
  const eventName = EventTypeEnum.properties[eventType]?.name
  const label = eventName
    ? i18n.t('event-type.date.label', '{eventName} Date', {
        eventName,
      })
    : i18n.t('date-suggest.date.label', 'Date')
  return { Icon: ThingCalendar, label }
}
