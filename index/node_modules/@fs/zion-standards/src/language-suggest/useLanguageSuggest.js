import { useAutosuggest } from '@fs/zion-ui-autosuggest'
import { useCallback, useMemo } from 'react'
import zionDebug from '@fs/zion-debug'
import { getLanguages, getLanguage } from './languageHelper'

const debug = zionDebug('language-suggest')

export function getLanguageSuggestions(inputText) {
  return getSuggestions(inputText, false)
}

export function getAdvancedLanguageSuggestions(inputText) {
  return getSuggestions(inputText, true)
}

export function getSuggestions(inputText, advanced) {
  if (!inputText) {
    return []
  }
  const suggestions = getLanguages()
    .map((suggestion) => {
      return {
        ...suggestion,
        primaryText: advanced ? `${suggestion.primaryText} (${suggestion.code})` : suggestion.primaryText,
      }
    })
    .filter((suggestion) => {
      return suggestion.primaryText.toLowerCase().includes(inputText.toLowerCase())
    })

  const inputTextMatch = suggestions.find((s) => {
    return s.primaryText.toLowerCase() === inputText.toLowerCase()
  })

  if (!inputTextMatch && advanced) {
    suggestions.unshift({ primaryText: inputText, key: inputText, code: inputText })
  }
  return suggestions
}

export default function useLanguageSuggest(initialLocale, advanced = false) {
  const initialSelectedItem = getLanguage(initialLocale, advanced)
  const useAutoSuggestArgs = initialSelectedItem
    ? {
        initialState: {
          userInput: initialSelectedItem.primaryText,
          fieldValue: initialSelectedItem.primaryText,
          selectedItem: initialSelectedItem,
        },
      }
    : {}
  const autosuggestConfig = useAutosuggest(useAutoSuggestArgs)
  const { set } = autosuggestConfig

  const stableSet = useCallback(
    (newState) => {
      debug('useLanguageSuggest set:', newState)
      set(newState)
    },
    [set]
  )

  return useMemo(() => {
    const stableConfig = {
      ...autosuggestConfig,
      set: stableSet,
      advanced,
      initialLocale,
    }
    debug('useLanguageSuggest stableConfig:', stableConfig)
    return stableConfig
  }, [autosuggestConfig, stableSet, advanced, initialLocale])
}
