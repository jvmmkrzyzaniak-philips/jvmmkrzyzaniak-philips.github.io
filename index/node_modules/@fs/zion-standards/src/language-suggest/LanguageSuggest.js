import React from 'react'
import { useTranslation } from 'react-i18next'
import { Autosuggest } from '@fs/zion-ui'
import PropTypes from 'prop-types'
import usePlaceLanguages from './usePlaceLanguages'

export default function LanguageSuggest({
  initialLocale = 'en',
  advanced = false,
  onInputTextChange = () => {},
  ...rest
}) {
  const [t] = useTranslation()
  const { suggestions, setInputText, initialSelectedItem } = usePlaceLanguages(initialLocale, advanced)

  suggestions.forEach((option) => {
    if (!option.key) {
      throw new Error('option.key not defined')
    }
  })
  return (
    <Autosuggest
      id="language-autosuggest"
      label={t('language-suggest.language.label', 'Language')}
      onInputTextChange={(text) => {
        onInputTextChange(text)
        setInputText(text)
      }}
      initialSelectedItem={rest?.selectedItem || initialSelectedItem}
      placeholder={t('language-suggest.select-language.place-holder', 'e.g. English')}
      suggestions={suggestions}
      highlightMatchingText
      noFilter
      {...rest}
    />
  )
}

export const meta = {
  name: 'LanguageSuggest',
  isZionFormComponent: true,
}

LanguageSuggest.meta = meta

LanguageSuggest.propTypes = {
  /** The initial selected item's locale */
  initialLocale: PropTypes.string,

  /** The callback to call when the input text changes */
  onInputTextChange: PropTypes.func,

  /** Displays the language code associated with the language name in the list of suggestions.
   *  Generates an additional suggestion from the user's input text when it doesn't match an existing language.
   *  If a user generated suggestion contains a valid language code, it can be accepted in place of an item
   *  selected from the provided list of language suggestions.
   * */
  advanced: PropTypes.bool,
}
