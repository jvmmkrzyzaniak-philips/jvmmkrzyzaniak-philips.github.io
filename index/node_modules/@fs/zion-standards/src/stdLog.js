import { splunk } from '@fs/zion-splunk-logger'
import zionDebug from '@fs/zion-debug'

const version = '2.2.5'
const debug = zionDebug('zion:std:log')

/**
 * The Application's current logging level (i.e standards_logLevel) and the level at which a specific log is reported.
 *
 * LOG - debug and performance
 * INFO - Analytics and general Information (e.g. "Provisional place created")
 * WARN - Recoverable Errors (e.g. 400 response when patron tries to create a place with bad data)
 * ERROR - Fatal errors (e.g. 500 - INTERNAL_SERVER_ERROR)
 */

export const LOG_LEVEL = {
  LOG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
  OFF: 5,
}

export function stdLog(
  { msg, component = '', logLevel = LOG_LEVEL.INFO, logLevelFlag = LOG_LEVEL.ERROR } = {},
  extraParams = {}
) {
  const shouldLogToSplunk = logLevel && logLevel >= logLevelFlag
  const splunkParams = { component: `[STD]${component}`, version, msg, ...extraParams }
  debug(`[${component}] ${msg}`)
  if (shouldLogToSplunk) {
    switch (logLevel) {
      case LOG_LEVEL.LOG:
      case LOG_LEVEL.INFO: {
        splunk.log(splunkParams)
        break
      }
      case LOG_LEVEL.WARN: {
        splunk.warn(splunkParams)
        break
      }
      case LOG_LEVEL.ERROR: {
        const obj = {}
        // captureStackTrace is a non-standard V8 function in Chromium-based browsers
        Error?.captureStackTrace?.(obj, stdLog)
        splunkParams.stack = obj.stack
        splunk.error(splunkParams)
        break
      }
      default: {
        break
      }
    }
  }
}
