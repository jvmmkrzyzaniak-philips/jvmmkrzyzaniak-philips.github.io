const fiveMinutes = 1000 * 60 * 5

// If there is a period in the session id, everything before the period is the
// "correlation id" and should be logged; otherwise, keep existing functionality.
// https://icseng.atlassian.net/wiki/spaces/Product/pages/133597684/Session+ID+Format
// const cacheKey = (sessionId) => `${sessionId.slice(-20)}-session`
export const getCacheKey = (sessionId) => {
  return sessionId.includes('.') ? sessionId.split('.')[0] : `${sessionId.slice(-20)}-session`
}

const memoryCache = {}
const hasSessionStorage = typeof sessionStorage !== 'undefined' && sessionStorage !== null

// this function is not meant to be exported publicly, only used for tests right now
export function clearCachedSession(sessionId) {
  delete memoryCache[getCacheKey(sessionId)]
}

export function getCachedSession(sessionId) {
  if (!sessionId) return null

  let cachedSession
  try {
    cachedSession = memoryCache[getCacheKey(sessionId)]
    cachedSession = cachedSession || (hasSessionStorage && JSON.parse(sessionStorage[getCacheKey(sessionId)]))
    if (isExpired(cachedSession.timestamp)) {
      cachedSession = null
      hasSessionStorage && sessionStorage.removeItem(getCacheKey(sessionId))
    }
  } catch (err) {
    cachedSession = null
  }
  return cachedSession
}

export function setCachedSession(session) {
  session.timestamp = new Date().getTime()
  try {
    hasSessionStorage && sessionStorage.setItem(getCacheKey(session.session.id), JSON.stringify(session))
  } catch (err) {
    // swallow quota exceeded error
  }
  memoryCache[getCacheKey(session.session.id)] = session
}

function isExpired(timestamp) {
  return new Date().getTime() > timestamp + fiveMinutes
}
