/* eslint-disable import/no-mutable-exports -- we mutate our exported function after it has been initialized on purpose in order to all getPreferences to be synchronous */

import { featureFlagFactory, controlFeatureFlag } from '@fs/flags-js/react'
import zionDebug from '@fs/zion-debug'
import type { FeatureFlag, FeatureFlags, Flag, Flags } from './model'

const debug = zionDebug('zion:flags:flagsJsHelper')

export let getFeatureFlag = preInitializedGetFeatureFlag
export let getFeatureFlags = preInitializedGetFeatureFlags

let localMockFlags
let localFlagOverrides
let flagsReadyPromise
let flagsReadyResolve

export async function flagsAreReady(mockFlags = undefined, flagOverrides = undefined): Promise<void> {
  debug('flagsAreReady: start with mockFlags:', mockFlags, ' and overrides: ', flagOverrides)
  if (flagsReadyPromise && (localMockFlags !== undefined || localFlagOverrides !== undefined)) {
    debug(
      'flagsAreReady: localMockFlags and localFlagOverrides already set, returning existing promise ...',
      flagsReadyPromise
    )
  } else {
    if (!flagsReadyPromise) {
      flagsReadyPromise = new Promise<void>((resolve) => {
        flagsReadyResolve = resolve
      })
    }
    // this will get called multiple times, but we need to wait until FFP calls with mockFlags and flagOverrides to accurately evaluate a flag
    if (mockFlags !== undefined || flagOverrides !== undefined) {
      debug('flagsAreReady: received mockFlags or flagOverrides, now instantiating flags-js factory and clients')
      localMockFlags = mockFlags
      localFlagOverrides = flagOverrides
      flagsReadyResolve(
        featureFlagFactory(
          mockFlags ? () => Promise.resolve(mockFlags) : undefined,
          undefined,
          mockFlags,
          flagOverrides
        ).then(({ getFeatureFlag: realGetFeatureFlag, getFeatureFlags: realGetFeatureFlags }) => {
          getFeatureFlag = realGetFeatureFlag
          getFeatureFlags = realGetFeatureFlags
          debug(
            'flagsAreReady: true, flags-js factory and clients are now initialized',
            getFeatureFlag,
            getFeatureFlags
          )
        })
      )
    } else {
      debug('flagsAreReady: waiting to receive mockFlags or flagOverrides ...')
    }
  }

  return flagsReadyPromise
}

function preInitializedGetFeatureFlag(flagName: string): FeatureFlag<Flag<string>> {
  console.error(
    `zion-flags Warning: Attempted to getFeatureFlag ${flagName} before a connection was established with splitio.
    Returning the control treatment, but you should make sure you are using getFeatureFlag inside of a render`
  )

  return controlFeatureFlag
}

function preInitializedGetFeatureFlags(flagNames: string[]): FeatureFlags<Flags> {
  console.error(
    `zion-flags Warning: Attempted to getFeatureFlags [${flagNames.join(
      ', '
    )}] before a connection was established with splitio.
    Returning the control treatment, but you should make sure you are using getFeatureFlags inside of a render`
  )

  return flagNames.reduce((acc, flagName) => {
    acc[flagName] = controlFeatureFlag
    return acc
  }, {})
}
