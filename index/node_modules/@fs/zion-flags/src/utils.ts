import type { Flags, FeatureFlags } from './model'

export function toSplitIOFeatures(flags: Flags | undefined): SplitIO.MockedFeaturesMap | undefined {
  if (!flags) return undefined
  return Object.entries(flags).reduce((acc, [feature, data]) => {
    acc[feature] = {
      treatment: data.treatment,
      config: data.config ? JSON.stringify(data.config) : null,
    }
    return acc
  }, {} as SplitIO.MockedFeaturesMap)
}

export function toFlags(features: SplitIO.TreatmentsWithConfig | undefined): Flags | undefined {
  if (!features) return undefined
  return Object.entries(features).reduce((acc, [feature, data]) => {
    acc[feature] = {
      treatment: data.treatment,
      config: data.config && JSON.parse(data.config),
    }
    return acc
  }, {} as Flags)
}

export function toFeatureFlags<T extends Flags>(flags: Flags): FeatureFlags<T> {
  return Object.entries(flags).reduce((acc, [feature, data]) => {
    if (process.env.NODE_ENV === 'development') {
      if (data.treatment === 'true' || data.treatment === 'false') {
        console.error(`WARNING: Treatment value of ${data.treatment} is discouraged.`)
      }
    }
    // I can't figure out how to type the following line. Using 'any' for now. (note from Robert Gardner)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ;(acc as any)[feature] = {
      treatment: data.treatment,
      config: data.config,
      isOn: !/^(off|control)$/i.test(data.treatment),
      isControl: /^control$/i.test(data.treatment),
    }
    return acc
  }, {} as FeatureFlags<T>)
}
