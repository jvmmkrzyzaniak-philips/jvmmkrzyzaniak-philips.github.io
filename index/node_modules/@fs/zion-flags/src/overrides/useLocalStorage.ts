import { useEffect, useState } from 'react'

const hasWindow = typeof window !== 'undefined'
const hasLocalStorage = typeof localStorage !== 'undefined' && localStorage !== null

export default function useLocalStorage<T>(key: string, initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = hasLocalStorage && localStorage.getItem(key)
      return item ? JSON.parse(item) : initialValue
    } catch (error) {
      console.error(error)
      return initialValue
    }
  })

  useEffect(() => {
    if (!hasWindow || !hasLocalStorage) return undefined
    function handler(e: StorageEvent): void {
      if (e.storageArea === localStorage && e.key === key) {
        if (e.newValue) {
          setStoredValue(JSON.parse(e.newValue))
        } else {
          setStoredValue(initialValue)
        }
      }
    }
    window.addEventListener('storage', handler)
    return () => window.removeEventListener('storage', handler)
  })

  useEffect(() => {
    if (!hasLocalStorage) return
    try {
      localStorage.setItem(key, JSON.stringify(storedValue))
    } catch (error) {
      console.error(`Failed to store value for ${key} in localStorage`, error)
    }
  }, [key, storedValue])

  return [storedValue, setStoredValue]
}
