import zionDebug from '@fs/zion-debug'
import Cookies from 'js-cookie'
import useLocalStorage from './useLocalStorage'
import type { FlagOverrideHandlers } from './FlagOverrides'
import type { Flag, Flags } from '../model'

const debug = zionDebug('zion:flags:overrides')

type LocalStorageFlagsHook = {
  localStorageFlags: Flags
  localStorageFlagHandlers: FlagOverrideHandlers
}
export default function useLocalStorageFlags(): LocalStorageFlagsHook {
  const [localStorageFlags, setLocalStorageFlags] = useLocalStorage<Flags>('fsZionFlags', {})
  debug('useLocalStorageFlags', localStorageFlags)
  const remove = (name: string): void => {
    debug('Remove localStorage flag', name)

    // temporary feature to get this specific flag to snow so override UI can affect some code in snow
    // will likely make a more generic cookie override system in the future
    if (name === 'shared_addLangCodeToUrl') {
      Cookies.remove('urlLangFlag')
    }

    setLocalStorageFlags((current: Flags) => {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars -- ignoring the removed key to remove it.
      const { [name]: ignored, ...rest } = current
      return rest || {}
    })
  }

  const removeAll = (): void => {
    debug('Remove all localStorage flags')

    // temporary feature to get this specific flag to snow so override UI can affect some code in snow
    // will likely make a more generic cookie override system in the future
    Cookies.remove('urlLangFlag')

    setLocalStorageFlags({})
  }

  const add = (name: string, override: Flag<unknown>): void => {
    debug('Add localStorage flag', name, override)

    // temporary feature to get this specific flag to snow so override UI can affect some code in snow
    // will likely make a more generic cookie override system in the future
    if (name === 'shared_addLangCodeToUrl') {
      Cookies.set('urlLangFlag', override.treatment === 'on' ? 'true' : 'false')
    }

    setLocalStorageFlags((current: Flags) => {
      return { ...current, [name]: override }
    })
  }
  return { localStorageFlags, localStorageFlagHandlers: { add, remove, removeAll } }
}
