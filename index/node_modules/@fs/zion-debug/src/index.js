import setup from 'debug'

const debug = setup('fs')
const verbose = setup('fsverbose')

// Check for localStorage (which is null in some Android WebViews) to prevent
// crashing pages that are embedded in the mobile app.
const hasLocalStorage = typeof localStorage !== 'undefined' && localStorage !== null

// If localStorage is not available, debugging canâ€™t be enabled, so a no-op is fine
const noOp = () => {}

export default function zionDebug(namespace) {
  if (!namespace) throw new Error('No namespace defined.')
  if (!hasLocalStorage) return noOp

  return debug.extend(namespace)
}

export function debugVerbose(namespace) {
  if (!namespace) throw new Error('No namespace defined.')
  if (!hasLocalStorage) return noOp

  return verbose.extend(namespace)
}

/**
 * A function which is 'smart' enough to not fail jest unit tests when logging a deprecation warning
 *
 * @param args - all arguments will be passed directly to console.warn or console.warnNoMask
 */
export function printDeprecationWarning(...args) {
  /* eslint-disable-next-line no-console */
  const printWarning = console.logNoMask || console.warn

  printWarning(...args)
}

export { setup as debugConfig }
