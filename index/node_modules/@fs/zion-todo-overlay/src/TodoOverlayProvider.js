import React, { createContext, useContext, useState, useCallback, lazy, Suspense, useMemo } from 'react'
import { useOverlay } from '@fs/zion-ui'

const TodoOverlay = lazy(() => import('./TodoOverlay'))

export const TodoOverlayContext = createContext()
export const useTodoOverlay = (newAnchor) => {
  const { overlay, setAnchor } = useContext(TodoOverlayContext)

  const handleToggleTodoOverlay = useCallback(
    (event) => {
      if (event?.detail?.anchor) {
        setAnchor(event?.detail?.anchor)
      } else {
        setAnchor(newAnchor)
      }
      overlay.handleClick(event?.detail?.event || event)
    },
    [overlay, setAnchor, newAnchor]
  )

  return { ...overlay, handleClick: handleToggleTodoOverlay }
}

export default function TodoOverlayProvider({ children }) {
  const overlay = useOverlay()
  const [anchor, setAnchor] = useState(false)
  const value = useMemo(() => ({ overlay, anchor, setAnchor }), [anchor, overlay])
  return (
    <TodoOverlayContext.Provider value={value}>
      {children}
      <Suspense fallback="">
        {(overlay.isOpen || overlay.transitioning) && <TodoOverlay anchor={anchor} {...overlay} />}
      </Suspense>
    </TodoOverlayContext.Provider>
  )
}

export function useTodoOverlayContext() {
  return useContext(TodoOverlayContext)
}
