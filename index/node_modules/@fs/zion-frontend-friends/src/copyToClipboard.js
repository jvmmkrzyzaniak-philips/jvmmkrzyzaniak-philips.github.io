import { isFirefox } from './isUsingBrowser'

const hasWindow = typeof window !== 'undefined'
const hasDocument = typeof document !== 'undefined'
const hasNavigator = typeof navigator !== 'undefined'

export function copyToClipboard(content, mimeType = 'text/plain', successHandler = () => {}, errorHandler = () => {}) {
  if (!hasNavigator || !hasDocument || !hasWindow) return

  if (mimeType === 'text/plain') {
    // Navigator's `writeText` is supported on all major browsers.
    navigator.clipboard.writeText(content).then(successHandler, errorHandler)
  } else {
    copyToClipboardMulti([{ content, mimeType }], successHandler, errorHandler)
  }
}

// See spec for list of (supported? semi-supported?) mime types: https://w3c.github.io/clipboard-apis/#mandatory-data-types-x

export function copyToClipboardMulti(items, successHandler = () => {}, errorHandler = () => {}) {
  if (!hasNavigator || !hasDocument || !hasWindow) return

  if (!isFirefox) {
    // Navigator's `write` supports other types of mimeTypes, but requires ClipboardItem which isn't supported by Firefox yet. Some mimeTypes may not work in Safari either.
    // (https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem#Browser_compatibility)
    const formats = items.reduce((acc, { content, mimeType = 'text/plain' }) => {
      acc[mimeType] = new Blob([content], { type: mimeType })
      return acc
    }, {})
    // first, try the newer navigator.clipboard - but if it fails, try the older way before giving up completely
    navigator.clipboard
      .write([new window.ClipboardItem(formats)])
      .then(successHandler, () => olderCopyToClipboardMulti(items, successHandler, errorHandler))
  } else {
    olderCopyToClipboardMulti(items, successHandler, errorHandler)
  }
}

/**
 * Works for all browsers except for Safari.
 * However, `execCommand(...)` is deprecated/obsolete.
 * (https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand)
 * We don't support callbacks in this situation.
 * @param items
 * @param successHandler
 * @param errorHandler
 */
function olderCopyToClipboardMulti(items, successHandler = () => {}, errorHandler = () => {}) {
  const copyEvent = 'copy'
  const listener = (ev) => {
    ev.preventDefault()
    items.forEach(({ content, mimeType = 'text/plain' }) => {
      ev.clipboardData.setData(mimeType, content)
    })
  }
  document.addEventListener(copyEvent, listener)
  const succeeded = document.execCommand(copyEvent)
  document.removeEventListener(copyEvent, listener)
  if (succeeded) {
    successHandler()
  } else {
    errorHandler()
  }
}
