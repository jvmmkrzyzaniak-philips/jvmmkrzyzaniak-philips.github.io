/**
 * @function deprecatedPropType Custom PropType Checker for deprecated values
 * @param {string} msg the message to display in the console
 *
 * @example PersonBlock.propTypes = {
 *   children: deprecated('PersonBlock: `children` prop has been deprecated. Please use `details` instead'),
 * }
 */
export function deprecatedPropType(msg) {
  return (props, prop) => (props[prop] ? new Error(msg) : null)
}

/**
 * @function oneOfComponentType Custom PropType Checker for white-listing components
 * @param {func[]} components Array of component functions that are allowed for the prop
 *
 * @example List.propTypes = {
 *   children: oneOfComponentType([ListItem, ListSubSection, List])
 * }
 */
export function oneOfComponentType(components = []) {
  return (props, propName, componentName) =>
    components.includes(props[propName]?.type) || !props[propName]
      ? null
      : new Error(
          `Invalid prop value: "${propName}" on ${componentName} is not one of the approved components that can be used for this prop. You provided: ${props[propName].type}`
        )
}
