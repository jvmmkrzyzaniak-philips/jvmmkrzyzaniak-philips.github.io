import type { RefObject, ForwardedRef, MutableRefObject } from 'react'
import { useRef, useImperativeHandle } from 'react'

/**
 * Creates a ref, similar to useRef, that is tied to a forwarded ref
 *
 * When using React.forwardRef, the ref provided by the consumer may
 * or may not be in use. If the consumer didn't `ref={someRef}`, then
 * you won't have a ref to work with. If you need to ensure that a ref
 * always exists, you should create your own ref. But if a consumer also
 * sometimes wants access to that same ref, the two can't coexist.
 *
 * This function will give you a ref that is bound to the sometimes-
 * provided ref from the consumer.
 *
 * @param {React.ForwardedRef} ref The ref provided from React.ForwardRef
 * @returns {React.MutableRefObject} The ref you should use.
 */
const useForwardRef = <T>(ref: ForwardedRef<T>): null extends T ? MutableRefObject<T | null> : RefObject<T> => {
  const newRef = useRef<T | null>(null)
  useImperativeHandle<T | null, T | null>(ref, () => newRef.current)
  return newRef
}

export default useForwardRef
