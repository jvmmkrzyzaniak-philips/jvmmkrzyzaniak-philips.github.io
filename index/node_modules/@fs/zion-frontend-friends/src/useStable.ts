import type { MutableRefObject } from 'react'
import { useCallback, useLayoutEffect, useRef } from 'react'

export function useSyncedRef<T>(item: T): MutableRefObject<T> {
  const ref = useRef(item)

  useLayoutEffect(() => {
    ref.current = item
  }, [item])

  return ref
}

export function useEvent<F extends (...args: Parameters<F>) => ReturnType<F>>(cb?: F): F {
  const cbRef = useSyncedRef(cb)
  const result = useCallback((...args: Parameters<F>) => cbRef.current?.(...args), [cbRef])

  return result as F
}
