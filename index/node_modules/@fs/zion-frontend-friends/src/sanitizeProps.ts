// disabling no explicit any in this file because sanitizeProps needs to handle any props
/* eslint-disable @typescript-eslint/no-explicit-any */
type Sanitizer = (props: Record<string, any> | undefined) => Record<string, any> | undefined

export const defaultPropsBlackList = [
  {
    prop: /^style$/,
    message: `This component does not allow \`style\` props.`,
  },
  {
    prop: /^className$/,
    message: `This component does not allow \`css\` or \`className\` props.`,
  },
]

// we write the function definition this way because webpack will compile things out nicely for us
// when we have a production build
let sanitize: Sanitizer = (props) => props

// DO NOT MODIFY THIS IF STATEMENT UNLESS YOU REALLY KNOW WHAT YOU ARE DOING
if (process.env.NODE_ENV !== 'production') {
  sanitize = (props: Record<string, any> = {}, blackList = defaultPropsBlackList): Record<string, any> => {
    const forwardProps: Record<string, any> = {}

    Object.entries(props).forEach(([key, value]) => {
      if (!blackList.reduce((a, c) => a || c.prop.test(key), false)) {
        forwardProps[key] = value
      } else {
        const prop = blackList.find((blackProp) => {
          return blackProp.prop.test(key)
        })
        if (prop?.message) {
          throw new Error(prop.message)
        } else {
          throw new Error(
            `Illegal property \`${key}\` (with value \`${value}\`) was passed to a component (see stack trace). Please remove the \`${key}\` prop.`
          )
        }
      }
    })

    return forwardProps
  }
}

/**
 * @function pass Safely pass React element properties down to your lower level DOM elements
 * @param {Object} props React element properties
 * @param {RegExp[]} [blackList] list of Regular Expressions that will black list the passed down props
 *
 * @example const MyComponent = (props) => <MyComponent {...pass(props)}/>
 */
export const sanitizeProps = sanitize
