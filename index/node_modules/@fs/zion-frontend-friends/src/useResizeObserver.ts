import type { RefObject } from 'react'
import { useEffect } from 'react'
import { useEvent } from './useStable'

export type ResizeListener = (entry: ResizeObserverEntry) => void

// Allowing multiple listeners for any given dom node.
const resizeRegistry = new Map<Element, ResizeListener[]>()

const callAllCallbacks = (entries: ResizeObserverEntry[]): void =>
  entries.forEach((entry) => resizeRegistry.get(entry.target)?.forEach((callback) => callback(entry)))

let resizeObserver: ResizeObserver

/**
 * Observes the size of a DOMNode and fires a callback function when the node is resized
 *
 * @param ref The ref of the DOMNode whose size will be observed
 * @param resizeCallback The callback to run when the DOMNode resizes
 * @param enabled - True by default. Tells the observer when the ref is ready to be observed. If the ref is ever attached to an unmounted component, this prop must be false while the component is unmounted or else useResizeObserver will never begin observing the component when it mounts again.
 */
export default function useResizeObserver(
  ref: RefObject<HTMLElement>,
  resizeCallback: ResizeListener,
  enabled = true
): void {
  if (!resizeObserver && typeof ResizeObserver !== 'undefined') {
    resizeObserver = new ResizeObserver(callAllCallbacks)
  }

  const handleResize = useEvent<ResizeListener>((...args) => ref.current && resizeCallback(...args))

  useEffect(() => {
    const { current } = ref

    if (!enabled || !resizeObserver || !current) return undefined

    resizeObserver.observe(current)

    let callbacks = resizeRegistry.get(current)

    // May need to initialize the registry spot with an empty array
    if (!callbacks) {
      callbacks = []
      resizeRegistry.set(current, callbacks)
    }

    // Finally, add the callback to the array of callbacks
    callbacks.push(handleResize)

    return () => {
      // Throw away the provided callback, keep any others that might exist
      const newCallbacks = resizeRegistry.get(current)?.filter((cb) => cb !== handleResize)

      // Update the registry with the new list, or just unobserve if there are no other callbacks
      if (newCallbacks?.length) {
        resizeRegistry.set(current, newCallbacks)
      } else {
        resizeObserver.unobserve(current)
        resizeRegistry.delete(current)
      }
    }
  }, [ref, handleResize, enabled])
}
