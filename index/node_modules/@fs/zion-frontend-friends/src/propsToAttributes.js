export default function propsToAttributes(propsToReflect, props) {
  if (!props || !propsToReflect || !propsToReflect.length) return {}
  const reflectedProps = {}
  // change this to a map
  propsToReflect.forEach((propName) => {
    let prop = props[propName]
    if (propName.split('.').length > 1) {
      // we must get the inner part of the object - use the last piece as the key
      const propStructure = propName.split('.')
      prop = propStructure.reduce((prop, key) => (prop ? prop[key] : undefined), props) // eslint-disable-line no-shadow
      // reassign propName to reflect to be the key without dots in it (e.g. person.gender becomes persongender)
      propName = propStructure.join('-')
    }
    // booleans must be converted to a string or undefined to show/hide correctly
    if (prop === true) {
      prop = ''
    } else if (prop === false) {
      prop = undefined
    }

    // stringify object type properties so that they show up more accurately rather than just [object Object] or [object Array] etc.
    if (typeof prop === 'object') {
      prop = JSON.stringify(prop)
    }

    reflectedProps[propName.toLowerCase()] = prop
  })
  return reflectedProps
}
