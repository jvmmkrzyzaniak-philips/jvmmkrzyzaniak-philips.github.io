import { trackEvent } from '@fs/zion-analytics'
import { splunk } from '@fs/zion-splunk-logger'
import { isTranslationAvailable } from '@fs/zion-locale'
import type { Score, AsyncScore } from '../types/scores'

const chipInfoMapOld = {
  low: {
    textKey: 'person-quality-score-issues.low.action',
    color: 'yellow' as const,
    descriptionKey: 'person-quality-score-issues.low-description.label',
  },
  medium: {
    textKey: 'person-quality-score-issues.medium.action',
    color: 'blue' as const,
    descriptionKey: 'person-quality-score-issues.medium-description.label',
  },
  high: {
    textKey: 'person-quality-score-issues.high.action',
    color: 'green' as const,
    descriptionKey: 'person-quality-score-issues.high-description.label',
  },
  notAvailable: {
    textKey: 'person-quality-score-issues.not-available-description.label',
    color: 'gray' as const,
    descriptionKey: 'person-quality-score-issues.not-available-description.label',
  },
}

const chipInfoMapWithNumbersOld = {
  low: {
    ...chipInfoMapOld.low,
    textKey: 'person-quality-score-issues.low-with-number.label',
  },
  medium: {
    ...chipInfoMapOld.medium,
    textKey: 'person-quality-score-issues.medium-with-number.label',
  },
  high: {
    ...chipInfoMapOld.high,
    textKey: 'person-quality-score-issues.high-with-number.label',
  },
  notAvailable: {
    ...chipInfoMapOld.notAvailable,
  },
}

const chipInfoMapVerboseOld = {
  low: {
    ...chipInfoMapOld.low,
    textKey: 'person-quality-score-issues.low-verbose.label',
  },
  medium: {
    ...chipInfoMapOld.medium,
    textKey: 'person-quality-score-issues.medium-verbose.label',
  },
  high: {
    ...chipInfoMapOld.high,
    textKey: 'person-quality-score-issues.high-verbose.label',
  },
  notAvailable: {
    ...chipInfoMapOld.notAvailable,
  },
}

// New Maps with the new Translation Key for the description.  We can delete the old ones when translation are back.
const learnMoreDescriptionKey = 'person-quality-score-issues.learn-more.description'
const chipInfoMap = {
  low: {
    ...chipInfoMapOld.low,
    descriptionKey: learnMoreDescriptionKey,
  },
  medium: {
    ...chipInfoMapOld.medium,
    descriptionKey: learnMoreDescriptionKey,
  },
  high: {
    ...chipInfoMapOld.high,
    descriptionKey: learnMoreDescriptionKey,
  },
  notAvailable: {
    ...chipInfoMapOld.notAvailable,
    descriptionKey: learnMoreDescriptionKey,
  },
}

const chipInfoMapWithNumbers = {
  low: {
    ...chipInfoMap.low,
    textKey: 'person-quality-score-issues.low-with-number.label',
  },
  medium: {
    ...chipInfoMap.medium,
    textKey: 'person-quality-score-issues.medium-with-number.label',
  },
  high: {
    ...chipInfoMap.high,
    textKey: 'person-quality-score-issues.high-with-number.label',
  },
  notAvailable: {
    ...chipInfoMap.notAvailable,
  },
}

const chipInfoMapVerbose = {
  low: {
    ...chipInfoMap.low,
    textKey: 'person-quality-score-issues.low-verbose.label',
  },
  medium: {
    ...chipInfoMap.medium,
    textKey: 'person-quality-score-issues.medium-verbose.label',
  },
  high: {
    ...chipInfoMap.high,
    textKey: 'person-quality-score-issues.high-verbose.label',
  },
  notAvailable: {
    ...chipInfoMap.notAvailable,
  },
}

export function getChipInfo(
  overallDisplayScore?: number,
  textOptions?: 'withNumber' | 'verbose'
): (typeof chipInfoMap)[keyof typeof chipInfoMap] {
  const islearnMoreDescriptionKeyAvailable = isTranslationAvailable(
    'person-quality-score-issues.learn-more.description'
  )
  let map = learnMoreDescriptionKey ? chipInfoMap : chipInfoMapOld

  if (textOptions === 'verbose') {
    map = islearnMoreDescriptionKeyAvailable ? chipInfoMapVerbose : chipInfoMapVerboseOld
  }
  if (textOptions === 'withNumber') {
    map = islearnMoreDescriptionKeyAvailable ? chipInfoMapWithNumbers : chipInfoMapWithNumbersOld
  }

  if (overallDisplayScore === undefined) return map.notAvailable
  if (overallDisplayScore >= 0.85) return map.high
  if (overallDisplayScore >= 0.31) return map.medium
  return map.low
}

export const categoryHeadings = {
  COMPLETENESS: { headingKey: 'person-quality-score-issues.completeness.label' },
  VERIFIABILITY: { headingKey: 'person-quality-score-issues.verifiability.label' },
  CONSISTENCY: { headingKey: 'person-quality-score-issues.consistency.label' },
  COHERENCE: { headingKey: 'person-quality-score-issues.coherence.label' },
}

export const getRatings = (score: Score) =>
  [
    {
      titleKey: 'person-quality-score-issues.completeness.title',
      labelKey: categoryHeadings.COMPLETENESS.headingKey,
      scoreCategory: score.completenessScore,
    },
    {
      titleKey: 'person-quality-score-issues.verifiability.title',
      labelKey: categoryHeadings.VERIFIABILITY.headingKey,
      scoreCategory: score.verifiabilityScore,
    },
    {
      titleKey: 'person-quality-score-issues.consistency.title',
      labelKey: categoryHeadings.CONSISTENCY.headingKey,
      scoreCategory: score.consistencyScore,
    },
    {
      titleKey: 'person-quality-score-issues.coherence.title',
      labelKey: categoryHeadings.COHERENCE.headingKey,
      scoreCategory: score.coherenceScore,
    },
  ] as const

export const pqsTrackEvent = (
  eventObject: {
    link_name: string
    pid_ids?: string[]
    quality_score: number
    quality_score_color: 'gray' | 'yellow' | 'blue' | 'green'
  },
  score_object?: Score
): void => {
  if ((eventObject.quality_score === 0 || !!eventObject.quality_score) && !!eventObject.quality_score_color) {
    trackEvent({
      ...eventObject,
    })
  } else {
    splunk.log({
      name: 'Quality Score Undefined',
      score_object,
    })
  }
}

export const trackScore = (score: AsyncScore, eventLinkName: string): void => {
  const { color } =
    'personScores' in score ? getChipInfo(score.personScores.overallDisplayScore) : { color: 'gray' as const }

  const { pid_ids, quality_score } =
    'personScores' in score
      ? { pid_ids: [score.personScores.pid], quality_score: score.personScores.overallDisplayScore }
      : {
          pid_ids: undefined,
          quality_score: 0,
        }

  pqsTrackEvent(
    {
      link_name: eventLinkName,
      pid_ids,
      quality_score,
      quality_score_color: color,
    },
    'personScores' in score ? score.personScores : undefined
  )
}
