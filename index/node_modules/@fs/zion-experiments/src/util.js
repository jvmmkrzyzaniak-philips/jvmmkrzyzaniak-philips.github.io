/* eslint-disable */
import zionDebug from '@fs/zion-debug'

const debug = zionDebug('zion:experiments:util')

export function deserializeExperiments(cookie, templates, appName) {
  if (!(typeof cookie === 'string' && cookie.length)) return

  if (cookie.indexOf('u=') === -1) return {}

  debug('deserializeExperiments cookie: ', cookie)
  debug('deserializeExperiments templates: ', templates)
  debug('deserializeExperiments appName: ', appName)

  const userId = cookie.match(/u=[^,]+/)[0].replace('u=', '')
  const apps = cookie.split('&')
  const exps = { userId }
  const appData = (exps.apps = {})

  const setFeatures = (app, template) => {
    if (!template) return
    const features = (app.features = {})
    const values = app.values
    const dirty = (app.dirtyFeatures = [])
    const names = Object.keys(template)

    names.map((name, idx) => {
      const value = values[idx] === '1'
      const origValue = !!template[name]

      features[name] = value
    })
  }

  apps.map(item => {
    let app
    try {
      const name = item.match(/a=[^,]+/)[0].replace('a=', '')

      app = appData[name] = {}

      if (name !== 'shared-ui' && name !== appName) {
        appData[name] = item
        return
      }

      app.stamp = item.match(/s=[^,]+/)[0].replace('s=', '')
      app.values = item.match(/v=[^,]+/)[0].replace('v=', '')
      setFeatures(app, (templates[name] || {}).features)
      delete app.values
      app.bucket = item.match(/b=[^,]+/)[0].replace('b=', '')
      return app
    } catch (e) {
      console.error('Old Experiment is bad')
    }
  })
  debug('deserialized data: ', exps)

  return exps
}

export function serializeExperiments(exps) {
  const userid = exps.userId
  const contents = []
  const expApps = exps.apps || {}
  const expAppKeys = Object.keys(expApps)

  debug('serializeExperiments exps', exps)
  debug('serializeExperiments userid', userid)
  debug('serializeExperiments experiments: ', expApps)

  function serialize(appExps, appName) {
    // Not re-serializing other-app experiments
    if (typeof appExps === 'string') return appExps

    const parts = [`a=${appName || ''}`]
    const features = appExps.features || {}
    const featureKeys = Object.keys(features)

    parts.push(`s=${appExps.stamp}`)
    let values = ''

    for (let i = 0; i < featureKeys.length; i++) {
      values += features[featureKeys[i]] ? '1' : '0'
    }
    parts.push(`v=${values}`)
    parts.push(`b=${appExps.bucket}`)
    return parts
  }

  if (exps.apps) {
    for (let i = 0; i < expAppKeys.length; i++) {
      contents.push(serialize(expApps[expAppKeys[i]], expAppKeys[i]))
    }
  } else {
    contents.push(serialize(exps))
  }

  const serialized = `u=${userid},${contents.join('&')}`
  debug('serialized: ', serialized)

  return serialized
}
