import zionDebug from '@fs/zion-debug'
import { appName, initialDefaultEx } from '@fs/zion-config'
import { getExperimentsFromCookie, setExperimentsCookie, clearExperimentsCookie } from '../cookie'

const debug = zionDebug('zion:experiments:core')
const SHARED_KEY = 'shared-ui'
const ALL_EXPERIMENTS = { apps: {} }
let sharedExs = {}
let localExs = {}
const expsTemplate = initialDefaultEx || undefined
const userId = expsTemplate && expsTemplate.userId

export function initEx() {
  ALL_EXPERIMENTS.apps = getExperimentsFromCookie(expsTemplate, ALL_EXPERIMENTS)
  localExs = ALL_EXPERIMENTS.apps[appName] || (ALL_EXPERIMENTS.apps[appName] = {})
  sharedExs = ALL_EXPERIMENTS.apps[SHARED_KEY] || (ALL_EXPERIMENTS.apps[SHARED_KEY] = {})

  if (Object.keys(localExs).length === 0) {
    localExs.features = {}
  }
  if (Object.keys(sharedExs).length === 0) {
    sharedExs.features = {}
  }
  debug('Experiments initialized')
  debug(ALL_EXPERIMENTS)
}

/**
 * Get list of experiments for passed param.
 * @param  {string} list - Either 'local' or 'shared'.
 * @return {array}       - List of experiments names and values.
 */
export function getExperimentList(list) {
  const exps = list === 'local' ? appName : SHARED_KEY
  return ALL_EXPERIMENTS.apps[exps].features
}

export function resetExperiments() {
  clearExperimentsCookie()
  typeof window !== 'undefined' && window.location.reload()
}

// I don't know if we need/use this function
// export function activeList() {
//   const active = []
//   let name
//   for (name in localExs.features) {
//     if (FS.showEx(name)) {
//       active.push(name)
//     }
//   }
//   for (name in sharedExs.features) {
//     if (FS.showEx(name)) {
//       active.push(name)
//     }
//   }
//   return active
// }

export function setEx(name, value) {
  debug('setEX', name, value)
  value = value ? 1 : 0
  const apps = ALL_EXPERIMENTS.apps
  let obj = apps[appName].features || (apps[appName].features = {})
  let sharedObj = apps[SHARED_KEY].features || (apps[SHARED_KEY].features = {})
  const toks = name.split('#')

  if (toks.length === 2) {
    if (sharedObj[toks[0]] !== undefined) {
      // eslint-disable-next-line no-multi-assign
      sharedObj = sharedObj[toks[0]] = sharedObj[toks[0]] || {}
    } else {
      // eslint-disable-next-line no-multi-assign
      obj = obj[toks[0]] = obj[toks[0]] || {}
    }

    name = toks[1]
  }

  // both the shared and app experiments must be in sync, otherwise, if an experiment
  // is in both lists you'll never be able to change it from listEx() or setEx()
  if (sharedObj[name] !== undefined) {
    // shared experiment
    sharedObj[name] = value
    if (sharedExs.dirtyFeatures && sharedExs.dirtyFeatures.join(' ').indexOf(toks[0]) === -1) {
      // add feature name to dirtyFeature array if it's not already there
      sharedExs.dirtyFeatures.push(toks[0])
    }
  }

  // unit tests do not populate the experiment object so we need to allow them to
  // dynamically set any experiment name. This prevents dynamically setting an
  // experiment in the app list if it already exists in the shared list
  if (obj[name] !== undefined || sharedObj[name] === undefined) {
    // app experiment
    obj[name] = value
    if (localExs.dirtyFeatures && localExs.dirtyFeatures.join(' ').indexOf(toks[0]) === -1) {
      // add feature name to dirtyFeature array if it's not already there
      localExs.dirtyFeatures.push(toks[0])
    }
  }

  setExperimentsCookie(ALL_EXPERIMENTS, userId)
}

export function showEx(name, defaultValue) {
  if (name === null || name.length === 0) {
    return true
  }

  if (defaultValue === undefined) {
    defaultValue = false
  }

  let obj = localExs.features || (localExs.features = {})
  let sharedObj = sharedExs.features || (sharedExs.features = {})
  const toks = name.split('#')
  let appResult = false
  let sharedResult = false

  if (toks.length === 2) {
    if (sharedObj[toks[0]] !== undefined) {
      // eslint-disable-next-line no-multi-assign
      sharedObj = sharedObj[toks[0]] = sharedObj[toks[0]] || {}
    } else {
      // eslint-disable-next-line no-multi-assign
      obj = obj[toks[0]] = obj[toks[0]] || {}
    }
    name = toks[1]
  }

  if (obj[name] === undefined && sharedObj[name] === undefined) {
    return defaultValue
  }

  appResult = !!obj[name] // TODO: This will need to change to return variant names
  sharedResult = !!sharedObj[name] // TODO: This will need to change to return variant names

  if (appResult) {
    return appResult
  }
  return sharedResult
}
