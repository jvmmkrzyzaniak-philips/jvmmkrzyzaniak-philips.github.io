// WARNING: DO NOT IMPORT FROM ZION-UI AT ALL IN THIS FILE
// It creates a circular dependency
// If you need something from zion-ui, make sure it is done in the experiments.js file, it is okay to use it there because it is lazy loaded
import React, { lazy, useEffect, Suspense, useState } from 'react'
import { NoticeLoading } from '@fs/zion-icon'
import { showEx, setEx } from './core'

const Experiments = lazy(() => import('./Experiments'))

const hasWindow = typeof window !== 'undefined'
/* eslint-disable-next-line no-underscore-dangle */
const _window = hasWindow ? window : {}

export default function ExperimentsLoader() {
  const [isOpen, setIsOpen] = useState(false)

  useEffect(() => {
    if (hasWindow) {
      const url = _window.location.href
      const listEx = new URL(url).searchParams.get('listEx')
      if (listEx || listEx === '') {
        setIsOpen(true)
      }
    }

    // For some reason, if all of this is not in a useEffect, it doesn't update state locally
    _window.FS = _window.FS || {}
    if (!_window.FS.listEx) _window.FS.listEx = () => setIsOpen(true)
    if (!_window.FS.showEx) _window.FS.showEx = showEx
    if (!_window.FS.setEx) _window.FS.setEx = setEx

    // NO ONE SHOULD BE USING THE FS OBJECT AS A GRAB BAG!
    Object.freeze(_window.FS)
  }, [])

  return <Suspense fallback={<NoticeLoading />}>{isOpen && <Experiments initiallyOpen />}</Suspense>
}
