import { geoData, splitioAuthKey, appName, baseUrl } from '@fs/zion-config'
import { debugVerbose } from '@fs/zion-debug'

import agnosticFeatureFlagFactory, { handleAndGetAnonIdCookie } from './featureFlagFactory'
import { createAnonymousKey } from './utils'
import { getSessionId, validUserSessionOrError } from './session'

export { controlFeatureFlag } from './featureFlagFactory'

const debug = debugVerbose('flags-js:react')

let factoryPromise
export async function featureFlagFactory(
  getAttributes = getStandardAttributes,
  authKey = splitioAuthKey,
  mockFlags = undefined,
  flagOverrides = undefined
) {
  debug('featureFlagFactory promise:', factoryPromise)
  if (factoryPromise) return factoryPromise
  factoryPromise = agnosticFeatureFlagFactory(getAttributes, authKey, mockFlags, flagOverrides)
  return factoryPromise
}

export async function getStandardAttributes() {
  const { i18n } = await import('@fs/zion-locale')
  let attrs = { appName, locale: i18n.language, country: (geoData && geoData.country) || undefined }
  debug('standard attributes before fetchUser:', attrs)

  try {
    const anonIdCookie = handleAndGetAnonIdCookie()
    // Anonymous key
    attrs.anonId = createAnonymousKey(anonIdCookie)
    debug('anonId:', attrs.anonId)
    try {
      const { id: cisId, contactName, gender } = await fetchUser()
      debug('fetchUser result:', cisId, contactName, gender)
      attrs = { ...attrs, cisId, contactName, gender, isSignedIn: !!cisId }
    } catch (err) {
      // Not logged in?
    }
  } catch (err) {
    console.error('getStandardAttributes failed:', err)
  }
  return attrs
}
async function fetchUser() {
  validUserSessionOrError()

  let url = '/service/tree/ftuser/users/CURRENT'
  if (appName === 'hf-inj-react') url = baseUrl + url
  
  const sessionId = getSessionId()

  const response = await fetch(url, {
    headers: {
      Authorization: `Bearer ${sessionId}`,
      'FS-User-Agent-Chain': `@fs/flags-js`,
      Accept: 'application/json',
    },
  })
  const user = await response.json()
  return user
}
