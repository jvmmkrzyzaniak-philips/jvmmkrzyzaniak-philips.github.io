import sha1 from 'tiny-hashes/sha1'

export const HASH_BUCKETS = 10000

export function toFeatureFlag({ treatment, config } = {}) {
  return {
    treatment,
    config: parseConfig(config),
    isOn: !/^(off|control)$/i.test(treatment),
    isControl: /^control$/i.test(treatment),
  }
}

function parseConfig(config) {
  try {
    return config && typeof config === 'string' ? JSON.parse(config) : config || null
  } catch (e) {
    return config || null
  }
}

export function createAnonymousKey(anonIdCookie) {
  return `A_${hasher(anonIdCookie, HASH_BUCKETS)}`
}

// used when we take a mockFlags object. We need to convert the config into a json string
export function toSplitIOFeatures(flags) {
  if (!flags) return undefined
  return Object.entries(flags).reduce((acc, [feature, data]) => {
    acc[feature] = {
      treatment: typeof data === 'string' ? data : data?.treatment,
      config: data?.config ? JSON.stringify(data.config) : null,
    }
    return acc
  }, {})
}

export function toFlags(features) {
  if (!features) return undefined
  return Object.entries(features).reduce((acc, [feature, data]) => {
    acc[feature] = {
      treatment: data.treatment,
      config: (data.config && JSON.parse(data.config)) || null,
    }
    return acc
  }, {})
}

/*
 * The `hash-index` function brings in node's crypto, which brings in a ton of stuff, bloating the bundle size by around 170kb
 * Since this isn't a security important hash, we're just going to use tiny-hashes's sha1
 * hash-index used sha1 and did the weird buffer UInt16 and UInt32 stuff, so I kept that similar
 * Modified to not need node.js Buffer since Webpack no longer polyfills that, and replaced with DataView which is similar
 *
 * */

function hexToBytes(hex) {
  const data = new DataView(new ArrayBuffer(hex.length / 2))
  for (let c = 0; c < hex.length; c += 2) data.setUint8(c / 2, parseInt(hex.substring(c, c + 2), 16))
  return data
}

export function hasher(input, max = HASH_BUCKETS) {
  const hash = sha1(input)
  const data = hexToBytes(hash)
  const hashInt = data.getUint16(0) * 0xffffffff + data.getUint32(2)
  // console.log('hasher', input, hash, data, hashInt)
  return hashInt % max
}
