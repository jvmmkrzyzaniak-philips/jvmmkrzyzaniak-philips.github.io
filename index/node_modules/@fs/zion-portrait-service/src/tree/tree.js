import axios from '@fs/zion-axios'
import debugLib from '@fs/zion-debug'

const debug = debugLib('portrait-service')
const dataUrl = (pid) => `/service/memories/tps/persons/${pid}/portrait`
const multiDataUrl = (pids) => `/service/memories/tps/persons/portraits?pid=${pids.join('&pid=')}`
const memoryUrl = (memoryId) => `/service/memories/presentation/artifacts/${memoryId}`

export async function getPortraitData(pid) {
  try {
    const options = {
      method: 'get',
      url: Array.isArray(pid) ? multiDataUrl(pid) : dataUrl(pid),
      headers: { accept: 'application/vnd.familysearch.mem.tps-v2+json' },
    }
    const { data } = await axios(options)
    return data
  } catch (error) {
    debug(`Portrait Service: ${error}`)
    return {}
  }
}

export async function getPortraitUrls(pid) {
  try {
    const { _links = {} } = await getPortraitData(pid)
    return _links
  } catch (error) {
    debug(`Portrait Service: ${error}`)
    return {}
  }
}

export async function getPortraitThumb(pid) {
  try {
    const { thumbIcon } = await getPortraitUrls(pid)
    return thumbIcon.href
  } catch (error) {
    debug(`getPortraitThumb: ${error}`)
    return null
  }
}

export async function getPortraitThumbs(pids) {
  try {
    const { results } = await getPortraitData(pids)
    return pids.reduce((obj, pid) => {
      obj[pid] = results[pid].portrait.portraitUrls.thumbIconUrl
      return obj
    }, {})
  } catch (error) {
    debug(`getPortraitThumbs: ${error}`)
    return {}
  }
}

async function linkDuplicateImage({ memoryId, name, pid }) {
  const { data: duplicateMemory } = await axios.get(`/service/memories/manager/artifacts/${memoryId}`)

  try {
    // link the pid and photo
    await axios.post(`/service/memories/manager/personas?treePersonId=${pid}`, {
      memoryId: duplicateMemory.id,
      name,
    })
  } catch (error) {
    // This second 409 error is usually accompanied by this error message:
    // "Soft tag not added because a tag already exists for this Artifact + MemoryPerson."
    if (error.response.status !== 409) {
      throw error
    }
  }

  return { artifact: duplicateMemory, success: true }
}

export const uploadPhoto = async ({ file, pid, name }) => {
  if (!file || !pid || !name) {
    console.error('Cannot upload photo with undefined data', { file, pid, name })
    return null
  }
  const axiosConfig = {
    headers: { 'Content-Type': file.type },
  }
  // upload the image
  try {
    const { data } = await axios.post(
      `/service/memories/manager/artifacts/files?filename=${encodeURIComponent(file.name)}`,
      file,
      axiosConfig
    )

    // link the pid and photo
    await axios.post(`/service/memories/manager/personas?treePersonId=${pid}`, {
      memoryId: data.artifact.id,
      name,
    })
    return data
  } catch (error) {
    if (error.response.status !== 409) {
      throw error
    }

    // there is a duplicate image, grab the memory ID from the header
    // looks like `* (0123456789)`
    const memoryIdString = error.response.headers.warning.split('(')[1]
    const memoryId = memoryIdString.substring(0, memoryIdString.length - 1)
    return linkDuplicateImage({ memoryId, name, pid })
  }
}

export const setPortrait = async ({ pid, artifactId, cropArea }) => {
  if (!pid || !artifactId) {
    console.error({ pid, artifactId })
    throw new Error('Either the PID or ArtifactID is not set; cannot complete request with undefined data')
  }

  let originalRotation = 0

  try {
    const { data: portraitMemory } = await axios.get(memoryUrl(artifactId))
    // Math on rotationAngle prevents negative values from being passed to TPS below
    originalRotation = (portraitMemory.rotationAngle + 360) % 360
  } catch (error) {
    debug(`Portrait Service: ${error}`)
  }

  const { w: width, h: height, x = 0, y = 0, rotation: newRotation = 0 } = cropArea
  // TPS doesn't accept a relative rotation param, so we're creating our own by adding the
  // new rotation applied in the portrait selector to the memory's original rotation value
  const tpsRelativeRotation = (originalRotation + newRotation) % 360

  // Rotate the image, not just the portrait
  if (newRotation) {
    await axios.post(
      `/service/memories/manager/artifacts/${artifactId}/transform`,
      {},
      {
        params: { relativeRotation: newRotation },
      }
    )
  }

  return axios.post(`/service/memories/tps/persons/${pid}/portrait`, {
    x,
    y,
    width,
    height,
    rotation: tpsRelativeRotation,
    srcArtifactId: artifactId,
  })
}

export const deletePortrait = async ({ pid }) => {
  return axios.delete(`/service/memories/tps/persons/${pid}/portrait`)
}
