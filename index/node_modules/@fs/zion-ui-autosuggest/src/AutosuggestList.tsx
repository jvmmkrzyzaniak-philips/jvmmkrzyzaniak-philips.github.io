import React, { type RefObject } from 'react'
import { css } from '@linaria/core'
import { ListItem, List, colors } from '@fs/zion-ui'
import { NoticeLoading } from '@fs/zion-icon'
import { useAutosuggestContext } from './AutosuggestProvider'
import { compareText } from './util'
import { privateProps } from './AutosuggestState'

const matchCss = css`
  span {
    color: ${colors.gray100};
    font-weight: bold;
  }
`

export function AutosuggestList({ focusedRef }: { focusedRef?: RefObject<HTMLLIElement> }): JSX.Element | null {
  const {
    config: { [privateProps]: api, suggestions, isLoading, userInput },
    id,
    highlightMatchingText,
  } = useAutosuggestContext()
  const { focusedIndex } = api

  if (!suggestions?.length && !isLoading) return null

  // TODO warn if list length is over sized
  return (
    <List id={`listbox-${id}`} role="listbox">
      {suggestions.map((suggestion, suggestionIndex) => {
        const { primaryText, secondaryText, id: suggestionId, key } = suggestion
        return (
          <ListItem
            {...suggestion}
            id={`li-${suggestionIndex}-${id}`}
            key={key || suggestionId || `${primaryText}${secondaryText}`}
            primaryText={highlightMatchingText ? <MatchText input={userInput || ''} text={primaryText} /> : primaryText}
            secondaryText={
              highlightMatchingText ? <MatchText input={userInput || ''} text={secondaryText || ''} /> : secondaryText
            }
            role="option"
            selected={suggestionIndex === focusedIndex}
            ref={suggestionIndex === focusedIndex ? focusedRef : null}
            aria-selected={String(suggestionIndex === focusedIndex)}
            onClick={() => api.select(suggestionIndex)}
          />
        )
      })}
      {isLoading && <ListItem startElement={<ListItem.Icon Icon={NoticeLoading} />} primaryText="" />}
    </List>
  )
}

function MatchText({ input, text }: { input: string; text: string }): JSX.Element | null {
  if (!text) return null
  const [pre, match, post] = compareText(input, text)
  return (
    <span className={matchCss}>
      {pre}
      {!!match.length && <span>{match}</span>}
      {post}
    </span>
  )
}
