import React, { useCallback, useEffect, useReducer, useRef, useState } from 'react'
import { css } from '@linaria/core'
import { MarginBox, colors } from '@fs/zion-ui'
import { QuickGlanceOverlayBase } from '@fs/zion-ui/quarks-authorized-use-only'
import { useResizeObserver } from '@fs/zion-frontend-friends'
import { useAutosuggestContext } from './AutosuggestProvider'
import { AutosuggestList } from './AutosuggestList'
import { privateProps } from './AutosuggestState'

const scrollerCss = css`
  background: ${colors.gray00};
  max-height: 400px;
  overflow-y: auto;
  overflow-x: clip;
`

type OverlayState = { isOpen: boolean; transitioning: boolean }
type OverlayAction = boolean | 'TRANSITIONED'

const defaultOverlayState = { isOpen: false, transitioning: false }

const OverlayReducer = (state: OverlayState, action: OverlayAction): OverlayState => {
  if (action === 'TRANSITIONED') {
    if (!state.transitioning) return state
    return { ...state, transitioning: false }
  }
  if (state.isOpen === action) return state
  return { isOpen: action, transitioning: true }
}

const noOp = (): void => undefined

export default function AutosuggestOverlay({ inputRef, anchorRef }): JSX.Element {
  const {
    isLoading,
    suggestions,
    [privateProps]: { listIsShowing, focusedIndex },
  } = useAutosuggestContext().config

  const [{ isOpen, transitioning }, dispatch] = useReducer(OverlayReducer, defaultOverlayState)

  const isMountedRef = useRef(true)
  useEffect(
    () => () => {
      isMountedRef.current = false
    },
    []
  )

  const handleTransitioned = useCallback(() => isMountedRef.current && dispatch('TRANSITIONED'), [])
  useEffect(
    () => dispatch(listIsShowing && (isLoading || suggestions.length > 0)),
    [listIsShowing, isLoading, suggestions.length]
  )

  const [width, setWidth] = useState<string | number>('100%')
  const resizeCallback = useCallback(() => setWidth(anchorRef.current.getBoundingClientRect().width), [anchorRef])
  useResizeObserver(anchorRef, resizeCallback)

  const scrollRef = useRef<HTMLDivElement>(null)
  const focusedRef = useRef<HTMLLIElement>(null)
  const overlayRef = useRef<HTMLDivElement>(null)

  // Scrolls and alters input display when a new item is selected
  useEffect(() => {
    if (focusedIndex === -1 && scrollRef.current) {
      inputRef?.current?.scrollIntoView?.({
        behavior: 'smooth',
        block: 'nearest',
      })
      scrollRef.current.scrollTop = 0
    } else {
      focusedRef?.current?.scrollIntoView?.({
        behavior: 'smooth',
        block: 'nearest',
      })
    }
  }, [focusedIndex, inputRef])

  return (
    <QuickGlanceOverlayBase
      isOpen={isOpen}
      transitioning={transitioning}
      close={noOp} // Not needed, because blurring always closes the overlay
      handleTransitioned={handleTransitioned}
      placement={['bottom', 'top']}
      width={width}
      targetRef={inputRef}
      focusBackRef={inputRef}
      overlayRef={overlayRef}
      escapeToClose={false}
    >
      <MarginBox marginX="xxs" marginY="none" ref={scrollRef} className={scrollerCss} style={{ width }}>
        <AutosuggestList focusedRef={focusedRef} />
      </MarginBox>
    </QuickGlanceOverlayBase>
  )
}
