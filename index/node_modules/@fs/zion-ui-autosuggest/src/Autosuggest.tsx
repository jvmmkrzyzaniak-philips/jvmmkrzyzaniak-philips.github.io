import type { Key, Ref, ReactNode } from 'react'
import React, { forwardRef } from 'react'
import { AutosuggestProvider } from './AutosuggestProvider'
import { AutosuggestInputWithOverlay } from './AutosuggestInput'
import { useAutosuggest, type AutosuggestConfig } from './AutosuggestState'
import type { ZionUiInputProps } from './types'

export type Suggestion = {
  key?: Key
  id?: string

  primaryText: string
  secondaryText?: string
  overline?: string

  startElement?: ReactNode
  endElement?: ReactNode

  disabled?: boolean
  dense?: boolean
  badgeCount?: number
}

export type GetSuggestionsResult = Suggestion[] | Promise<Suggestion[]> | Promise<Suggestion[]>[]

/**
 * A function that will be called to get a list of suggestions based on user input
 *
 * When an array of suggestions are returned, the list will be populated with those suggestions.
 * When a promise is returned, The list will be in a loading state until the promise resolves.
 * When an array of promises are returned, the list contents will be **replaced** whenever
 * any the promises resolve, until the last promise resolves.
 */
export type SuggestionGetter = (inputValue: string) => GetSuggestionsResult

export function isImmediateSuggestions(result: GetSuggestionsResult): result is Suggestion[] {
  return !result || (Array.isArray(result) && !(result[0] as Promise<Suggestion[]>)?.then)
}

export function isSuggestionPromise(result: GetSuggestionsResult): result is Promise<Suggestion[]> {
  return !!(result as Promise<Suggestion[]>)?.then
}

type UncontrolledAutosuggestProps = {
  /** The function that will be called whenever the user types something into the input */
  getSuggestions: SuggestionGetter

  /**
   * Show matching text in the suggestions by highlighting the input text within the suggestions
   *
   * @TODO: Update this property to accept functors -> true | ((suggetion: Suggestion) => { primaryText: string[]; secondaryText?: string[] })
   * */
  highlightMatchingText?: boolean

  /** Whether to automatically show the suggestion list when the input is focused */
  showListWhenFocused?: boolean
} & ZionUiInputProps

type ControlledAutosuggestProps = UncontrolledAutosuggestProps & { config: AutosuggestConfig }

function isControlledAutosuggest(
  props: UncontrolledAutosuggestProps | ControlledAutosuggestProps
): props is ControlledAutosuggestProps {
  return (props as ControlledAutosuggestProps).config !== undefined
}

const ControlledAutosuggest = forwardRef(
  (
    { config, getSuggestions, highlightMatchingText, showListWhenFocused, id, ...props }: ControlledAutosuggestProps,
    ref: Ref<HTMLInputElement>
  ) => {
    return (
      <AutosuggestProvider
        id={id}
        getSuggestions={getSuggestions}
        highlightMatchingText={highlightMatchingText}
        showListWhenFocused={showListWhenFocused}
        config={config}
      >
        <AutosuggestInputWithOverlay ref={ref} {...props} />
      </AutosuggestProvider>
    )
  }
)

const UncontrolledAutosuggest = forwardRef((props: UncontrolledAutosuggestProps, ref: Ref<HTMLInputElement>) => (
  <ControlledAutosuggest {...props} config={useAutosuggest()} ref={ref} />
))

/**
 * This package includes the new `Autosuggest`, an improved version of Autosuggest from `@fs/zion-ui@<=13`.
 *
 * Built from the ground-up on ZionUI components, we removed the need for 3rd party libraries. This Autosuggest should be more performant, easier to configure, and much more compatible with future changes to ZionUI.
 *
 * The new `Autosuggest` supports:
 * - [x] a simplified API
 * - [x] flexible async/sync data fetching
 * - [x] field customization
 * - [x] first-class accessibility
 * - [x] integrated support with ZionForm
 * - [x] composable architecture
 *
 * Later versions will include:
 * - [ ] built-in debouncing
 * - [ ] last-resort functionality
 * - [ ] a new component called `FilteredSelect` (more on that later)
 * - [ ] improved UI and mobile behavior
 *
 * @author Zion UI Team, Kyle West
 */
export const Autosuggest = forwardRef(
  (props: ControlledAutosuggestProps | UncontrolledAutosuggestProps, ref: Ref<HTMLInputElement>) => {
    if (!props.getSuggestions) throw new Error('Missing required getSuggestions prop')
    if (isControlledAutosuggest(props)) return <ControlledAutosuggest ref={ref} {...props} />
    return <UncontrolledAutosuggest {...props} ref={ref} />
  }
)
