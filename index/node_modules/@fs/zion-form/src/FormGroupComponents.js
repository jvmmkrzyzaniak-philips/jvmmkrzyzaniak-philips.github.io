import React, { forwardRef } from 'react'
import PropTypes from 'prop-types'
import { CheckboxGroup, RadioGroup, ToggleGroup, InputGroup } from '@fs/zion-ui'
import { useWatch, useFormState } from 'react-hook-form'
import { useZionFormContext, getByPath } from './Form'

function hookUpGroupFields(Component) {
  return forwardRef(
    (
      {
        warningValidate,
        validMessage,
        namesOfFieldsToValidate = ['NotARealFieldValueThatAnyoneShouldWatch'], // this exists so that we don't watch every field when namesOfFieldsToValidate is not passed in.
        ignoreTouchedForWarnings,
        ...props
      },
      ref
    ) => {
      const {
        config: { mode },
      } = useZionFormContext()
      const { errors, isSubmitted, touchedFields, dirtyFields } = useFormState()

      const isTouched = namesOfFieldsToValidate.some((name) => getByPath(name, touchedFields))
      const isDirty = namesOfFieldsToValidate.some((name) => getByPath(name, dirtyFields))
      let watchedValues = useWatch({ name: namesOfFieldsToValidate })
      watchedValues = watchedValues.reduce((combinedObj, value, index) => {
        combinedObj[namesOfFieldsToValidate[index]] = value
        return combinedObj
      }, {})
      let didValidationRunForFields = false
      if (mode === 'onSubmit') {
        didValidationRunForFields = isSubmitted
      } else if (['onBlur', 'onTouched', 'all'].includes(mode)) {
        didValidationRunForFields = isSubmitted || isTouched
      } else if (mode === 'onChange') {
        // onChange doesn't run validation on blur, so we have to ensure that the field has been changed at least once. This doesn't quite do that - because something could get dirty then undirty, but we have no way of saying "has been changed since the last reset"
        didValidationRunForFields = isSubmitted || (isTouched && isDirty)
      }

      let errorMessage
      namesOfFieldsToValidate.some((name) => {
        const error = getByPath(name, errors)
        if (error?.message || error?.root?.message) {
          errorMessage = error.message || error.root.message
          return true
        }
        return false
      })
      // We do not want validation messages to show until either the field has been touched (which happens on the first blur from the field) or the form has been submitted. We make an exception where we can show warnings without being touched if the prop is explicitly set.
      const messages = {
        errorMessage: didValidationRunForFields ? errorMessage : undefined,
        validMessage: didValidationRunForFields ? validMessage : undefined,
        warningMessage:
          didValidationRunForFields || ignoreTouchedForWarnings
            ? warningValidate && warningValidate(watchedValues) // We only pass in the watchedValues to warningValidate because we can only guarantee the function will run when these specific values change. If you need something during your warningValidate function, it should be in the `namesOfFieldsToValidate` list.
            : undefined,
      }

      return <Component ref={ref} {...props} {...messages} />
    }
  )
}

export const FormCheckboxGroup = hookUpGroupFields(CheckboxGroup)
export const FormRadioGroup = hookUpGroupFields(RadioGroup)
export const FormToggleGroup = hookUpGroupFields(ToggleGroup)
export const FormInputGroup = hookUpGroupFields(InputGroup)

const sharedPropTypes = {
  /** Function that determines whether to display a warning message. It is called with an object of values for `fieldsToValidate` and returns a warning message to display. If you depend on the values of any fields to run your warningValidate function, you need to include them in the `namesOfFieldsToValidate` so they will trigger the function on change. */
  warningValidate: PropTypes.func,

  /* Help text to display below the group */
  helpMessage: PropTypes.string,

  /* Message to display when the fields are valid */
  validMessage: PropTypes.string,

  /** The names of the fields that the group should show validation for. This should also include the names of any fields that should trigger the warningValidate function to run. */
  namesOfFieldsToValidate: PropTypes.arrayOf(PropTypes.string),

  /** Force warningValidate to show up before a field is touched or the form is submitted */
  ignoreTouchedForWarnings: PropTypes.bool,
}

export function FormGroupProps({ ...props }) {
  return <>{props}</>
}

FormGroupProps.propTypes = sharedPropTypes
