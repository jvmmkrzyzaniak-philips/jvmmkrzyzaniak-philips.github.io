import React, { useEffect, useState, lazy, Suspense } from 'react'
import axios from '@fs/zion-axios'
import ErrorBoundary from '@fs/zion-error-boundary'
import Cookies from 'js-cookie'
import zionDebug from '@fs/zion-debug'

const debug = zionDebug('zion:root:outage-banner-with-data')
const OutageBanner = lazy(() => import('./OutageBannerWithoutData'))

function handleError(error, info) {
  debug('Outage Banner Error', error, info)
}
function Fallback() {
  return <span id="outage-banner-error" />
}

export default function OutageBannerWithData({ ...props }) {
  const [bannerData, setBannerData] = useState([])
  const BANNER_URL = '/service/home/utils/oats/outages/active'
  const now = new Date().getTime()

  useEffect(() => {
    axios
      .get(BANNER_URL)
      .then(({ data }) => data && setBannerData(data))
      .catch(debug)
  }, [])

  return (
    bannerData && (
      <ErrorBoundary errorHandler={handleError} fallbackComponent={Fallback}>
        <Suspense fallback={<div />}>
          {bannerData.map((data) => {
            const { displayBegin, outageEnd, id } = data
            const dismissCookie = `${id}`
            const hasBeenDismissed = Cookies.get(dismissCookie) === 'dismissed'
            return (
              // must not have been dismissed already this session
              // then lazily render
              !hasBeenDismissed &&
              // must be in the currently visible time window
              new Date(displayBegin) <= now &&
              new Date(outageEnd) >= now && <OutageBanner key={dismissCookie} {...data} {...props} />
            )
          })}
        </Suspense>
      </ErrorBoundary>
    )
  )
}
