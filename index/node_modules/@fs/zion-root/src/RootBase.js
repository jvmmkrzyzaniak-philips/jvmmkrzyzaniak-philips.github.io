import React, {
  createContext,
  lazy,
  Suspense,
  useContext,
  useEffect,
  useState,
  useRef,
  useMemo,
  useCallback,
} from 'react'
import Cookies from 'js-cookie'
import ErrorBoundary from '@fs/zion-error-boundary'
import { I18nProvider } from '@fs/zion-locale'
import { Providers, Theme } from '@fs/zion-ui'
import { ContrastModeContext } from '@fs/zion-ui/quarks-authorized-use-only'
import { FlagOverrides, useFeatureFlag } from '@fs/zion-flags'
import { useTranslation } from 'react-i18next'
import { css } from '@linaria/core'
import { boolAttr, useResizeObserver } from '@fs/zion-frontend-friends'
import OutageBanner from './OutageBanner'
import SkipToContent from './SkipToContent'

const HelperMode = lazy(() => import('./HelperModeImport'))
const PreviousUserProvider = lazy(() =>
  import('@fs/zion-previous-user-service').then((module) => ({ default: module.PreviousUserProvider }))
)

const Loading = () => <div />

const rootCss = css`
  display: flex;
  flex-direction: column;
  flex-grow: 1;

  &[root-full-screen] {
    flex-grow: 1;
    flex-shrink: 1;
    overflow: hidden;
  }
`

const mainCss = css`
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  min-height: 0; // To make sure sticky headers work on tables
  position: relative;
  z-index: 0;
  [root-full-screen] & {
    overflow: hidden;
    flex-shrink: 1;
    height: 0; // this would break the footer positioning if there was one - but we don't in fullscreen mode
  }
`

const headerWrapCss = css`
  transition: 0.3s ease;
  &[hide] {
    transform: translateY(calc(-1 * var(--header-height)));
    margin-bottom: calc(-1 * var(--header-height));
  }
`

const EMBEDDED_MOBILE_COOKIE_NAME = 'embeddedMobile'

const HeaderControlsContext = createContext()

export const useHeaderControls = () => {
  return useContext(HeaderControlsContext)
}

function PreviousUserProviderWrapper({ children }) {
  const enablePrevUserService = useFeatureFlag('home_enablePrevUserService').isOn

  return enablePrevUserService ? <PreviousUserProvider>{children}</PreviousUserProvider> : <>{children}</>
}

function RootBase({
  analytics = false,
  children,
  footerContent = null,
  fullScreen = false,
  experimentsContent,
  headerContent,
  helperMode = true,
  helperModeProps,
  theme = 'day',
  skipLinkId = 'main',
}) {
  // The mobile app sets an `embeddedMobile` cookie for pages embedded in a WebView
  // The header and footer should be hidden if this cookie is set
  const [embeddedMobile] = useState(() => !!Cookies.get(EMBEDDED_MOBILE_COOKIE_NAME))

  useEffect(() => {
    let mounted = true
    if (analytics) {
      // lazy-load tealium, only if analytics are set `true` in Root props
      import('@fs/zion-analytics').then(({ loadAnalytics }) => mounted && loadAnalytics())
    }
    return () => {
      mounted = false
    }
  }, [analytics])

  const [t] = useTranslation()
  const isHighContrast = useContext(ContrastModeContext)
  const [headerHeight, setHeaderHeight] = useState(0)
  const [headerIsMounted, setHeaderIsMounted] = useState(false)

  const headerContentRef = useRef()
  // We need to use a ref setter to ensure that the headerHeight gets a value on first load and that the ref is set before the resize observer is set up
  const headerContentRefSetter = useCallback((node) => {
    headerContentRef.current = node
    setHeaderIsMounted(!!node)
    setHeaderHeight(node?.clientHeight || 0) // This will also set the header height to 0 if the header is unmounted
  }, [])
  useResizeObserver(headerContentRef, (entry) => setHeaderHeight(entry.target?.clientHeight || 0), headerIsMounted)

  const [isVisible, setIsVisible] = useState(true)
  const headerControlsApi = useMemo(() => ({ isVisible, setIsVisible }), [isVisible])

  return (
    <ErrorBoundary>
      <Theme theme={theme}>
        <Suspense fallback={<Loading />}>
          <I18nProvider>
            <HeaderControlsContext.Provider value={headerControlsApi}>
              <Providers>
                <PreviousUserProviderWrapper>
                  <div
                    className={rootCss}
                    root-full-screen={boolAttr(fullScreen)}
                    high-contrast={boolAttr(isHighContrast)}
                    style={{ '--header-height': `${headerHeight}px` }}
                  >
                    {experimentsContent}

                    <div className={headerWrapCss} hide={boolAttr(!isVisible)} ref={headerContentRefSetter}>
                      <OutageBanner />
                      <SkipToContent id={skipLinkId} />
                      {!embeddedMobile && headerContent}
                    </div>
                    {helperMode && (
                      <Suspense fallback="">
                        <HelperMode {...helperModeProps} />
                      </Suspense>
                    )}

                    <main className={mainCss} id="main" aria-label={t('root.main.content', 'Main Content')}>
                      {children}
                    </main>
                    {!embeddedMobile && footerContent}
                    <FlagOverrides />
                  </div>
                </PreviousUserProviderWrapper>
              </Providers>
            </HeaderControlsContext.Provider>
          </I18nProvider>
        </Suspense>
      </Theme>
    </ErrorBoundary>
  )
}

export default RootBase
