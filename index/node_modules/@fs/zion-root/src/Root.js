import React, { lazy, Suspense, useEffect } from 'react'
import PropTypes from 'prop-types'
import { useUser, useUserProfile } from '@fs/zion-user'
import { appName, correctionalFacilityId } from '@fs/zion-config'
import { useFeatureFlag } from '@fs/zion-flags'
import Experiments from '@fs/zion-experiments'
import GlobalHeader2019 from '@fs/zion-header'
import { useNonReligiousMode } from '@fs/zion-permissions'
import RootBase from './RootBase'

const GlobalFooter = lazy(() => import('@fs/zion-footer'))

const isCF = !!correctionalFacilityId
const CFHeader = React.lazy(() => import('@fs/zion-header').then((module) => ({ default: module.CFHeader })))
const CFFooter = React.lazy(() => import('@fs/zion-footer').then((module) => ({ default: module.CFFooter })))

/**
 * Root element, HOC to wrap app in
 * Bootstraps all Frontier-React defaults
 * Adds StyleNormalize, to default typography and such
 * @param  {} children
 * @param  {} props
 */
function Root({
  header = { hidden: false },
  footer = { hidden: false },
  analytics = false,
  fullScreen = false,
  alertBannerProps,
  children,
  helperModeProps,
  ...props
}) {
  const { signedIn, userLoading, personId, cisId } = useUser()
  const { userProfile } = useUserProfile()
  const profileName = userProfile?.name.value
  const loadBraze = useFeatureFlag('frontier_braze', { appName })
  const loadBrazeAnon = useFeatureFlag('frontier_braze_anon', { appName })
  const [nonReligiousModeCheck, status, error] = useNonReligiousMode()
  const nonReligiousMode = status === 'loading' || error !== null || nonReligiousModeCheck

  // TODO: should this also be gated by analytics?
  if (loadBrazeAnon.isOn || (loadBraze.isOn && signedIn) /* && analytics */) {
    try {
      import('@fs/zion-braze').then((mod) => {
        // eslint-disable-next-line no-underscore-dangle -- need to call private method here.
        return mod._init(loadBrazeAnon.isOn)
      })
    } catch (err) {
      console.error('Failed to load braze:', err)
    }
  }

  if (header) {
    header.signedIn = signedIn
    header.profileName = profileName
    header.userLoading = userLoading
    header.personId = personId
    header.cisId = cisId
    header.alertBannerProps = alertBannerProps
    header.nonReligiousMode = nonReligiousMode
  }

  if (footer) {
    footer.nonReligiousMode = nonReligiousMode
  }

  if (fullScreen) {
    footer.hidden = true
  }

  useEffect(() => {
    let mounted = true
    if (analytics) {
      // lazy-load tealium, only if analytics are set `true` in Root props
      import('@fs/zion-analytics').then(({ loadAnalytics }) => mounted && loadAnalytics())
    }
    return () => {
      mounted = false
    }
  }, [analytics])

  return (
    <RootBase
      fullScreen={fullScreen}
      {...props}
      helperModeProps={helperModeProps}
      experimentsContent={<Experiments />}
      headerContent={
        !header.hidden &&
        (isCF ? (
          <Suspense fallback="">
            <CFHeader />
          </Suspense>
        ) : (
          <GlobalHeader2019 config={header} />
        ))
      }
      footerContent={
        !footer.hidden && <Suspense fallback="">{isCF ? <CFFooter /> : <GlobalFooter {...footer} />}</Suspense>
      }
    >
      {children}
    </RootBase>
  )
}

Root.propTypes = {
  /** Child nodes required */
  children: PropTypes.node.isRequired,

  /** Config object; if not specified, will be shown */
  header: PropTypes.shape({
    canSeeTemple: PropTypes.bool,
    signedIn: PropTypes.bool,
    profileName: PropTypes.string,
    messageCount: PropTypes.number,
    hidden: PropTypes.bool,
  }),

  /** false to not show helper mode if user is in helper mode */
  helperMode: PropTypes.oneOf([false]),

  /** Config object; if not specified, will be shown */
  footer: PropTypes.shape({
    hidden: PropTypes.bool,
  }),

  /** Selected theme from the themes object in zion-ui */
  theme: PropTypes.oneOf(['day', 'night']),

  /** analytics: set true in the environments where you want to use analytics */
  analytics: PropTypes.bool,

  /** Properties to populate the AlertBanner */
  alertBannerProps: PropTypes.objectOf(PropTypes.any),

  /** Properties to configure helper mode behavior */
  helperModeProps: PropTypes.shape({
    redirectAfterStopUrl: PropTypes.string,
  }),

  /**
   * The target id for the "Skip to Main Content" button for keyboard users.
   * Defaults to `main`, as in the root's main content wrapper below the header.
   * */
  skipLinkId: PropTypes.string,
}

export default Root
